&НаКлиенте
Перем ЭДИ_ПараметрыРаботыВнешнейБД Экспорт;

&НаКлиенте
Перем ЭДИ_СписокТиповВнешнейБД Экспорт;

&НаКлиенте
Перем ЭДИ_ВнешняяБДСуществует;

#Область ИнициализацияМодуляРаботыССУБД

// Инициализация начальных данных для работы с СУБД
//Заполняет Гл. переменные формы ЭДИ_ПараметрыРаботыВнешнейБД (Параметры подключения)
//
&НаКлиенте
Процедура Инициализировать(СохраненныеНастройки = Неопределено) Экспорт	 
	
	ЭДИ_ПараметрыРаботыВнешнейБД = Новый Структура;
	ЭДИ_ПараметрыРаботыВнешнейБД.Вставить("AdodbCnn");
	ЭДИ_ПараметрыРаботыВнешнейБД.Вставить("rs");
	ЭДИ_ПараметрыРаботыВнешнейБД.Вставить("ТипВнешнейБД");
	ЭДИ_ПараметрыРаботыВнешнейБД.Вставить("ПутьВключаетБД"				, Ложь);
	ЭДИ_ПараметрыРаботыВнешнейБД.Вставить("ПутьВнешнейБД"				, "");
	ЭДИ_ПараметрыРаботыВнешнейБД.Вставить("ИмяТаблицыВнешнейБД"			, "object_properties");
	ЭДИ_ПараметрыРаботыВнешнейБД.Вставить("СтрокаПодключенияВнешнейБД"	, "");
	ЭДИ_ПараметрыРаботыВнешнейБД.Вставить("СерверВнешнейБД"				, "");
	ЭДИ_ПараметрыРаботыВнешнейБД.Вставить("ПортВнешнейБД"				, "");
	ЭДИ_ПараметрыРаботыВнешнейБД.Вставить("ПользовательВнешнейБД"		, "");
	ЭДИ_ПараметрыРаботыВнешнейБД.Вставить("ПарольВнешнейБД"				, "");
	ЭДИ_ПараметрыРаботыВнешнейБД.Вставить("ВнешняяБазаДанныхПодключена"	, Ложь);

	Если СохраненныеНастройки <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ЭДИ_ПараметрыРаботыВнешнейБД, СохраненныеНастройки);
		ЭДИ_ОткрытьПодключениеКВнешнейБД();
		
	КонецЕсли;

КонецПроцедуры

// Функция создает таблицу для хранения данных по внешней БД
//При успешном создании таблица возвращает истина, иначе Ложь
//Параметры создаваемой Таблиы берутся из Гл. параматра ЭДИ_ПараметрыРаботыВнешнейБД
&НаКлиенте
Функция ЭДИ_СоздатьХранилище()
	
	Попытка
		
		AdodbCnn = ЭДИ_ПараметрыРаботыВнешнейБД.AdodbCnn;
		
		Если AdodbCnn = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если (ЭДИ_ПараметрыРаботыВнешнейБД.ТипВнешнейБД <> "SQLite" )
			И (НЕ ЭДИ_ПараметрыРаботыВнешнейБД.ВнешняяБазаДанныхПодключена) Тогда
				Возврат Ложь;
		КонецЕсли;
		
		Если AdodbCnn.State = 0 Тогда
			AdodbCnn.Open(ЭДИ_ПараметрыРаботыВнешнейБД.СтрокаПодключенияВнешнейБД);
		КонецЕсли;			
		
		Если ЭДИ_ПараметрыРаботыВнешнейБД.ТипВнешнейБД = "SQLite" Тогда
			AdodbCnn.Execute("PRAGMA page_size=4096");
			AdodbCnn.Execute("PRAGMA default_cache_size=8000");
		КонецЕслИ;
		
		СтрокаSQLСкрипта = "";
		//******************************* таблица свойств **********************************
		Если ЭДИ_ПараметрыРаботыВнешнейБД.ТипВнешнейБД = "SQLite" Тогда
			СтрокаSQLСкрипта 					= "CREATE TABLE " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД + " (" + 
			"id INTEGER PRIMARY KEY AUTOINCREMENT, objectlink STRING(100), " + 
			"parentlink STRING(100), recordview STRING(50), " + 
			"recdate INTEGER DEFAULT 0, IDXATTR1 VARCHAR(255), " + 
			"IDXATTR2 VARCHAR(255), IDXATTR3 VARCHAR(255), IDXATTR4 VARCHAR(255), IDXATTR5 VARCHAR(255), " + 
			"recordstate INTEGER, recorddata TEXT DEFAULT '', recordattr TEXT DEFAULT '');";
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX objectlink_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink);";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX parentlink_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (parentlink);";
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX objectlink_recordview_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink, recordview);";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX parentlink_recordview_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (parentlink, recordview);";
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX objectlink_parentlink_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink, parentlink);";
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX objectlink_recdate_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink, recdate);";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX parentlink_recdate_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (parentlink, recdate);";
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX recdate_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (recdate);";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX recordview_recdate_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (recordview, recdate);";
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX objectlink_IDXATTR1_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink, IDXATTR1);";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX objectlink_IDXATTR2_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink, IDXATTR2);";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX objectlink_IDXATTR3_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink, IDXATTR3);";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX objectlink_IDXATTR4_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink, IDXATTR4);";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX objectlink_IDXATTR5_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink, IDXATTR5);";
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX STATE_objectlink_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (recordstate, objectlink);";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX STATE_parentlink_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (recordstate, parentlink);";
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX IDXATTR1_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (IDXATTR1);";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX IDXATTR2_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (IDXATTR2);";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX IDXATTR3_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (IDXATTR3);";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX IDXATTR4_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (IDXATTR4);";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE INDEX IDXATTR5_idx ON " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (IDXATTR5);";
			
		ИначеЕсли ЭДИ_ПараметрыРаботыВнешнейБД.ТипВнешнейБД = "MySQL" Тогда
	
			СтрокаSQLСкрипта = "CREATE TABLE IF NOT EXISTS `sys`.`object_properties`"+ " (" +	// + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (" + 
			"id INT NOT NULL AUTO_INCREMENT, objectlink VARCHAR(100), " + 
			"parentlink VARCHAR(100), recordview VARCHAR(50), " + 
			"recdate INTEGER DEFAULT 0, IDXATTR1 VARCHAR(255), " + 
			"IDXATTR2 VARCHAR(255), IDXATTR3 VARCHAR(255), IDXATTR4 VARCHAR(255), IDXATTR5 VARCHAR(255), " + 
			"recordstate INTEGER DEFAULT 0, recorddata MEDIUMTEXT, recordattr MEDIUMTEXT, PRIMARY KEY (id), ";
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX objectlink_idx (objectlink ASC), ";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX parentlink_idx (parentlink ASC), ";
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX objectlink_recordview_idx (objectlink ASC, recordview ASC), ";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX parentlink_recordview_idx (parentlink ASC, recordview ASC), ";
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX objectlink_parentlink_idx (objectlink ASC, parentlink ASC), ";
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX objectlink_recdate_idx (objectlink ASC, recdate ASC), ";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX parentlink_recdate_idx (parentlink ASC, recdate ASC), ";
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX recdate_idx (recdate ASC), ";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX recordview_recdate_idx (recordview ASC, recdate ASC), ";
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX objectlink_IDXATTR1_idx (objectlink ASC, IDXATTR1 ASC), ";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX objectlink_IDXATTR2_idx (objectlink ASC, IDXATTR2 ASC), ";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX objectlink_IDXATTR3_idx (objectlink ASC, IDXATTR3 ASC), ";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX objectlink_IDXATTR4_idx (objectlink ASC, IDXATTR4 ASC), ";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX objectlink_IDXATTR5_idx (objectlink ASC, IDXATTR5 ASC), ";
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX STATE_objectlink_idx (recordstate ASC, objectlink ASC), ";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX STATE_parentlink_idx (recordstate ASC, parentlink ASC), ";
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX IDXATTR1_idx (IDXATTR1 ASC), ";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX IDXATTR2_idx (IDXATTR2 ASC), ";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX IDXATTR3_idx (IDXATTR3 ASC), ";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX IDXATTR4_idx (IDXATTR4 ASC), ";
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "INDEX IDXATTR5_idx (IDXATTR5 ASC))";
			
		ИначеЕсли ЭДИ_ПараметрыРаботыВнешнейБД.ТипВнешнейБД = "PostgreSQL" Тогда
			
			SQLStr = "CREATE TABLE " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (" +
			"id serial PRIMARY KEY, objectlink VARCHAR(100), " +
			"parentlink VARCHAR(100), recordview VARCHAR(50), " +
			"recdate INTEGER DEFAULT 0, IDXATTR1 VARCHAR(255), " +
			"IDXATTR2 VARCHAR(255), IDXATTR3 VARCHAR(255), IDXATTR4 VARCHAR(255), IDXATTR5 VARCHAR(255), " +
			"recordstate INTEGER DEFAULT 0, recorddata TEXT, recordattr TEXT);";
			AdodbCnn.Execute(SQLStr);
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_objectlink_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_parentlink_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (parentlink ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_objectlink_recordview_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink ASC NULLS LAST, recordview ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_parentlink_recordview_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (parentlink ASC NULLS LAST, recordview ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_objectlink_parentlink_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink ASC NULLS LAST, parentlink ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_objectlink_recdate_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink ASC NULLS LAST, recdate ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_parentlink_recdate_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (parentlink ASC NULLS LAST, recdate ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_recdate_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (recdate ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_recordview_recdate_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (recordview ASC NULLS LAST, recdate ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_objectlink_IDXATTR1_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink ASC NULLS LAST, IDXATTR1 ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_objectlink_IDXATTR2_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink ASC NULLS LAST, IDXATTR2 ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_objectlink_IDXATTR3_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink ASC NULLS LAST, IDXATTR3 ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_objectlink_IDXATTR4_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink ASC NULLS LAST, IDXATTR4 ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_objectlink_IDXATTR5_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink ASC NULLS LAST, IDXATTR5 ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_STATE_objectlink_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (recordstate ASC NULLS LAST, objectlink ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_STATE_parentlink_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (recordstate ASC NULLS LAST, parentlink ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_IDXATTR1_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (IDXATTR1 ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_IDXATTR2_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (IDXATTR2 ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_IDXATTR3_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (IDXATTR3 ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_IDXATTR4_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (IDXATTR4 ASC NULLS LAST);";
			AdodbCnn.Execute(СтрокаSQLСкрипта);
			
			СтрокаSQLСкрипта = "CREATE INDEX " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "_IDXATTR5_idx ON public." + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (IDXATTR5 ASC NULLS LAST);";	
			
		ИначеЕсли ЭДИ_ПараметрыРаботыВнешнейБД.ТипВнешнейБД = "MSSQLS" Or  ЭДИ_ПараметрыРаботыВнешнейБД.ТипВнешнейБД = "MSSQLNC11" тогда
			
			SQLStr = "CREATE TABLE " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (" +
			"id int IDENTITY(1,1) NOT NULL, " +
			"objectlink varchar(100), " +
			"parentlink varchar(100), " +
			"recordview varchar(50), " + 
			"recdate int, " + 
			"IDXATTR1 varchar(255), " + 
			"IDXATTR2 varchar(255), " + 
			"IDXATTR3 varchar(255), " + 
			"IDXATTR4 varchar(255), " + 
			"IDXATTR5 varchar(255), " + 
			"recordstate int, " + 
			"recorddata text, " + 
			"recordattr text)" + Символ(13);
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [objectlink_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([objectlink] ASC)" + Символ(13);
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [parentlink_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([parentlink] ASC)" + Символ(13);
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [objectlink_recordview_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([objectlink] ASC, [recordview] ASC)" + Символ(13);
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [parentlink_recordview_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([parentlink] ASC, [recordview] ASC)" + Символ(13);
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [objectlink_parentlink_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([objectlink] ASC, [parentlink] ASC)" + Символ(13);
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [objectlink_recdate_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([objectlink] ASC, [recdate] ASC)" + Символ(13);
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [parentlink_recdate_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([parentlink] ASC, [recdate] ASC)" + Символ(13);
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [recdate_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([recdate] ASC)" + Символ(13);
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [recordview_recdate_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([recordview] ASC, [recdate] ASC)" + Символ(13);
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [objectlink_IDXATTR1_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([objectlink] ASC, [IDXATTR1] ASC)" + Символ(13);
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [objectlink_IDXATTR2_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([objectlink] ASC, [IDXATTR2] ASC)" + Символ(13);
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [objectlink_IDXATTR3_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([objectlink] ASC, [IDXATTR3] ASC)" + Символ(13);
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [objectlink_IDXATTR4_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([objectlink] ASC, [IDXATTR4] ASC)" + Символ(13);
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [objectlink_IDXATTR5_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([objectlink] ASC, [IDXATTR5] ASC)" + Символ(13);
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [STATE_objectlink_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([recordstate] ASC, [objectlink] ASC)" + Символ(13);
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [STATE_parentlink_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([recordstate] ASC, [parentlink] ASC)" + Символ(13);
			
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [IDXATTR1_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([IDXATTR1] ASC)" + Символ(13);
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [IDXATTR2_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([IDXATTR2] ASC)" + Символ(13);
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [IDXATTR3_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([IDXATTR3] ASC)" + Символ(13);
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [IDXATTR4_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([IDXATTR4] ASC)" + Символ(13);
			СтрокаSQLСкрипта = СтрокаSQLСкрипта + "CREATE NONCLUSTERED INDEX [IDXATTR5_idx] ON [dbo].[" + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ "] ([IDXATTR5] ASC)" + Символ(13);
			AdodbCnn.Execute(SQLStr);
			
		КонецЕсли;
		
		AdodbCnn.Execute(СтрокаSQLСкрипта);
		ЭДИ_ПараметрыРаботыВнешнейБД.ВнешняяБазаДанныхПодключена = Истина;
		Возврат Истина;
		
	Исключение
		
		Сообщить("Ошибка работы с СУБД. Обратитесь к Администратору");
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

// Проверка таблицы внешней базы на существование
//DRIVER MySQL ODBC
//Возвращаемые параметры
//Если таблица существует возвращает Истина, Иначе Ложь
&НаКлиенте
Функция ЭДИ_ПроверитьТаблицуХранилища() Экспорт
	
	РезультатПроверки = Ложь;
	
	Попытка
		
		AdodbCnn 	= Новый COMОбъект("ADODB.Connection");
		AdoxCat 	= Новый COMОбъект("ADOX.Catalog");
		tabl 		= Новый COMОбъект("ADOX.Table");
		rs 			= Новый COMобъект("ADODB.Recordset");
		
		ЭДИ_ПараметрыРаботыВнешнейБД.AdodbCnn 	= AdodbCnn;
		ЭДИ_ПараметрыРаботыВнешнейБД.rs			= rs;		
		Если ЭДИ_ПараметрыРаботыВнешнейБД.ТипВнешнейБД = "SQLite" Тогда
			
			ФайлБДНаДиске = Новый Файл(ЭДИ_ПараметрыРаботыВнешнейБД.ПутьВнешнейБД + ?(ЭДИ_ПараметрыРаботыВнешнейБД.ПутьВключаетБД, "", "_extstore.db"));
			Если ФайлБДНаДиске.Существует() Тогда
				
				РезультатПроверки = Истина;
				ЭДИ_ПараметрыРаботыВнешнейБД.ВнешняяБазаДанныхПодключена = Истина;
				
			Иначе
				РезультатПроверки = ЭДИ_СоздатьХранилище();
			КонецЕсли;
			
		Иначе
			
			AdodbCnn.Open(ЭДИ_ПараметрыРаботыВнешнейБД.СтрокаПодключенияВнешнейБД);
			AdoxCat.ActiveConnection 	= AdodbCnn;
			tabl 						= AdoxCat.Tables(ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД);
			
			Если tabl = Неопределено тогда
				РезультатПроверки = Ложь
			Иначе
				
				РезультатПроверки = Истина;
				ЭДИ_ПараметрыРаботыВнешнейБД.ВнешняяБазаДанныхПодключена = Истина;
				
			КонецЕСлИ;
			
		КонецЕсли;
		
		Попытка
			
			tabl 					= Неопределено;
			AdoxCat  				= Неопределено;
			
		Исключение
			
		КонецПопытки;
	Исключение
		
		Сообщить(ОписаниеОшибки());
		ЭДИ_ПараметрыРаботыВнешнейБД.ВнешняяБазаДанныхПодключена = Ложь;
		Сообщить("Ошибка работы с СУБД. Обратитесь к Администратору");
		Возврат Ложь;
		
	Конецпопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции	

// Открытие подключения к внешней БД.
//
&НаКлиенте
Функция ЭДИ_ОткрытьПодключениеКВнешнейБД() Экспорт
	
	Если ЭДИ_ПараметрыРаботыВнешнейБД.ТипВнешнейБД = "SQLite" Тогда	
		
		Если Не ЭДИ_ПараметрыРаботыВнешнейБД.ПутьВключаетБД 
			И Прав(СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.ПутьВнешнейБД),1) <> "\" тогда
			
			ЭДИ_ПараметрыРаботыВнешнейБД.ПутьВнешнейБД = СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.ПутьВнешнейБД) + "\";
			
		КонецЕслИ;
			
		ЭДИ_ПараметрыРаботыВнешнейБД.СтрокаПодключенияВнешнейБД = "DRIVER={SQLite3 ODBC Driver};Database=" + ЭДИ_ПараметрыРаботыВнешнейБД.ПутьВнешнейБД + ?(ЭДИ_ПараметрыРаботыВнешнейБД.ПутьВключаетБД, "", "_extstore.db") + ";LongNames=0;Timeout=1000;NoTXN=0;SyncPragma=NORMAL;StepAPI=0";
		
	Иначе
		
		Если ЭДИ_ПараметрыРаботыВнешнейБД.ТипВнешнейБД = "MySQL" Тогда
			ЭДИ_ПараметрыРаботыВнешнейБД.СтрокаПодключенияВнешнейБД = "DRIVER={MySQL ODBC 3.51 Driver};Server="+СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.СерверВнешнейБД)+";Port="+СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.ПортВнешнейБД)+";Database=sys"+";User="+СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.ПользовательВнешнейБД)+";Password="+СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.ПарольВнешнейБД)+";";
		ИначеЕсли ЭДИ_ПараметрыРаботыВнешнейБД.ТипВнешнейБД = "PostgreSQL" Тогда
			ЭДИ_ПараметрыРаботыВнешнейБД.СтрокаПодключенияВнешнейБД = "DSN=PostgreSQL30;Server="+СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.СерверВнешнейБД)+";Port="+СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.ПортВнешнейБД)+";Database="+СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.ПутьВнешнейБД)+";UID="+СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.ПользовательВнешнейБД)+";Pwd="+СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.ПарольВнешнейБД)+";";			
		ИначеЕсли ЭДИ_ПараметрыРаботыВнешнейБД.ТипВнешнейБД = "MSSQLS" Тогда
			ЭДИ_ПараметрыРаботыВнешнейБД.СтрокаПодключенияВнешнейБД = "Driver={SQL Server};Server="+СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.СерверВнешнейБД)+";Database="+СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.ПутьВнешнейБД)+";Uid="+СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.ПользовательВнешнейБД)+";Pwd="+СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.ПарольВнешнейБД)+";"			
		ИначеЕсли ЭДИ_ПараметрыРаботыВнешнейБД.ТипВнешнейБД = "MSSQLNC11" Тогда
			ЭДИ_ПараметрыРаботыВнешнейБД.СтрокаПодключенияВнешнейБД = "Driver={SQL Server Native Client 11.0};Server="+СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.СерверВнешнейБД)+";Database="+СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.ПутьВнешнейБД)+";Uid="+СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.ПользовательВнешнейБД)+";Pwd="+СокрЛП(ЭДИ_ПараметрыРаботыВнешнейБД.ПарольВнешнейБД)+";"			
		КонецЕСЛИ;
		
	КонецЕслИ;
	
	Если ЭДИ_ПроверитьТаблицуХранилища() = False Тогда
		ЭДИ_ВнешняяБДСуществует = ЭДИ_СоздатьХранилище();
	Иначе
		ЭДИ_ВнешняяБДСуществует = истина
	КонецЕсли;
	
	Возврат ЭДИ_ВнешняяБДСуществует;
	
КонецФункции

#КонецОбласти

#Область РаботаСДанными

&НаКлиенте
Функция ЭДИ_Записать(Знач ОбъектЗаписи, Знач ВладелецЗаписи, Знач ТипЗаписи, Знач ДатаЗаписи = Неопределено,
						Знач Индекс1 = Неопределено, Знач Индекс2 = Неопределено, Знач Индекс3 = Неопределено,
						Знач Индекс4 = Неопределено, Знач Индекс5 = Неопределено, Знач Данные = Неопределено,
						Знач Атрибуты = Неопределено, Знач Идентификатор = Неопределено) Экспорт
	
	СтруктураЗаписи = ЗаполнитьПустуюЗаписьПараметрами(ОбъектЗаписи, ВладелецЗаписи, ТипЗаписи, ДатаЗаписи, 
															Индекс1, Индекс2, Индекс3, Индекс4, Индекс5, Данные, Атрибуты, Идентификатор);
															
	Возврат ?(Идентификатор = Неопределено, ЭДИ_ЗаписатьСвойство(СтруктураЗаписи), ЭДИ_ПерезаписатьСвойствоПоИндексу(СтруктураЗаписи));
	
КонецФункции

&НаКлиенте
Функция ЭДИ_Прочитать(Знач ОбъектЗаписи, Знач ВладелецЗаписи, Знач ТипЗаписи, Знач ДатаЗаписи = Неопределено,
						Знач Индекс1 = Неопределено, Знач Индекс2 = Неопределено, Знач Индекс3 = Неопределено,
						Знач Индекс4 = Неопределено, Знач Индекс5 = Неопределено, Знач Идентификатор = Неопределено) Экспорт
						
	Если Идентификатор = Неопределено Тогда
		
		СтруктураЗаписи = ЗаполнитьПустуюЗаписьПараметрами(ОбъектЗаписи, ВладелецЗаписи, ТипЗаписи, ДатаЗаписи, 
															Индекс1, Индекс2, Индекс3, Индекс4, Индекс5);
		Возврат ЭДИ_ПолучитьСвойство(СтруктураЗаписи);
		
	Иначе
		Возврат ЭДИ_ПолучитьЗаписьПоИндексу(Идентификатор);
	КонецЕсли;		
						
КонецФункции

&НаКлиенте
Функция ЭДИ_ПрочитатьСвойства(Знач ОбъектЗаписи, Знач ВладелецЗаписи, Знач ТипЗаписи, Знач ДатаЗаписи = Неопределено,
						Знач Индекс1 = Неопределено, Знач Индекс2 = Неопределено, Знач Индекс3 = Неопределено,
						Знач Индекс4 = Неопределено, Знач Индекс5 = Неопределено, Знач ДатаНачала = Неопределено, 
						Знач ДатаОкончания = Неопределено, Знач БезДанных = 0, Знач ВсеСтатусы = 1, Знач ПоВхождениюТипа = Ложь) Экспорт
						
	СтруктураОтбора = ЗаполнитьПустуюЗаписьПараметрами(ОбъектЗаписи, ВладелецЗаписи, ТипЗаписи, ДатаЗаписи, 
														Индекс1, Индекс2, Индекс3, Индекс4, Индекс5);
														
	Возврат ЭДИ_ПолучитьСписокСвойств(СтруктураОтбора, ДатаНачала, ДатаОкончания, БезДанных, ВсеСтатусы, ПоВхождениюТипа);
	
КонецФункции

&НаКлиенте
Функция ЭДИ_Удалить(Знач ОбъектЗаписи, Знач ВладелецЗаписи, Знач ТипЗаписи, Знач ДатаЗаписи = Неопределено,
						Знач Индекс1 = Неопределено, Знач Индекс2 = Неопределено, Знач Индекс3 = Неопределено,
						Знач Индекс4 = Неопределено, Знач Индекс5 = Неопределено, Знач Идентификатор = Неопределено) Экспорт
						
	Если Идентификатор = Неопределено Тогда
		
		СтруктураЗаписи = ЗаполнитьПустуюЗаписьПараметрами(ОбъектЗаписи, ВладелецЗаписи, ТипЗаписи, ДатаЗаписи, 
															Индекс1, Индекс2, Индекс3, Индекс4, Индекс5);
															
		НайденноеСвойство = ЭДИ_ПолучитьСвойство(СтруктураЗаписи);
		Если НайденноеСвойство.Результат Тогда
			Возврат ЭДИ_УдалитьСвойство(НайденноеСвойство.ИндексЗаписи);
		КонецЕсли;
		
	Иначе
		Возврат ЭДИ_УдалитьСвойство(Идентификатор);
	КонецЕсли;
	
КонецФункции
					
&НаКлиенте
Функция ЗаполнитьПустуюЗаписьПараметрами(Знач ОбъектЗаписи, Знач ВладелецЗаписи, Знач ТипЗаписи, Знач ДатаЗаписи = Неопределено,
						Знач Индекс1 = Неопределено, Знач Индекс2 = Неопределено, Знач Индекс3 = Неопределено,
						Знач Индекс4 = Неопределено, Знач Индекс5 = Неопределено, Знач Данные = Неопределено,
						Знач Атрибуты = Неопределено, Знач Идентификатор = Неопределено)
						
	СтруктураЗаписи 			= ?(Идентификатор = Неопределено, ЭДИ_ПолучитьПустуюЗапись(), ЭДИ_ПолучитьЗаписьПоИндексу(Идентификатор).Содержимое);
	СтруктураЗаписи.Объект 		= ?(Идентификатор = Неопределено, ОбъектЗаписи, ЗначениеВСтрокуВнутрСервер(ОбъектЗаписи));
	СтруктураЗаписи.Владелец 	= ?(Идентификатор = Неопределено, ВладелецЗаписи, ЗначениеВСтрокуВнутрСервер(ВладелецЗаписи));
	СтруктураЗаписи.Тип 		= ТипЗаписи;
	СтруктураЗаписи.Дата 		= ?(ДатаЗаписи = Неопределено, ТекущаяДата(), ДатаЗаписи);
	
	Если Индекс1 <> Неопределено Тогда
		СтруктураЗаписи.Индекс1 = Индекс1;
	КонецЕсли;
	Если Индекс2 <> Неопределено Тогда
		СтруктураЗаписи.Индекс2 = Индекс2;
	КонецЕсли;
	Если Индекс3 <> Неопределено Тогда
		СтруктураЗаписи.Индекс3 = Индекс3;
	КонецЕсли;
	Если Индекс4 <> Неопределено Тогда
		СтруктураЗаписи.Индекс4 = Индекс4;
	КонецЕсли;
	Если Индекс5 <> Неопределено Тогда
		СтруктураЗаписи.Индекс5 = Индекс5;
	КонецЕсли;
	
	Если Данные <> Неопределено Тогда
		СтруктураЗаписи.Данные = Данные;
	КонецЕсли;
	Если Атрибуты <> Неопределено Тогда
		СтруктураЗаписи.Атрибуты = Атрибуты;
	КонецЕсли;
	
	Возврат СтруктураЗаписи;
	
КонецФункции

#КонецОбласти

#Область УправленияЗаписьюТаблицыСвойствОбъектов

&НаКлиенте
Функция ЭДИ_ПолучитьПустуюЗапись() Экспорт;
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Индекс"	,0);
	СтруктураЗаписи.Вставить("Объект"	, Неопределено);
	СтруктураЗаписи.Вставить("Владелец"	, Неопределено);
	СтруктураЗаписи.Вставить("Тип"		, Неопределено);
	СтруктураЗаписи.Вставить("Дата"		, Неопределено);
	СтруктураЗаписи.Вставить("Состояние", 0);
	
	СтруктураЗаписи.Вставить("Индекс1","");
	СтруктураЗаписи.Вставить("Индекс2","");
	СтруктураЗаписи.Вставить("Индекс3","");
	СтруктураЗаписи.Вставить("Индекс4","");
	СтруктураЗаписи.Вставить("Индекс5","");
	
	СтруктураЗаписи.Вставить("Данные"	,"");
	СтруктураЗаписи.Вставить("Атрибуты"	,"");

	Возврат СтруктураЗаписи;
	
КонецФункции

//Переобразовывает значение типа число в тип дата
//recdate
&НаКлиенте
Функция ЭДИ_ПреобразоватьДатуИзБД(ЗначениеДаты)
	
	Если ЗначениеДаты = 0 Тогда
		ЗначениеДатыДляВозврата = Дата(1,1,1);
	Иначе
		
		Попытка
			ЗначениеДатыДляВозврата = Дата(Формат(ЗначениеДаты, "ЧЦ=8; ЧГ=") + "000000");
		Исключение
			ЗначениеДатыДляВозврата = Дата(1,1,1);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ЗначениеДатыДляВозврата;
	
КонецФункции	

//заполняет структуру данными из записи СУБД
//ADODB recordset
&НаКлиенте
Функция ЭДИ_ПолучитьЗаписьИзНабора(ЭДИ_НаборЗаписей, ЭДИ_БезДанных=0) //
	
	СтруктураЗаписи = ЭДИ_ПолучитьПустуюЗапись();	
	Попытка
		
		СтруктураЗаписи.Индекс 		= ЭДИ_НаборЗаписей.Fields("id").Value;
		СтруктураЗаписи.Объект 		= СокрЛП(ЭДИ_НаборЗаписей.Fields("objectlink").Value);
		СтруктураЗаписи.Владелец 	= СокрЛП(ЭДИ_НаборЗаписей.Fields("parentlink").Value);
		СтруктураЗаписи.Тип 		= СокрЛП(ЭДИ_НаборЗаписей.Fields("recordview").Value);
		СтруктураЗаписи.Дата 		= ЭДИ_ПреобразоватьДатуИзБД(ЭДИ_НаборЗаписей.Fields("recdate").Value);
		СтруктураЗаписи.Индекс1 	= СокрЛП(ЭДИ_НаборЗаписей.Fields("IDXATTR1").Value);
		СтруктураЗаписи.Индекс2 	= СокрЛП(ЭДИ_НаборЗаписей.Fields("IDXATTR2").Value);
		СтруктураЗаписи.Индекс3 	= СокрЛП(ЭДИ_НаборЗаписей.Fields("IDXATTR3").Value);
		СтруктураЗаписи.Индекс4 	= СокрЛП(ЭДИ_НаборЗаписей.Fields("IDXATTR4").Value);
		СтруктураЗаписи.Индекс5 	= СокрЛП(ЭДИ_НаборЗаписей.Fields("IDXATTR5").Value);
		СтруктураЗаписи.Состояние 	= ЭДИ_НаборЗаписей.Fields("recordstate").Value;
		
		Если ЭДИ_БезДанных = 0 Тогда
			
			СтруктураЗаписи.Данные 		= СокрЛП(ЭДИ_НаборЗаписей.Fields("recorddata").Value);
			СтруктураЗаписи.Атрибуты 	= СокрЛП(ЭДИ_НаборЗаписей.Fields("recordattr").Value);
			
		ИначеЕсли ЭДИ_БезДанных = 2 Тогда
			СтруктураЗаписи.Атрибуты = СокрЛП(ЭДИ_НаборЗаписей.Fields("recordattr").Value);
		КонецЕслИ;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат СтруктураЗаписи;
	
КонецФункции

&НаКлиенте
Функция ЭДИ_ПроверитьЗаписьПоИндексу(ИндексЗаписи)
	
	AdodbCnn 	= ЭДИ_ПараметрыРаботыВнешнейБД.AdodbCnn;
	rs 			= ЭДИ_ПараметрыРаботыВнешнейБД.rs;
	cIdx 		= 0;
	Попытка
		
		Если AdodbCnn.State = 0 Тогда
			AdodbCnn.Open(ЭДИ_ПараметрыРаботыВнешнейБД.СтрокаПодключенияВнешнейБД);
		КонецЕсли;			
		
		СтрокаSQLЗапроса = "SELECT *  FROM " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " WHERE id=" + СокрЛП(ИндексЗаписи);
		rs.Open(СтрокаSQLЗапроса, AdodbCnn, 0, 1);
		
		Попытка
			
			rs.MoveFirst();
			cIdx = rs.Fields("id").Value;
			
		Исключение
			
			rs.Close();
			Возврат 0;
			
		Конецпопытки;
		
		rs.Close();
		Возврат cIdx;
		
	Исключение	
		
		Сообщить("Не удалось подключить внешнюю БД!");
		Return (-1);
		
	КонецПопытки;
	
КонецФункции	

&НаКлиенте
Функция ЭДИ_ПерезаписатьСвойствоПоИндексу(ЭДИ_СвойствоДляЗаписи) Экспорт;
	
	CheckRes = ЭДИ_ПроверитьЗаписьПоИндексу(ЭДИ_СвойствоДляЗаписи.Индекс);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Результат"	, Ложь);
	ВозвращаемоеЗначение.Вставить("Сообщение"	, "");
	ВозвращаемоеЗначение.Вставить("Содержимое"	, Неопределено);

    СтрокаSQLЗапроса 	= "";
	AdodbCnn 			= ЭДИ_ПараметрыРаботыВнешнейБД.AdodbCnn;

    Если CheckRes < 0 Тогда
		
		ВозвращаемоеЗначение.Вставить("Сообщение", "Ошибка работы с базой данных");
        Возврат ВозвращаемоеЗначение;
		
    КонецЕсли;

	Если CheckRes = 0 Тогда
		
        ВозвращаемоеЗначение.Вставить("Сообщение", "Нет записи с указанным индексом: " + СокрЛП(ЭДИ_СвойствоДляЗаписи));
        Возврат ВозвращаемоеЗначение;
		
    КонецЕсли;

	_OBJECT 	= ?(ЭДИ_СвойствоДляЗаписи.Объект = Неопределено		, "", ЭДИ_СвойствоДляЗаписи.Объект);
	_OWNER 		= ?(ЭДИ_СвойствоДляЗаписи.Владелец = Неопределено	, "", ЭДИ_СвойствоДляЗаписи.Владелец);
	_TYPE 		= ?(ЭДИ_СвойствоДляЗаписи.Тип = Неопределено		, "", СокрЛП(ЭДИ_СвойствоДляЗаписи.Тип));
	_ATTRIBUTES = ?(ЭДИ_СвойствоДляЗаписи.Атрибуты = ""				, "", ЭДИ_СвойствоДляЗаписи.Атрибуты);
	
    СтрокаSQLЗапроса = "UPDATE " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " SET objectlink='" + _OBJECT + "',  parentlink='" +_OWNER + "', recordview='" + _TYPE + "', recorddata='" + СокрЛП(ЭДИ_СвойствоДляЗаписи.Данные) + "'";

	Если СокрЛП(_ATTRIBUTES) <> "" Тогда
		СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", recordattr='" + ?(СокрЛП(_ATTRIBUTES) = "ERASE", "", СокрЛП(_ATTRIBUTES)) + "'";
    КонецЕсли;

	Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс1) <> "" Тогда
		СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", idxattr1='" + ?(СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс1) = "ERASE", "", СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс1)) + "'";
	КонецЕсли;

	Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс2) <> "" Тогда
		СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", idxattr2='" + ?(СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс2) = "ERASE", "", СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс2)) + "'";
	КонецЕсли;

	Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс3) <> "" Тогда
		СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", idxattr3='" + ?(СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс3) = "ERASE", "", СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс3)) + "'";
	КонецЕсли;

    Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс4) <> "" Тогда
		СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", idxattr4='" + ?(СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс4) = "ERASE", "", СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс4)) + "'";
	КонецЕсли;
	
    Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс5) <> "" Тогда
		СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", idxattr5='" + ?(СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс5) = "ERASE", "", СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс5)) + "'";
	КонецЕсли;

	ЭДИ_ДатаСвойства = ?(ЗначениеЗаполнено(ЭДИ_СвойствоДляЗаписи.Дата), СтрЗаменить(Формат(ЭДИ_СвойствоДляЗаписи.Дата,"ДФ=yyyyMMdd"), Символы.НПП, ""), 0);
	СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", recdate=" + ?(Число(ЭДИ_ДатаСвойства) > 0, СокрЛП(ЭДИ_ДатаСвойства), "0");
    СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", recordstate=" + СокрЛП(ЭДИ_СвойствоДляЗаписи.Состояние);
    СтрокаSQLЗапроса = СтрокаSQLЗапроса + " WHERE id=" + СокрЛП(ЭДИ_СвойствоДляЗаписи.индекс) + ";";
	
	Если AdodbCnn.State = 0 Тогда
		AdodbCnn.Open(ЭДИ_ПараметрыРаботыВнешнейБД.СтрокаПодключенияВнешнейБД);
	КонецЕсли;			
	
    AdodbCnn.Execute(СтрокаSQLЗапроса);
	
	ВозвращаемоеЗначение.Вставить("Результат"	, Истина);
	ВозвращаемоеЗначение.Вставить("Сообщение"	, "Запись обновлена");
	ВозвращаемоеЗначение.Вставить("Содержимое"	, ЭДИ_ПолучитьЗаписьПоИндексу(ЭДИ_СвойствоДляЗаписи.Индекс));

    Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Функция ЭДИ_ПолучитьЗаписьПоИндексу(ИндексЗаписи) Экспорт;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Результат", Ложь);
	ВозвращаемоеЗначение.Вставить("Сообщение", "");
	ВозвращаемоеЗначение.Вставить("Содержимое", Неопределено);

	AdodbCnn 			= ЭДИ_ПараметрыРаботыВнешнейБД.AdodbCnn;
	rs 					= ЭДИ_ПараметрыРаботыВнешнейБД.rs;
	
	Попытка
		
		Если AdodbCnn.State = 0 Тогда
			AdodbCnn.Open(ЭДИ_ПараметрыРаботыВнешнейБД.СтрокаПодключенияВнешнейБД);
		КонецЕсли;			
		
        СтрокаSQLЗапроса = "SELECT *  FROM " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " WHERE id=" + СокрЛП(ИндексЗаписи) + ";";
		rs.Open(СтрокаSQLЗапроса, AdodbCnn, 0, 1);
		
	Исключение
		
		Попытка
			rs.Close()
		Исключение

		КонецПопытки;
		
		ОписаниеОшибки	= ОписаниеОшибки();
		ВозвращаемоеЗначение.Вставить("Результат", Ложь);
		ВозвращаемоеЗначение.Вставить("Сообщение", "");
		
	Конецпопытки;
	
    Попытка
		
		rs.MoveFirst();
        CurrentRecord = ЭДИ_ПолучитьЗаписьИзНабора(rs);
		
		ВозвращаемоеЗначение.Вставить("Результат", Истина);
		ВозвращаемоеЗначение.Вставить("Сообщение", "Идентификатор записи:" + СокрЛП(rs.Fields("id").Value));
		ВозвращаемоеЗначение.Вставить("Содержимое", CurrentRecord);
		ВозвращаемоеЗначение.Вставить("ИндексЗаписи", rs.Fields("id").Value);
		
		rs.Close();
		
	Исключение
		
		rs.Close();
		ВозвращаемоеЗначение.Вставить("Результат", Ложь);
		ВозвращаемоеЗначение.Вставить("Сообщение", "По индексу("+СокрЛП(ИндексЗаписи)+") запись не найдена!");
		
    КонецПопытки;

    Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Функция ЭДИ_ПолучитьСписокСвойств(ЭДИ_Отбор, ЭДИ_ДатаНачала = Неопределено, ЭДИ_ДатаКонца = Неопределено, ЭДИ_БезДанных = 0, ЭДИ_ВсеСтатусы = 1, ЭДИ_ПоВхождениюТипа = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Результат"	, Ложь);
	ВозвращаемоеЗначение.Вставить("Сообщение"	, "");
	ВозвращаемоеЗначение.Вставить("Содержимое"	, Неопределено);
	
	Если ЭДИ_ВнешняяБДСуществует = Ложь тогда
		
		ВозвращаемоеЗначение.Результат 	= Ложь;
		ВозвращаемоеЗначение.Сообщение 	= СокрЛП("Внешняя база данных не подключена!");
		ВозвращаемоеЗначение.Содержимое = Неопределено;	
		
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;	
	
	СписокЗаписейДляВозврата 	= Новый СписокЗначений;
	ЭДИ_ДатаНачала 				= ?(ЭДИ_ДатаНачала = Неопределено, 0, Формат(ЭДИ_ДатаНачала,"ДФ=yyyyMMdd"));
	ЭДИ_ДатаКонца 				= ?(ЭДИ_ДатаКонца = Неопределено, 0, Формат(ЭДИ_ДатаКонца,"ДФ=yyyyMMdd"));
	
	Попытка
		
		AdodbCnn 			= ЭДИ_ПараметрыРаботыВнешнейБД.AdodbCnn;
		rs 					= ЭДИ_ПараметрыРаботыВнешнейБД.rs;
		ЗапросДополнен 		= Ложь;
		СтрокаSQLЗапроса 	= "";
		
		Попытка
			
			Попытка
				
				Если AdodbCnn.State = 0 Тогда
					AdodbCnn.Open(ЭДИ_ПараметрыРаботыВнешнейБД.СтрокаПодключенияВнешнейБД);
				КонецЕсли;
				
			Исключение
				
				ВозвращаемоеЗначение.Результат 	= Ложь;
				ВозвращаемоеЗначение.Сообщение 	= СокрЛП("Ошибка открытия подключения к базе данных! " + ОписаниеОшибки());
				ВозвращаемоеЗначение.Содержание = Неопределено;	
				
				Возврат ВозвращаемоеЗначение;
				
			КонецПопытки;
			
			СтрокаSQLЗапроса = "SELECT * FROM " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД;
            Если ЭДИ_БезДанных = 1 Тогда
                СтрокаSQLЗапроса = "SELECT id, objectlink, parentlink, recordview, recdate, idxattr1, idxattr2, idxattr3, idxattr4, idxattr5, recordstate FROM " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД;
            ИначеЕсли ЭДИ_БезДанных = 2 Тогда
                СтрокаSQLЗапроса = "SELECT id, objectlink, parentlink, recordview, recdate, idxattr1, idxattr2, idxattr3, idxattr4, idxattr5, recordstate, recordattr FROM " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД;
            КонецЕсли;
			
			_OBJECT = ?(ЭДИ_Отбор.Объект = Неопределено, "", ЗначениеВСтрокуВнутрСервер(ЭДИ_Отбор.Объект));
			_OWNER 	= ?(ЭДИ_Отбор.Владелец = Неопределено, "", ЗначениеВСтрокуВнутрСервер(ЭДИ_Отбор.Владелец));
			_TYPE 	= ?(ЭДИ_Отбор.Тип = Неопределено, "", СокрЛП(ЭДИ_Отбор.Тип));
			
			Если _OBJECT <> "" Или _OWNER <> "" Или _TYPE <> "" Или ЭДИ_ДатаНачала <> 0 Или ЭДИ_ДатаКонца <> 0
                Или ЭДИ_Отбор.Индекс1 <> "" Или ЭДИ_Отбор.Индекс2 <> "" Или ЭДИ_Отбор.Индекс3 <> "" Или ЭДИ_Отбор.Индекс4 <> "" Или ЭДИ_Отбор.Индекс5 <> "" Тогда
				
				СтрокаУсловияПоДате  = "";
                Если ЭДИ_ДатаНачала > 0 И ЭДИ_ДатаКонца = 0 Тогда
					
					СтрокаУсловияПоДате = "recdate>=" + СокрЛП(ЭДИ_ДатаНачала);
                    ЗапросДополнен 		= Истина;
					
				ИначеЕсли ЭДИ_ДатаНачала = 0 И ЭДИ_ДатаКонца > 0 Тогда
					
					СтрокаУсловияПоДате = "recdate<=" + СокрЛП(ЭДИ_ДатаКонца);
                    ЗапросДополнен 		= Истина;
					
                ИначеЕсли ЭДИ_ДатаНачала > 0 И ЭДИ_ДатаКонца > 0 Тогда
					
					СтрокаУсловияПоДате = "recdate BETWEEN " + СокрЛП(ЭДИ_ДатаНачала) + " AND " + СокрЛП(ЭДИ_ДатаКонца);
                    ЗапросДополнен 		= Истина;
					
                КонецЕсли;
				
				СтрокаSQLЗапроса = СтрокаSQLЗапроса + СтрокаУсловияПоДате;
				Если _OBJECT<> "" Тогда
					
					СтрокаSQLЗапроса 	= СтрокаSQLЗапроса + ?(ЗапросДополнен = Истина, " AND objectlink='", " WHERE objectlink='") + _OBJECT + "'";
					ЗапросДополнен 		= Истина;
					
				КонецЕсли;

				Если _OWNER<> "" Тогда
					
					СтрокаSQLЗапроса 	= СтрокаSQLЗапроса + ?(ЗапросДополнен = Истина, " AND parentlink='", " WHERE parentlink='") + _OWNER + "'";
					ЗапросДополнен 		= Истина;
					
				КонецЕсли;
				
				Если _TYPE<> "" Тогда
					
					СтрокаSQLЗапроса 	= СтрокаSQLЗапроса + ?(ЗапросДополнен = Истина, " AND ", " WHERE ") + "recordview" 
											+ ?(ЭДИ_ПоВхождениюТипа = Истина, " Like '", "='") + _TYPE + ?(ЭДИ_ПоВхождениюТипа = Истина, "%'", "'");
											
					ЗапросДополнен 		= Истина;
					
				КонецЕсли;
				
				Если ЭДИ_Отбор.Индекс1 <> "" Тогда
					
					СтрокаSQLЗапроса 	= СтрокаSQLЗапроса + ?(ЗапросДополнен = Истина, " AND idxattr1='", " WHERE idxattr1='") + ЭДИ_Отбор.Индекс1 + "'";
					ЗапросДополнен 		= Истина;
					
				КонецЕсли;
				Если ЭДИ_Отбор.Индекс2 <> "" Тогда
					
					СтрокаSQLЗапроса 	= СтрокаSQLЗапроса + ?(ЗапросДополнен = Истина, " AND idxattr2='", " WHERE idxattr2='") + ЭДИ_Отбор.Индекс2 + "'";
					ЗапросДополнен 		= Истина;
					
				КонецЕсли;
				Если ЭДИ_Отбор.Индекс3 <> "" Тогда
					
					СтрокаSQLЗапроса 	= СтрокаSQLЗапроса + ?(ЗапросДополнен = Истина, " AND idxattr3='", " WHERE idxattr3='") + ЭДИ_Отбор.Индекс3 + "'";
					ЗапросДополнен 		= Истина;
					
				КонецЕсли;
				Если ЭДИ_Отбор.Индекс4 <> "" Тогда
					
					СтрокаSQLЗапроса 	= СтрокаSQLЗапроса + ?(ЗапросДополнен = Истина, " AND idxattr4='", " WHERE idxattr4='") + ЭДИ_Отбор.Индекс4 + "'";
					ЗапросДополнен 		= Истина;
					
				КонецЕсли;
				Если ЭДИ_Отбор.Индекс5 <> "" Тогда
					
					СтрокаSQLЗапроса 	= СтрокаSQLЗапроса + ?(ЗапросДополнен = Истина, " AND idxattr5='", " WHERE idxattr5='")  + ЭДИ_Отбор.Индекс5 + "'";
					ЗапросДополнен 		= Истина;
					
				КонецЕсли;
				
			КонецЕсли;	
			
			Если ЭДИ_ВсеСтатусы = 0 Тогда
				
				СтрокаSQLЗапроса 	= СтрокаSQLЗапроса + ?(ЗапросДополнен = Истина, " AND recordstate=", " WHERE recordstate=") + СокрЛП(ЭДИ_ВсеСтатусы);
				ЗапросДополнен 		= Истина;
				
			КонецЕсли;
			
			СтрокаSQLЗапроса = СтрокаSQLЗапроса + ";";
			
			Попытка
				
				rs.Open(СтрокаSQLЗапроса, AdodbCnn, 0, 1);
				
				Попытка
					
					rs.MoveFirst();
					Пока rs.EOF = False Цикл
						
						CurrentRecord = ЭДИ_ПолучитьЗаписьИзНабора(rs, ЭДИ_БезДанных);
						СписокЗаписейДляВозврата.Добавить(CurrentRecord);
						rs.MoveNext();
						
					КонецЦикла;	
					
					ВозвращаемоеЗначение.Результат = Истина;
					ВозвращаемоеЗначение.Сообщение = СокрЛП(СписокЗаписейДляВозврата.Количество());
		            ВозвращаемоеЗначение.Содержимое = СписокЗаписейДляВозврата;
					
					Попытка
						rs.Close();
					Исключение
					КонецПопытки;
					
				Исключение
					
					rs.Close();
					ВозвращаемоеЗначение.Результат = ложь;
					ВозвращаемоеЗначение.Сообщение = "Нет записей во внешней базе данных.";
					
				КонецПопытки;
				
			Исключение
				
				ВозвращаемоеЗначение.Результат = ложь;
				ВозвращаемоеЗначение.Сообщение = "Ошибка получения набора записей из внешней базы данных. " + ОписаниеОшибки();
				
			КонецПопытки;
			
		Исключение
			
			ВозвращаемоеЗначение.Результат = ложь;
			ВозвращаемоеЗначение.Сообщение = "Ошибка составления запроса к базе данных. " + ОписаниеОшибки();
			
		КонецПопытки;
		
	Исключение
		
		ВозвращаемоеЗначение.Результат = ложь;
		ВозвращаемоеЗначение.Сообщение = ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции	

//Проверяет запись по владельцу и типу владельца
//
&НаКлиенте
Функция ЭДИ_ПроверитьЗапись(_OBJECT, _TYPE, _OWNER)
	
	Попытка
		
		AdodbCnn	= ЭДИ_ПараметрыРаботыВнешнейБД.AdodbCnn;
		rs			= ЭДИ_ПараметрыРаботыВнешнейБД.rs;
		cIdx 		= 0;
		Если AdodbCnn.State = 0 Тогда
			AdodbCnn.Open(ЭДИ_ПараметрыРаботыВнешнейБД.СтрокаПодключенияВнешнейБД);
		КонецЕсли;
		СтрокаSQLЗапроса = "SELECT *  FROM " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " WHERE objectlink='" + _OBJECT + "' AND recordview='" + _TYPE + "'";
		
		Если _OWNER <> "" Тогда
			СтрокаSQLЗапроса = СтрокаSQLЗапроса + " AND parentlink='" + _OWNER + "'"
		КонецЕслИ;
		
		СтрокаSQLЗапроса = СтрокаSQLЗапроса + ";";
		
		rs.Open(СтрокаSQLЗапроса, AdodbCnn, 0, 1);
		Попытка
			
			rs.MoveFirst();
			cIdx = rs.Fields("id").Value;
			
		Исключение
			
			rs.Close();
			ОписаниеОшибки = ОписаниеОшибки();
			Возврат 0;
			
		Конецпопытки;
		
		rs.Close();
		Возврат Число(Формат(cIdx, "ЧЦ=11; ЧГ="));
		
	Исключение
		
		Сообщить("Ошибка работы с внешней БД");
		Возврат -1;
		
	Конецпопытки;
	
КонецФункции	

&НаКлиенте
Функция ЭДИ_ЗаписатьСвойство(ЭДИ_СвойствоДляЗаписи) Экспорт;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Результат"	, Ложь);
	ВозвращаемоеЗначение.Вставить("Сообщение"	, "");
	ВозвращаемоеЗначение.Вставить("Содержимое"	, Неопределено);

	Попытка
		
		_OBJECT 	= ?(ЭДИ_СвойствоДляЗаписи.Объект	= Неопределено, "", ЗначениеВСтрокуВнутрСервер(ЭДИ_СвойствоДляЗаписи.Объект));
		_OWNER 		= ?(ЭДИ_СвойствоДляЗаписи.Владелец	= Неопределено, "", ЗначениеВСтрокуВнутрСервер(ЭДИ_СвойствоДляЗаписи.Владелец));
		_TYPE 		= ?(ЭДИ_СвойствоДляЗаписи.Тип		= Неопределено, "", СокрЛП(ЭДИ_СвойствоДляЗаписи.Тип));
		_ATTRIBUTES = ?(ЭДИ_СвойствоДляЗаписи.Атрибуты	= "", "", ЗначениеВСтрокуВнутрСервер(ЭДИ_СвойствоДляЗаписи.Атрибуты));
		
		ЭДИ_ДатаСвойства = ЭДИ_СвойствоДляЗаписи.Дата;
		Если Не ЗначениеЗаполнено(ЭДИ_ДатаСвойства) Тогда
			ЭДИ_ДатаСвойства = 0;
		Иначе
			ЭДИ_ДатаСвойства = Формат(ЭДИ_ДатаСвойства, "ДФ=yyyyMMdd");
		КонецЕсли;
		
		CheckRes = ЭДИ_ПроверитьЗапись(_OBJECT, _TYPE, _OWNER);
        Если CheckRes < 0 Тогда
			
			ВозвращаемоеЗначение.Сообщение = "Ошибка работы с базой данных";
			Возврат ВозвращаемоеЗначение;
			
		КонецЕслИ;
		
		СтрокаSQLЗапроса 	= "";
		AdodbCnn			= ЭДИ_ПараметрыРаботыВнешнейБД.AdodbCnn;
		Insmsg 				= "";
        Если CheckRes = 0 Тогда

            Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Атрибуты)= "ERASE" Тогда
                ЭДИ_СвойствоДляЗаписи.Атрибуты = ""
            КонецЕсли;

            Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс1) = "ERASE" Тогда
                ЭДИ_СвойствоДляЗаписи.Индекс1 = ""
            КонецЕсли;

            Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс2) = "ERASE" Тогда
                ЭДИ_СвойствоДляЗаписи.Индекс2 = ""
            КонецЕсли;

            Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс3) = "ERASE" Тогда
                ЭДИ_СвойствоДляЗаписи.Индекс3 = ""
            КонецЕсли;

            Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс4) = "ERASE" Тогда
                ЭДИ_СвойствоДляЗаписи.Индекс4 = ""
            КонецЕсли;

            Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс5) = "ERASE" Тогда
                ЭДИ_СвойствоДляЗаписи.Индекс5 = ""
            КонецЕсли;
			
            СтрокаSQLЗапроса = "INSERT INTO " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " (objectlink, parentlink, recordview, recdate, recorddata, recordattr, idxattr1, idxattr2, idxattr3, idxattr4, idxattr5, recordstate) " + 
                "VALUES('" + _OBJECT + "', '" + _OWNER + "', '" + _TYPE + 
                            "', " + ЭДИ_ДатаСвойства + ", '" + СокрЛП(ЭДИ_СвойствоДляЗаписи.Данные) + "', '" +_ATTRIBUTES + 
                            "', '" + ЭДИ_СвойствоДляЗаписи.Индекс1 + "', '" + ЭДИ_СвойствоДляЗаписи.Индекс2+ "', '" + ЭДИ_СвойствоДляЗаписи.Индекс3+ 
                            "', '" + ЭДИ_СвойствоДляЗаписи.Индекс4 + "', '" + ЭДИ_СвойствоДляЗаписи.Индекс5 + "', " + СокрЛП(ЭДИ_СвойствоДляЗаписи.Состояние) + ");";
            Insmsg = "Запись вставлена";
			
		Иначе
			
            СтрокаSQLЗапроса = "UPDATE " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " SET objectlink='" + _OBJECT + "', recordview='" + _TYPE + "', recorddata='" + СокрЛП(ЭДИ_СвойствоДляЗаписи.Данные)+ "'";

            Если _ATTRIBUTES<> "" Тогда
                Если _ATTRIBUTES = "ERASE" Тогда
                    СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", recordattr=''"
                Иначе
                    СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", recordattr='" + _ATTRIBUTES + "'"
                КонецЕсли;
            КонецЕсли;

            Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс1) <> "" Тогда
                Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс1) = "ERASE" Тогда
                    СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", idxattr1=''"
                Иначе
                    СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", idxattr1='" + СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс1)+ "'"
                КонецЕсли;
            КонецЕсли;

            Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс2) <> "" Тогда
                Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс2) = "ERASE" Тогда
                    СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", idxattr2=''"
                Иначе
                    СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", idxattr2='" + СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс2)+ "'"
                КонецЕсли;
            КонецЕсли;

            Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс3) <> "" Тогда
                Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс3) = "ERASE" Тогда
                    СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", idxattr3=''"
                Иначе
                    СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", idxattr3='" + СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс3)+ "'"
                КонецЕсли;
            КонецЕсли;

            Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс4) <> "" Тогда
                Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс4) = "ERASE" Тогда
                    СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", idxattr4=''"
                Иначе
                    СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", idxattr4='" + СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс4)+ "'"
                КонецЕсли;
            КонецЕсли;

            Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс5) <> "" Тогда
                Если СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс5) = "ERASE" Тогда
                    СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", idxattr5=''"
                Иначе
                    СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", idxattr5='" + СокрЛП(ЭДИ_СвойствоДляЗаписи.Индекс5)+ "'"
                КонецЕсли;
			КонецЕсли;
			
            СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", recdate=" + ЭДИ_ДатаСвойства;
            СтрокаSQLЗапроса = СтрокаSQLЗапроса + ", recordstate=" + СокрЛП(ЭДИ_СвойствоДляЗаписи.Состояние);
            СтрокаSQLЗапроса = СтрокаSQLЗапроса + " WHERE id=" + СокрЛП(CheckRes)+ ";";
            Insmsg = "Запись обновлена";
			
		КонецЕсли;
		
		Если AdodbCnn.State = 0 Тогда
			AdodbCnn.Open(ЭДИ_ПараметрыРаботыВнешнейБД.СтрокаПодключенияВнешнейБД);
		КонецЕсли;
		
        AdodbCnn.Execute(СтрокаSQLЗапроса);
		
		Если Insmsg = "Запись вставлена" тогда
			CheckRes = ЭДИ_ПроверитьЗапись(_OBJECT, _TYPE, _OWNER);
		КонецЕСЛИ;
		
		ВозвращаемоеЗначение.Вставить("Результат", Истина);
		ВозвращаемоеЗначение.Вставить("Сообщение", Insmsg);
		ВозвращаемоеЗначение.Вставить("ЗапросЗаписанногоСвойства", ЭДИ_ПолучитьЗаписьПоИндексу(CheckRes));
        Return ВозвращаемоеЗначение;
		
	Исключение
		
		ВозвращаемоеЗначение.Вставить("Результат", Ложь);
		ВозвращаемоеЗначение.Вставить("Сообщение", "Ошибка записи свойства");
		Инфо = ОписаниеОшибки();
        Возврат ВозвращаемоеЗначение;
		
	КонецПопытки;
	
КонецФункции	

&НаКлиенте
Функция  ЭДИ_УдалитьСвойство(ИндексЗаписи) Экспорт;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Результат", Ложь);
	ВозвращаемоеЗначение.Вставить("Сообщение", "");
	ВозвращаемоеЗначение.Вставить("Содержимое", Неопределено);
	
	Попытка
		
		AdodbCnn			= ЭДИ_ПараметрыРаботыВнешнейБД.AdodbCnn;
		СтрокаSQLЗапроса	= "DELETE FROM " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " WHERE id=" + СокрЛП(ИндексЗаписи);
		Если AdodbCnn.State = 0 Тогда
			AdodbCnn.Open(ЭДИ_ПараметрыРаботыВнешнейБД.СтрокаПодключенияВнешнейБД);
		КонецЕсли;
		
		AdodbCnn.Execute(СтрокаSQLЗапроса);
		ВозвращаемоеЗначение.Вставить("Результат", Истина);
		ВозвращаемоеЗначение.Вставить("Сообщение", "Запись удалена");
		
		Возврат ВозвращаемоеЗначение;
		
	Исключение
		
		ВозвращаемоеЗначение.Вставить("Результат", Ложь);
		ВозвращаемоеЗначение.Вставить("Сообщение", "Ошибка удаления записи");
		
		Возврат ВозвращаемоеЗначение;
		
	Конецпопытки;
	
КонецФункции

&НаКлиенте
Функция ЭДИ_ПолучитьСвойство(ЭДИ_Отбор, ИспользоватьПериодОтбора = Ложь) Экспорт;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Результат"	, Ложь);
	ВозвращаемоеЗначение.Вставить("Сообщение"	, "");
	ВозвращаемоеЗначение.Вставить("Содержимое"	, Неопределено);

	AdodbCnn	= ЭДИ_ПараметрыРаботыВнешнейБД.AdodbCnn;
	rs			= ЭДИ_ПараметрыРаботыВнешнейБД.rs;
	_OBJECT 	= ?(ЭДИ_Отбор.Объект 	= Неопределено, "", ЗначениеВСтрокуВнутрСервер(ЭДИ_Отбор.Объект));
	_OWNER 		= ?(ЭДИ_Отбор.Владелец 	= Неопределено, "", ЗначениеВСтрокуВнутрСервер(ЭДИ_Отбор.Владелец));
	_TYPE 		= ?(ЭДИ_Отбор.Тип 		= Неопределено, "", СокрЛП(ЭДИ_Отбор.Тип));

	ЭДИ_ДатаСвойства = ЭДИ_Отбор.Дата;
	Если Значениезаполнено(ЭДИ_ДатаСвойства)= Ложь тогда
		ЭДИ_ДатаСвойства = Неопределено
	КонецЕсли;
	
	Если ЭДИ_ДатаСвойства = Неопределено Тогда
		ЭДИ_ДатаСвойства = "0";
	Иначе
		ЭДИ_ДатаСвойства = Число(Формат(ЭДИ_ДатаСвойства,"ДФ=yyyyMMdd"));
		ЭДИ_ДатаСвойства  = СтрЗаменить(СокрЛП(ЭДИ_ДатаСвойства),Символы.НПП,"");
	КонецЕсли;
	
	Попытка
		
		Если AdodbCnn.State = 0 Тогда
			AdodbCnn.Open(ЭДИ_ПараметрыРаботыВнешнейБД.СтрокаПодключенияВнешнейБД);
		КонецЕсли;		
		
		СтрокаSQLЗапроса = "SELECT *  FROM " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД+ " WHERE recordview='" + _TYPE + "'";

        Если _OBJECT <> "" Тогда
            СтрокаSQLЗапроса = СтрокаSQLЗапроса + " AND objectlink='" + _OBJECT + "'"
        КонецЕсли;
        Если СокрЛП(ЭДИ_Отбор.Индекс1) <> "" Тогда
            СтрокаSQLЗапроса = СтрокаSQLЗапроса + " AND idxattr1='" + СокрЛП(ЭДИ_Отбор.Индекс1) + "'"
        КонецЕсли;
        Если СокрЛП(ЭДИ_Отбор.Индекс2) <> "" Тогда
            СтрокаSQLЗапроса = СтрокаSQLЗапроса + " AND idxattr2='" + СокрЛП(ЭДИ_Отбор.Индекс2) + "'"
        КонецЕсли;
        Если СокрЛП(ЭДИ_Отбор.Индекс3) <> "" Тогда
            СтрокаSQLЗапроса = СтрокаSQLЗапроса + " AND idxattr3='" + СокрЛП(ЭДИ_Отбор.Индекс3) + "'"
        КонецЕсли;
        Если СокрЛП(ЭДИ_Отбор.Индекс4) <> "" Тогда
            СтрокаSQLЗапроса = СтрокаSQLЗапроса + " AND idxattr4='" + СокрЛП(ЭДИ_Отбор.Индекс4) + "'"
        КонецЕсли;
        Если СокрЛП(ЭДИ_Отбор.Индекс5) <> "" Тогда
            СтрокаSQLЗапроса = СтрокаSQLЗапроса + " AND idxattr5='" + СокрЛП(ЭДИ_Отбор.Индекс5) + "'"
        КонецЕсли;
        Если _OWNER <> "" Тогда
            СтрокаSQLЗапроса = СтрокаSQLЗапроса + " AND parentlink='" +_OWNER + "'"
        КонецЕсли;
        Если ИспользоватьПериодОтбора  Тогда
            СтрокаSQLЗапроса = СтрокаSQLЗапроса + " AND recdate>=" + ЭДИ_ДатаСвойства + ""
        КонецЕсли;

        СтрокаSQLЗапроса = СтрокаSQLЗапроса + ";";
	
        rs.Open(СтрокаSQLЗапроса, AdodbCnn, 0, 1);
		
	Исключение
		
		ВозвращаемоеЗначение.Вставить("Результат", Ложь);
		ВозвращаемоеЗначение.Вставить("Сообщение", "Ошибка работы с внешней базой данных");
		
    КонецПопытки;

    Попытка
		
		rs.MoveFirst();
        CurrentRecord = ЭДИ_ПолучитьЗаписьИзНабора(rs);
		
		ВозвращаемоеЗначение.Вставить("Результат"	, Истина);
		ВозвращаемоеЗначение.Вставить("Содержимое"	, CurrentRecord);
		ВозвращаемоеЗначение.Вставить("Сообщение"	, "Идентификатор записи:" + СокрЛП(rs.Fields("id").Value));
		ВозвращаемоеЗначение.Вставить("ИндексЗаписи", rs.Fields("id").Value);
		
		rs.Close();
		
    Исключение
		
		Попытка
		    rs.Close()
		Исключение
		КонецПопытки;

		ВозвращаемоеЗначение.Вставить("Результат", Ложь);
		ВозвращаемоеЗначение.Вставить("Сообщение", "Нет записей с указанными параметрами отбора");
		
    КонецПопытки;

    Возврат ВозвращаемоеЗначение;
	
КонецФункции	

//Поиск строки СУБД по полям Тип, Объект и Владелей. 
//Индекс1-5 не обязательные поля поиска
&НаКлиенте
Функция ЭДИ_НайтиСвойство(ТипСвойства, ОбъектСвойства = Неопределено, ВладелецСвойства = Неопределено, ИндексыДляПоиска = Неопределено, ОграничитьПериодПоиска = Неопределено, ВыводитьПредупреждение = Ложь) Экспорт
	
	ОтборСвойства 			= ЭДИ_ПолучитьПустуюЗапись();
	ОтборСвойства.Тип 		= ТипСвойства;
	ОтборСвойства.Объект 	= ?(ОтборСвойства=Неопределено, "", ОбъектСвойства);
	ОтборСвойства.Владелец 	= ?(ОтборСвойства=Неопределено, "", ВладелецСвойства);
	Если ОтборСвойства <> Неопределено Тогда
		
		ОтборСвойства.Дата 		= ОграничитьПериодПоиска;
		ОграничитьПериодПоиска 	= Истина;
		
	Иначе
		ОграничитьПериодПоиска 	= Ложь;
	КонецЕсли;	
	
	Если ИндексыДляПоиска <> Неопределено Тогда
		
		Если ТипЗнч(ИндексыДляПоиска) = Тип("Структура") Тогда
			
			Для Каждого ИндексОтбора Из ИндексыДляПоиска Цикл
				
				Если Найти("Индекс1 Индекс2 Индекс3 Индекс4 Индекс5", ИндексОтбора.Ключ) > 0 Тогда
					ОтборСвойства.Вставить(ИндексОтбора.Ключ, СокрЛП(ИндексОтбора.Значение));
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ЗапросСвойства = ЭДИ_ПолучитьСвойство(ОтборСвойства, ОграничитьПериодПоиска);
	Если ЗапросСвойства.Результат = Ложь Тогда
		
		Если ВыводитьПредупреждение Тогда
			Сообщить(ЗапросСвойства.Сообщение);
		КонецЕсли;
		
		Возврат Неопределено;
		
	Иначе
		Возврат ЗапросСвойства.Содержимое;
	КонецЕСЛИ;
	
КонецФункции

//Возвращает СписокЗначений записей из базы данных
//
&НаКлиенте
Функция ЭДИ_ПолучитьСписокСвойств_массив(ЭДИ_Отбор, ЭДИ_ДатаНачала = Неопределено, ЭДИ_ДатаКонца = Неопределено, ЭДИ_БезДанных = 0, ЭДИ_ВсеСтатусы = 1, ЭДИ_ПоВхождениюТипа = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Результат"	, Ложь);
	ВозвращаемоеЗначение.Вставить("Сообщение"	, "");
	ВозвращаемоеЗначение.Вставить("Содержимое"	, Неопределено);
	
	Если ЭДИ_ВнешняяБДСуществует = Ложь тогда
		
		ВозвращаемоеЗначение.Результат 		= Ложь;
		ВозвращаемоеЗначение.Сообщение 		= СокрЛП("Внешняя база данных не подключена!");
		ВозвращаемоеЗначение.Содержимое 	= Неопределено;	
		
		Возврат ВозвращаемоеЗначение;
		
	КонецЕСлИ;	
	
	СписокЗаписейДляВозврата 	= Новый СписокЗначений;
	ЭДИ_ДатаНачала 				= ?(ЭДИ_ДатаНачала = Неопределено, 0, Формат(ЭДИ_ДатаНачала,"ДФ=yyyyMMdd"));
	ЭДИ_ДатаКонца 				= ?(ЭДИ_ДатаКонца = Неопределено, 0, Формат(ЭДИ_ДатаКонца,"ДФ=yyyyMMdd"));
	
	Попытка
		
		AdodbCnn			= ЭДИ_ПараметрыРаботыВнешнейБД.AdodbCnn;
		rs					= ЭДИ_ПараметрыРаботыВнешнейБД.rs;
		ЗапросДополнен 		= Ложь;
		СтрокаSQLЗапроса 	= "";
        Попытка
			
			Попытка
				
				Если AdodbCnn.State = 0 Тогда
					AdodbCnn.Open(ЭДИ_ПараметрыРаботыВнешнейБД.СтрокаПодключенияВнешнейБД);
				КонецЕсли;			
				
			Исключение
				
				ВозвращаемоеЗначение.Результат = Ложь;
				ВозвращаемоеЗначение.Сообщение = СокрЛП("Ошибка открытия подключения к базе данных! " + ОписаниеОшибки());
				ВозвращаемоеЗначение.Содержание = Неопределено;	
				
				Возврат ВозвращаемоеЗначение;
				
			Конецпопытки;
			
			СтрокаSQLЗапроса = "SELECT * FROM " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД;
            Если ЭДИ_БезДанных=1 Тогда
                СтрокаSQLЗапроса = "SELECT id, objectlink, parentlink, recordview, recdate, idxattr1, idxattr2, idxattr3, idxattr4, idxattr5, recordstate FROM " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД;
            ИначеЕсли ЭДИ_БезДанных = 2 Тогда
                СтрокаSQLЗапроса = "SELECT id, objectlink, parentlink, recordview, recdate, idxattr1, idxattr2, idxattr3, idxattr4, idxattr5, recordstate, recordattr FROM " + ЭДИ_ПараметрыРаботыВнешнейБД.ИмяТаблицыВнешнейБД;
			КонецЕслИ;
			
			_OBJECT = "";
			Для Каждого Стр из ЭДИ_Отбор.Объект Цикл
				_OBJECT = _OBJECT + ?(_OBJECT = "", "", ",") + "'"+Стр.значение+"'";
			КонецЦикла;
			Если _OBJECT <> "" Тогда
				_OBJECT = " IN(" + _OBJECT + ") ";
			Конецесли;
						
			_OWNER = "";
			Для Каждого Стр из ЭДИ_Отбор.Владелец Цикл
				_OWNER = _OWNER + ?(_OWNER = "", "", ",") + "'"+Стр.значение+"'";
			КонецЦикла;
			Если _OWNER <> "" Тогда
				_OWNER = " IN(" + _OWNER + ") ";
			Конецесли;

			_TYPE = "";
			Для Каждого Стр из ЭДИ_Отбор.Тип Цикл
				_TYPE = _TYPE + ?(_TYPE = "", "", ",") + "'"+Стр.значение+"'";
			КонецЦикла;
			Если _TYPE <> "" Тогда
				_TYPE = " IN(" + _TYPE + ") ";
			Конецесли;
			
			Если _OBJECT <> "" Или _OWNER <> "" Или _TYPE <> "" Или ЭДИ_ДатаНачала <> 0 Или ЭДИ_ДатаКонца <> 0
                Или ЭДИ_Отбор.Индекс1 <> "" Или ЭДИ_Отбор.Индекс2 <> "" Или ЭДИ_Отбор.Индекс3 <> "" Или ЭДИ_Отбор.Индекс4 <> "" Или ЭДИ_Отбор.Индекс5 <> "" Тогда
				
				СтрокаУсловияПоДате  = "";
                Если ЭДИ_ДатаНачала > 0 И ЭДИ_ДатаКонца = 0 Тогда
                    СтрокаУсловияПоДате = "recdate>=" + СокрЛП(ЭДИ_ДатаНачала);
                    ЗапросДополнен = Истина; 
				ИначеЕсли ЭДИ_ДатаНачала = 0 И ЭДИ_ДатаКонца > 0 Тогда
                    СтрокаУсловияПоДате = "recdate<=" + СокрЛП(ЭДИ_ДатаКонца);
                    ЗапросДополнен = Истина;
                ИначеЕсли ЭДИ_ДатаНачала > 0 И ЭДИ_ДатаКонца > 0 Тогда
                    СтрокаУсловияПоДате = "recdate BETWEEN " + СокрЛП(ЭДИ_ДатаНачала) + " AND " + СокрЛП(ЭДИ_ДатаКонца);
                    ЗапросДополнен = Истина;
                КонецЕсли;
				
				СтрокаSQLЗапроса = СтрокаSQLЗапроса + СтрокаУсловияПоДате;
				
				Если _OBJECT <> "" Тогда
					
					СтрокаSQLЗапроса 	= СтрокаSQLЗапроса + ?(ЗапросДополнен = Истина, " AND objectlink", " where objectlink") + _OBJECT;
					ЗапросДополнен 		= Истина;
					
				КонецЕсли;

				Если _OWNER<> "" Тогда
					
					СтрокаSQLЗапроса 	= СтрокаSQLЗапроса + ?(ЗапросДополнен = Истина, " AND parentlink", " where parentlink") + _OWNER;
					ЗапросДополнен 		= Истина;
					
				КонецЕсли;
				
				Если _TYPE<> "" Тогда
					
					СтрокаSQLЗапроса 	= СтрокаSQLЗапроса + ?(ЗапросДополнен = Истина, " AND recordview", " WHERE recordview") + _TYPE;
					ЗапросДополнен 		= Истина;
					
				КонецЕсли;
				
				Если ЭДИ_Отбор.Индекс1 <> "" Тогда
					
					СтрокаSQLЗапроса 	= СтрокаSQLЗапроса + ?(ЗапросДополнен = Истина, " AND idxattr1='", " WHERE idxattr1='") + ЭДИ_Отбор.Индекс1 + "'";
					ЗапросДополнен 		= Истина;
					
				КонецЕсли;
				
				Если ЭДИ_Отбор.Индекс2 <> "" Тогда
					
					СтрокаSQLЗапроса 	= СтрокаSQLЗапроса + ?(ЗапросДополнен = Истина, " AND idxattr2='", " WHERE idxattr2='") + ЭДИ_Отбор.Индекс2 + "'";
					ЗапросДополнен 		= Истина;
					
				КонецЕсли;
				
				Если ЭДИ_Отбор.Индекс3 <> "" Тогда
					
					СтрокаSQLЗапроса 	= СтрокаSQLЗапроса + ?(ЗапросДополнен = Истина, " AND idxattr3='", " WHERE idxattr3='") + ЭДИ_Отбор.Индекс3 + "'";
					ЗапросДополнен 		= Истина;
					
				КонецЕсли;
				
				Если ЭДИ_Отбор.Индекс4 <> "" Тогда
					
					СтрокаSQLЗапроса 	= СтрокаSQLЗапроса + ?(ЗапросДополнен = Истина, " AND idxattr4='", " WHERE idxattr4='") + ЭДИ_Отбор.Индекс4 + "'";
					ЗапросДополнен 		= Истина;
					
				КонецЕсли;
				
				Если ЭДИ_Отбор.Индекс5 <> "" Тогда
					
					СтрокаSQLЗапроса 	= СтрокаSQLЗапроса + ?(ЗапросДополнен = Истина, " AND idxattr5='", " WHERE idxattr5='") + ЭДИ_Отбор.Индекс5 + "'";
					ЗапросДополнен 		= Истина;
					
				КонецЕсли;
				
			КонецЕсли;	
			
			Если ЭДИ_ВсеСтатусы = 0 Тогда
				
				СтрокаSQLЗапроса 	= СтрокаSQLЗапроса + ?(ЗапросДополнен = Истина, " AND recordstate=", " WHERE recordstate=") + СокрЛП(ЭДИ_ВсеСтатусы);
				ЗапросДополнен 		= Истина;
				
			КонецЕсли;
			
			СтрокаSQLЗапроса = СтрокаSQLЗапроса + ";";
			
			Попытка
				
				rs.Open(СтрокаSQLЗапроса, AdodbCnn, 0, 1);
				Попытка
					
					rs.MoveFirst();
					Пока rs.EOF = False Цикл
						
						CurrentRecord = ЭДИ_ПолучитьЗаписьИзНабора(rs, ЭДИ_БезДанных);
						СписокЗаписейДляВозврата.Добавить(CurrentRecord);
						rs.MoveNext();
						
					КонецЦикла;	
					
					ВозвращаемоеЗначение.Результат = Истина;
					ВозвращаемоеЗначение.Сообщение = СокрЛП(СписокЗаписейДляВозврата.Количество());
		            ВозвращаемоеЗначение.Содержимое = СписокЗаписейДляВозврата;
					
					Попытка
						rs.Close();
					Исключение
					КонецПопытки;
					
				Исключение
					
					rs.Close();
					ВозвращаемоеЗначение.Результат = ложь;
					ВозвращаемоеЗначение.Сообщение = "Нет записей во внешней базе данных. " + ОписаниеОшибки();
					
				Конецпопытки;	
			Исключение
				
				ВозвращаемоеЗначение.Результат = ложь;
				ВозвращаемоеЗначение.Сообщение = "Ошибка получения набора записей из внешней базы данных. " + ОписаниеОшибки();
				
			КонецПопытки;
			
		Исключение
			
			ВозвращаемоеЗначение.Результат = ложь;
			ВозвращаемоеЗначение.Сообщение = "Ошибка составления запроса к базе данных. " + ОписаниеОшибки();
			
		Конецпопытки;	
	Исключение
		
		ВозвращаемоеЗначение.Результат = ложь;
		ВозвращаемоеЗначение.Сообщение = ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции	

&НаКлиенте
Функция ЭДИ_База_ПолучитьШаблонСтруктур() Экспорт;
	
	СтруктураОбъектов 	= Новый СписокЗначений;
	СтруктураВладельцев = Новый СписокЗначений;
	СтруктураТипов 		= Новый СписокЗначений;
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Индекс"	, 0);
	СтруктураЗаписи.Вставить("Объект"	, СтруктураОбъектов);
	СтруктураЗаписи.Вставить("Владелец"	, СтруктураВладельцев);
	СтруктураЗаписи.Вставить("Тип"		, СтруктураТипов);
	СтруктураЗаписи.Вставить("Дата"		, Неопределено);
	СтруктураЗаписи.Вставить("Состояние", 0);
	
	СтруктураЗаписи.Вставить("Индекс1", "");
	СтруктураЗаписи.Вставить("Индекс2", "");
	СтруктураЗаписи.Вставить("Индекс3", "");
	СтруктураЗаписи.Вставить("Индекс4", "");
	СтруктураЗаписи.Вставить("Индекс5", "");
	
	СтруктураЗаписи.Вставить("Данные"	, "");
	СтруктураЗаписи.Вставить("Атрибуты"	, "");

	Возврат СтруктураЗаписи;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ЗначениеВСтрокуВнутрСервер(Значение)
	
	Если Значение = Неопределено 
		Или Значение = "" Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	Возврат ЗначениеВСтрокуВнутр(Значение);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеИзСтрокиВнутрСервер(Строка)
	
	Если Строка = "" Тогда 
		Возврат ""; 
	КонецЕсли;
	
	Возврат ЗначениеИзСтрокиВнутр(Строка);
	
КонецФункции

#КонецОбласти