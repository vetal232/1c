&НаКлиенте
Перем МодульКриптографии;
&НаКлиенте
Перем ПутьКМодулюНаСервереLinux;
&НаКлиенте
Перем ТипМодуляКриптографии;

#Область ЭкспортныеМетоды

&НаКлиенте
Процедура Инициализировать() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	МодульКриптографии = "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider";
	ТипМодуляКриптографии = 75;
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		ПутьКМодулюНаСервереLinux = "c:\...";//если сервер под Linux, то путь
	Иначе
		ПутьКМодулюНаСервереLinux = "";//иначе пустая строка
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокСертификатов() Экспорт
	
	СписокСертификатов = Новый СписокЗначений;

	Попытка	
		
		МенеджерКриптоПРО 	= Новый МенеджерКриптографии(МодульКриптографии, ПутьКМодулюНаСервереLinux, ТипМодуляКриптографии);
		Хранилище 			= МенеджерКриптоПРО.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);	
		
		Для каждого Сертификат Из Хранилище.ПолучитьВсе() Цикл
			СписокСертификатов.Добавить(Сертификат.Отпечаток, Сертификат.Субъект.CN+ " ("+ Сертификат.Отпечаток+")");	
		КонецЦикла;
		
		СписокСертификатов.СортироватьПоПредставлению();
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Сообщить(НСтр("ru = 'Ошибка работы модуля криптографии:" + Символы.ПС + ТекстОшибки + ".'" ));
	КонецПопытки;
	
	Возврат СписокСертификатов;
	
КонецФункции

&НаКлиенте
Функция ПолучитьОпцииПодписания() Экспорт;
	
	СтруктураОпцийПодписания = Новый Структура;
	СтруктураОпцийПодписания.Вставить("МодульКриптографии", МодульКриптографии);
	СтруктураОпцийПодписания.Вставить("ПутьКМодулюНаСервереLinux", ПутьКМодулюНаСервереLinux);
	СтруктураОпцийПодписания.Вставить("ТипМодуляКриптографии", ТипМодуляКриптографии);
	СтруктураОпцийПодписания.Вставить("ТипПодписи", "p7s");
	СтруктураОпцийПодписания.Вставить("ПрефиксПодписи", "");
	СтруктураОпцийПодписания.Вставить("ОтпечатокСеритфиката", "");
	СтруктураОпцийПодписания.Вставить("ПарольККлючуСертификата", "");	

	Возврат СтруктураОпцийПодписания;
	
КонецФункции	

&НаКлиенте
Функция ПолучитьАрхивСПодписью(ДанныеФайла, ИмяФайла, СписокОпцийПодписания, УдалитьФайлыПослеПодписания = Истина, УдалитьАрхив = Истина) Экспорт;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Результат", Ложь);
	ВозвращаемоеЗначение.Вставить("Сообщение", "");
	ВозвращаемоеЗначение.Вставить("Содержимое", Неопределено);
	
	Попытка
		
		КаталогДляПодписания = КаталогВременныхФайлов();
		ПутьКФайлу = КаталогДляПодписания + ИмяФайла;
		ДанныеФайла.Записать(ПутьКФайлу);
		
	Исключение
		
		ВозвращаемоеЗначение.Вставить("Сообщение", ОписаниеОшибки());
		Возврат ВозвращаемоеЗначение;
		
	Конецпопытки;

	СписокПодписей = Новый СписокЗначений;
	
	Для Каждого ОпцииДляПодписания Из СписокОпцийПодписания Цикл
		
		ОпцииПодписания = ОпцииДляПодписания.Значение;
		ПутьКПодписи = КаталогДляПодписания + ОпцииПодписания.ПрефиксПодписи + Лев(ИмяФайла,СтрДлина(ИмяФайла)-3)+ОпцииПодписания.ТипПодписи; 
		РезультатПодписания = ЭДИ_ПодписатьФайл(ОпцииПодписания, ПутьКФайлу, ПутьКПодписи);
		
		Если  РезультатПодписания.Результат = Ложь тогда
			
			ВозвращаемоеЗначение.Вставить("Сообщение", РезультатПодписания.Сообщение);
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсЛИ;
		
		СписокПодписей.Добавить(РезультатПодписания.Содержимое);
		
	КонецЦикла;

	ИмяАрхива = "";
	
	Попытка 
		
		ИмяАрхива = ГенерацияUID(ИмяФайла, ложь) + ".zip";
		ФайлАрхива = Новый ЗаписьZipФайла(КаталогДляПодписания+ИмяАрхива, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
		ФайлАрхива.Добавить(ПутьКФайлу);
		
		для Каждого ФайлПодписи Из СписокПодписей Цикл
			ФайлАрхива.Добавить(ФайлПодписи.Значение);
		КонецЦикла;
		
		ФайлАрхива.Записать();
		ДанныеАрхива = Новый ДвоичныеДанные(КаталогДляПодписания+ИмяАрхива);//Base64Строка()
		
		ВозвращаемоеЗначение.Вставить("Результат", истина);
		ВозвращаемоеЗначение.Вставить("Содержимое", ДанныеАрхива);
		
	Исключение
		
		ВозвращаемоеЗначение.Вставить("Результат", Ложь);
		ВозвращаемоеЗначение.Вставить("Сообщение", ОписаниеОшибки());
		
	Конецпопытки;
	
	Попытка
		
		Если УдалитьФайлыПослеПодписания тогда
			
			ФайлНаДиске = Новый Файл(ПутьКФайлу);
			
			Если ФайлНаДиске.Существует() Тогда
				УдалитьФайлы(ПутьКФайлу);
			КонецЕсли;
			
			Для Каждого ФайлПодписи Из СписокПодписей Цикл
				
				ФайлНаДиске = Новый Файл(ФайлПодписи.Значение);
				
				Если ФайлНаДиске.Существует() Тогда
					УдалитьФайлы(ФайлПодписи.Значение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсЛИ;
		
		Если УдалитьАрхив тогда	
			
			ФайлНаДиске = Новый Файл(КаталогДляПодписания+ИмяАрхива);
			
			Если ФайлНаДиске.Существует() Тогда
				УдалитьФайлы(КаталогДляПодписания+ИмяАрхива);
			КонецЕсли;
			
		КонецЕсЛИ;
		
	Исключение
	Конецпопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции	

&НаКлиенте
Функция ВыборСертификатаИзЛичногоХранилища() Экспорт 
	
	СертификатПодписи = Неопределено;
	
	МенеджерКриптоПРО = Новый МенеджерКриптографии(МодульКриптографии,ПутьКМодулюНаСервереLinux,ТипМодуляКриптографии);
	Хранилище = МенеджерКриптоПРО.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);	
	
	Список = Новый СписокЗначений;
	
	Для каждого Сертификат Из Хранилище.ПолучитьВсе() Цикл
		Список.Добавить(Сертификат.Отпечаток, Сертификат.Субъект.CN+ " ("+ Сертификат.Отпечаток+")");	
	КонецЦикла;
	
	Список.СортироватьПоПредставлению();
	Возврат Список;
	
КонецФункции

//эксп процедуры
#КонецОбласти

#Область СлужебныеМетоды

&НаКлиенте
Функция ГенерацияUID(КодируемаяСтрока, ФорматированныйUID = Истина)
	
	scrptCtrl=новый COMОбъект("MSScriptControl.ScriptControl");
	scrptCtrl.language="jscript";
	scrptCtrl.addcode("
	|function GetMilliseconds()
	|{
	|d = new Date();
	|return(d.getHours()*3600000+d.getMinutes()*60000+d.getSeconds()*1000+d.getMilliseconds());
	|}
	|");
	_getPerformanceCounter = scrptCtrl.run("GetMilliseconds");
	Rnd = новый COMОбъект("System.Random");
	
	СтрОбъекта = СокрЛП(_getPerformanceCounter) + СокрЛП(Rnd.Next()) + КодируемаяСтрока + СокрЛП(ТекущаяДата());
	
	Хеш="";
	
	Попытка 
		
		ScrptCtrl = новый COMОбъект("MSScriptControl.ScriptControl");
		ScrptCtrl.Language = "JScript";
		ScrptCtrl.AddCode("
		|var hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */
		|var b64pad  = """"; /* base-64 pad character. ""="" for strict RFC compliance   */
		|var chrsz   = 8;  /* bits per input character. 8 - ASCII; 16 - Unicode      */
		|function hex_md5(s){ return binl2hex(core_md5(str2binl(s), s.length * chrsz));}
		|function b64_md5(s){ return binl2b64(core_md5(str2binl(s), s.length * chrsz));}
		|function str_md5(s){ return binl2str(core_md5(str2binl(s), s.length * chrsz));}
		|function hex_hmac_md5(key, data) { return binl2hex(core_hmac_md5(key, data)); }
		|function b64_hmac_md5(key, data) { return binl2b64(core_hmac_md5(key, data)); }
		|function str_hmac_md5(key, data) { return binl2str(core_hmac_md5(key, data)); }
		|function md5_vm_test()
		|{
		|  return hex_md5(""abc"") == ""900150983cd24fb0d6963f7d28e17f72"";
		|}
		|function core_md5(x, len)
		|{
		|  x[len >> 5] |= 0x80 << ((len) % 32);
		|  x[(((len + 64) >>> 9) << 4) + 14] = len;
		|
		|  var a =  1732584193;
		|  var b = -271733879;
		|  var c = -1732584194;
		|  var d =  271733878;
		|
		|  for(var i = 0; i < x.length; i += 16)
		|  {
		|    var olda = a;
		|    var oldb = b;
		|    var oldc = c;
		|    var oldd = d;
		|
		|    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
		|    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
		|    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
		|    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
		|    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
		|    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
		|    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
		|    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
		|    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
		|    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
		|    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
		|    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
		|    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
		|    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
		|    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
		|    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);
		|
		|    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
		|    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
		|    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
		|    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
		|    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
		|    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
		|    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
		|    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
		|    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
		|    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
		|    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
		|    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
		|    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
		|    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
		|    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
		|    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);
		|
		|    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
		|    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
		|    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
		|    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
		|    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
		|    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
		|    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
		|    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
		|    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
		|    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
		|    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
		|    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
		|    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
		|    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
		|    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
		|    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);
		|
		|    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
		|    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
		|    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
		|    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
		|    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
		|    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
		|    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
		|    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
		|    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
		|    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
		|    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
		|    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
		|    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
		|    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
		|    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
		|    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);
		|
		|    a = safe_add(a, olda);
		|    b = safe_add(b, oldb);
		|    c = safe_add(c, oldc);
		|    d = safe_add(d, oldd);
		|  }
		|  return Array(a, b, c, d);
		|
		|}
		|
		|function md5_cmn(q, a, b, x, s, t)
		|{
		|  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
		|}
		|function md5_ff(a, b, c, d, x, s, t)
		|{
		|  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
		|}
		|function md5_gg(a, b, c, d, x, s, t)
		|{
		|  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
		|}
		|function md5_hh(a, b, c, d, x, s, t)
		|{
		|  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
		|}
		|function md5_ii(a, b, c, d, x, s, t)
		|{
		|  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
		|}
		|
		|function core_hmac_md5(key, data)
		|{
		|  var bkey = str2binl(key);
		|  if(bkey.length > 16) bkey = core_md5(bkey, key.length * chrsz);
		|
		|  var ipad = Array(16), opad = Array(16);
		|  for(var i = 0; i < 16; i++)
		|  {
		|    ipad[i] = bkey[i] ^ 0x36363636;
		|    opad[i] = bkey[i] ^ 0x5C5C5C5C;
		|  }
		|
		|  var hash = core_md5(ipad.concat(str2binl(data)), 512 + data.length * chrsz);
		|  return core_md5(opad.concat(hash), 512 + 128);
		|}
		|
		|function safe_add(x, y)
		|{
		|  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
		|  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		|  return (msw << 16) | (lsw & 0xFFFF);
		|}
		|
		|/*
		| * Bitwise rotate a 32-bit number to the left.
		| */
		|function bit_rol(num, cnt)
		|{
		|  return (num << cnt) | (num >>> (32 - cnt));
		|}
		|
		|/*
		| * Convert a string to an array of little-endian words
		| * If chrsz is ASCII, characters >255 have their hi-byte silently ignored.
		| */
		|function str2binl(str)
		|{
		|  var bin = Array();
		|  var mask = (1 << chrsz) - 1;
		|  for(var i = 0; i < str.length * chrsz; i += chrsz)
		|    bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (i%32);
		|  return bin;
		|}
		|
		|function binl2str(bin)
		|{
		|  var str = """";
		|  var mask = (1 << chrsz) - 1;
		|  for(var i = 0; i < bin.length * 32; i += chrsz)
		|    str += String.fromCharCode((bin[i>>5] >>> (i % 32)) & mask);
		|  return str;
		|}
		|
		|function binl2hex(binarray)
		|{
		|  var hex_tab = hexcase ? ""0123456789ABCDEF"" : ""0123456789abcdef"";
		|  var str = """";
		|  for(var i = 0; i < binarray.length * 4; i++)
		|  {
		|    str += hex_tab.charAt((binarray[i>>2] >> ((i%4)*8+4)) & 0xF) +
		|           hex_tab.charAt((binarray[i>>2] >> ((i%4)*8  )) & 0xF);
		|  }
		|  return str;
		|}
		|
		|function binl2b64(binarray)
		|{
		|  var tab = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"";
		|  var str = """";
		|  for(var i = 0; i < binarray.length * 4; i += 3)
		|  {
		|    var triplet = (((binarray[i   >> 2] >> 8 * ( i   %4)) & 0xFF) << 16)
		|                | (((binarray[i+1 >> 2] >> 8 * ((i+1)%4)) & 0xFF) << 8 )
		|                |  ((binarray[i+2 >> 2] >> 8 * ((i+2)%4)) & 0xFF);
		|    for(var j = 0; j < 4; j++)
		|    {
		|      if(i * 8 + j * 6 > binarray.length * 32) str += b64pad;
		|      else str += tab.charAt((triplet >> 6*(3-j)) & 0x3F);
		|    }
		|  }
		|  return str;
		|}
		|");
		
		Хэш = ScrptCtrl.Run("hex_md5", СтрОбъекта);
		
		Если ФорматированныйUID тогда
			СтрУИД =  Лев(Хэш, 8) + "-" + Сред(Хэш, 9,4) + "-" + Сред(Хэш, 13,4) + "-" + Сред(Хэш, 17,4) + "-" + Сред(Хэш, 21);
		Иначе
			СтрУИД = СокрЛП(Хэш);
		КонецЕслИ;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ScrptCtrl = "";
	Возврат СтрУИД;
	
КонецФункции // MD5()

&НаКлиенте
Функция ЭДИ_ПодписатьФайл(ОпцииПодписания, ПутьКФайлу, ПутьКПодписи = Неопределено)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Результат", Ложь);
	ВозвращаемоеЗначение.Вставить("Сообщение", "");
	ВозвращаемоеЗначение.Вставить("Содержимое", Неопределено);
	
	Если ПутьКПодписи = Неопределено Тогда
		ПутьКПодписи = Лев(ПутьКФайлу,СтрДлина(ПутьКФайлу)-3)+ОпцииПодписания.ТипПодписи;
	КонецЕсли; 
	
	МенеджерКриптоПРО = Новый МенеджерКриптографии(ОпцииПодписания.МодульКриптографии,ОпцииПодписания.ПутьКМодулюНаСервереLinux, ОпцииПодписания.ТипМодуляКриптографии);	
	МенеджерКриптоПРО.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	МенеджерКриптоПРО.ПарольДоступаКЗакрытомуКлючу = ОпцииПодписания.ПарольККлючуСертификата;	
	ДвоичныеДанныеПодписи = МенеджерКриптоПРО.Подписать(ПутьКФайлу,МенеджерКриптоПРО.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты).НайтиПоОтпечатку(Base64Значение(ОпцииПодписания.ОтпечатокСеритфиката)));
	
	Попытка
		
		Если ОпцииПодписания.ТипПодписи = "p7s" Тогда
			
			ДвоичныеДанныеПодписи.Записать(ПутьКПодписи);
			ВозвращаемоеЗначение.Вставить("Результат", Истина);
			ВозвращаемоеЗначение.Вставить("Содержимое", ПутьКПодписи);
			
		ИначеЕсли ОпцииПодписания.ТипПодписи  = "BIN" Тогда
			
			ТекстовыйДокумент = Новый ЗаписьТекста(ПутьКПодписи,"UTF-8");
			ТекстовыйДокумент.Записать(Base64Строка(ДвоичныеДанныеПодписи));
			ТекстовыйДокумент.Закрыть();
			ВозвращаемоеЗначение.Вставить("Результат", Истина);
			ВозвращаемоеЗначение.Вставить("Содержимое", ПутьКПодписи);
			
		Иначе
			
			ВозвращаемоеЗначение.Вставить("Результат", Истина);
			ВозвращаемоеЗначение.Вставить("Сообщение", "Неправильно задан тип подписи.");
			
		КонецЕсли;
		
	Исключение
		
		ВозвращаемоеЗначение.Вставить("Результат", ложь);
		ВозвращаемоеЗначение.Вставить("Сообщение", описаниеошибки());
		
	Конецпопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти