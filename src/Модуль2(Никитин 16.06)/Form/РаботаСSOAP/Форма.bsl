
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтруктураВозврата = Новый Структура("Результат, ТекстXML, СообщениеОшибки", 1, "", "");
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

&НаКлиенте
Функция Инициализировать(Знач АдресSOAP, Знач ЛогинSOAP, Знач ПарольSOAP, 
							Знач ПроксиИспользовать, Знач СерверПрокси, Знач ПортПрокси,
									Знач ЛогинПрокси, Знач ПарольПрокси) Экспорт

	Если ПустаяСтрока(АдресSOAP) Тогда
		
		СтруктураВозврата.Результат = 0;
		СтруктураВозврата.СообщениеОшибки = НСтр("ru = 'Не указан адрес подключения.'");
		Возврат СтруктураВозврата;
		
	ИначеЕсли ПустаяСтрока(ЛогинSOAP) 
		Или ПустаяСтрока(ПарольSOAP) Тогда
		
		СтруктураВозврата.Результат = 0;
		СтруктураВозврата.СообщениеОшибки = НСтр("ru = 'Ошибка авторизации.'");
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Адрес 				= АдресSOAP;
	Логин 				= ЛогинSOAP;
	Пароль 				= ПарольSOAP;
	ИспользоватьПрокси 	= ИспользоватьПрокси;
	ПроксиСервер 		= СерверПрокси;
	ПроксиПорт 			= ПортПрокси;
	ПроксиЛогин 		= ЛогинПрокси;
	ПроксиПароль 		= ПарольПрокси;
	
	Попытка
		ВыполнитьМетодRelationships();		
	Исключение
		СтруктураВозврата.СообщениеОшибки = НСтр("ru = 'Ошибка обращения к Web-сервису.'");
	КонецПопытки;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Функция ListMBex(Знач DocumentType, Знач PartnerILN = "", Знач DateFrom = Неопределено, 
					Знач DateTo = Неопределено, Знач ItemFrom = 1, Знач ItemTo = 4000) Экспорт
	
	Если ПустаяСтрока(DocumentType) Тогда
		
		СтруктураВозврата.Результат = 0;
		СтруктураВозврата.СообщениеОшибки = НСтр("ru = 'Не указан вид документа для получения.'");
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Если DateFrom = Неопределено Тогда
		DateFrom = ДобавитьМесяц(ТекущаяДата(), -2);
	КонецЕсли;
	
	Если DateTo = Неопределено Тогда
		DateTo = ДобавитьМесяц(ТекущаяДата(), 1);
	КонецЕсли;
	
	ВыполнитьМетодListMBex(DocumentType, PartnerILN, DateFrom, DateTo, Формат(ItemFrom, "ЧГ="), Формат(ItemTo, "ЧГ="));
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Функция ReceiveBinary(Знач PartnerILN, Знач DocumentType, Знач TrackingID) Экспорт
	
	Если ПустаяСтрока(PartnerILN)
		Или ПустаяСтрока(DocumentType)
		Или ПустаяСтрока(TrackingID) Тогда
		
		СтруктураВозврата.Результат = 0;
		СтруктураВозврата.СообщениеОшибки = НСтр("ru = 'Не корректно заполнены параметры получения документа.'");
		Возврат СтруктураВозврата;
		
	КонецЕсли;	
	
	ВыполнитьМетодReceiveBinary(PartnerILN, DocumentType, TrackingID);
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Функция SendBinary(Знач PartnerILN, Знач DocumentType, Знач FileName, Знач DataBase64) Экспорт
	
	Если ПустаяСтрока(PartnerILN)
		Или ПустаяСтрока(DocumentType)
		Или ПустаяСтрока(FileName)
		Или ПустаяСтрока(DataBase64) Тогда
		
		СтруктураВозврата.Результат = 0;
		СтруктураВозврата.СообщениеОшибки = НСтр("ru = 'Не корректно заполнены параметры отправки документа.'");
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	ВыполнитьМетодSendBinary(PartnerILN, DocumentType, FileName, DataBase64);
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Функция ChangeDocumentStatus(Знач TrackingID) Экспорт
	
	ВыполнитьМетодChangeDocumentStatus(TrackingID);
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Функция OrganizationInfo(Знач ИНН = "") Экспорт
	
	ВыполнитьМетодOrganizationInfo(ИНН);
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Функция Relationships() Экспорт
	
	ВыполнитьМетодRelationships();
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьWSПрокси()
	
	Если Прав(Адрес, 5) <> "?wsdl" Тогда
		Адрес = Адрес + "?wsdl";
	КонецЕсли;
	
	Если ИспользоватьПрокси Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси;
	    ИнтернетПрокси.Установить("https", ПроксиСервер, ПроксиПорт, ПроксиЛогин, ПроксиПароль);
	    ИнтернетПрокси.Установить("http", ПроксиСервер, ПроксиПорт, ПроксиЛогин, ПроксиПароль);
		
	Иначе
		ИнтернетПрокси = Неопределено;
	КонецЕсли;
	
	WSОпределение = Новый WSОпределения(Адрес, , , ИнтернетПрокси);
	Возврат Новый WSПрокси(WSОпределение, "urn:wsedi", "EDIWebService", "EDIWebServicePort");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуруВозвратаИзОтвета(Ответ, ТекстОшибки)
	
	СтруктураВозврата.ТекстXML 			= Ответ.cnt;
	СтруктураВозврата.Результат 		= ?(Число(Ответ.res) > 0, Ложь, Истина);
	СтруктураВозврата.СообщениеОшибки 	= ?(Число(Ответ.res) > 0, ТекстОшибки, "");
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьМетодRelationships()

	Прокси 		= ПолучитьWSПрокси();
	ТекстОшибки = НСтр("ru = 'Ошибка соединения с платформой.'");
	Попытка
		
		Ответ = Прокси.relationships(Логин, Пароль, 1000);
		ЗаполнитьСтруктуруВозвратаИзОтвета(Ответ, ТекстОшибки);
		
	Исключение
		
		СтруктураВозврата.Результат 		= Ложь;
		СтруктураВозврата.СообщениеОшибки 	= ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьМетодListMBex(DocumentType, PartnerILN, DateFrom, DateTo, ItemFrom, ItemTo)
	
	Прокси 	= ПолучитьWSПрокси();
	Попытка
		
		Ответ 	= Прокси.listMBEx(Логин, Пароль, PartnerILN, DocumentType, "", "XML", "P",
									Формат(DateFrom,"ДФ=yyyy-MM-dd; ДП=0000-00-00"),
									Формат(DateTo,"ДФ=yyyy-MM-dd; ДП=0000-00-00"),
									ItemFrom, ItemTo, "N", 3000);
		
		ЗаполнитьСтруктуруВозвратаИзОтвета(Ответ, НСтр("ru = 'Ошибка получения списка документов с платформы.'"));
	
	Исключение
		
		СтруктураВозврата.Результат 		= Ложь;
		СтруктураВозврата.СообщениеОшибки 	= НСтр("ru = 'Ошибка соединения с платформой.'");
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьМетодReceiveBinary(PartnerILN, DocumentType, TrackingID)
	
	Прокси = ПолучитьWSПрокси();
	Попытка
		
		Ответ = Прокси.receiveBinary(Логин, Пароль, PartnerILN, DocumentType, TrackingID);
		
		Если Ответ <> Неопределено Тогда
			
			Структура = Новый Структура;
			Структура.Вставить("Name", Ответ.fileName);
			Структура.Вставить("Data", Ответ.fileData);
			
		КонецЕсли;
		
		СтруктураВозврата.ТекстXML 			= Структура;
		СтруктураВозврата.Результат 		= ?(Число(Ответ.res) > 0, 0, 1);
		СтруктураВозврата.СообщениеОшибки 	= ?(Число(Ответ.res) > 0, НСтр("ru = 'Ошибка получения документа с платформы.'"), "");
		
	Исключение
		
		СтруктураВозврата.Результат 		= Ложь;
		СтруктураВозврата.СообщениеОшибки 	= НСтр("ru = 'Ошибка соединения с платформой.'");
		
	КонецПопытки;		

КонецПроцедуры

&НаСервере
Процедура ВыполнитьМетодSendBinary(PartnerILN, DocumentType, FileName, DataBase64)
	
	Прокси = ПолучитьWSПрокси();
	Попытка
		
		Ответ = Прокси.sendBinary(Логин, Пароль, PartnerILN, DocumentType, FileName, DataBase64);
		ЗаполнитьСтруктуруВозвратаИзОтвета(Ответ, НСтр("ru = 'Ошибка отправки документа на платформу.'"));
		
	Исключение
		
		СтруктураВозврата.Результат 		= Ложь;
		СтруктураВозврата.СообщениеОшибки 	= НСтр("ru = 'Ошибка соединения с платформой.'");
		
	КонецПопытки;		
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьМетодChangeDocumentStatus(TrackingID)
	
	Прокси = ПолучитьWSПрокси();
	Попытка
		
		Ответ = Прокси.changeDocumentStatus(Логин, Пароль, TrackingID, "R");
		ЗаполнитьСтруктуруВозвратаИзОтвета(Ответ, НСтр("ru = 'Ошибка чтения документа на платформы.'"));
		
	Исключение
		
		СтруктураВозврата.Результат 		= Ложь;
		СтруктураВозврата.СообщениеОшибки 	= НСтр("ru = 'Ошибка соединения с платформой.'");
		
	КонецПопытки;
	
КонецПроцедуры 

&НаСервере
Процедура ВыполнитьМетодOrganizationInfo(ИНН)
	
	Прокси = ПолучитьWSПрокси();
	Попытка
		
		Ответ = Прокси.organizationInfo(Логин, Пароль, ИНН, "", "", "");
		ЗаполнитьСтруктуруВозвратаИзОтвета(Ответ, НСтр("ru = 'Ошибка получения ИНН с платформы.'"));
		
	Исключение
		
		СтруктураВозврата.Результат 		= Ложь;
		СтруктураВозврата.СообщениеОшибки 	= НСтр("ru = 'Ошибка соединения с платформой.'");
		
	КонецПопытки;				
	
КонецПроцедуры

#КонецОбласти
