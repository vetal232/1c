&НаКлиенте
Перем РаботаСSOAP;
&НаКлиенте
Перем РаботаСВнешнейБД;
&НаКлиенте
Перем РаботаСXML Экспорт;
&НаКлиенте
Перем РаботаСРасширениями Экспорт;
&НаКлиенте
Перем РаботаСПодписанием Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры.СтруктураНастроек);
	
	ПервыйЗапуск = Параметры.ПервыйЗапуск;
	Если ПервыйЗапуск Тогда
				
		ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
		СоздатьОписанияСтраницИЭтапов();
		ОбновитьИндикатор(ЭтаФорма);
		
		ЗаголовокТекущейСтраницы = ЗаголовокСтраницы(ЭтаФорма);
		
		Объект.эдиТекущийПрофиль = "ПоУмолчанию";
		
	Иначе
		ОтрисоватьИнтерфейсДокументов();
	КонецЕсли;
	
	ЗаполнитьСпискиВыбораЗначений();
	ЗаполнитьПустыеРеквизиты();
															
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ПодвалФормы.Видимость 								= ПервыйЗапуск;
	Элементы.ГруппаШапка.Видимость 								= Не ПервыйЗапуск;
	Элементы.ПанельНастроек.Видимость 							= Не ПервыйЗапуск;
	Элементы.ГруппаНавигация.Видимость 							= ПервыйЗапуск;
	Элементы.ГруппаПоследняяСтраница.Видимость 					= ПервыйЗапуск;	
	Элементы.ГруппаСтраницы.ОтображениеСтраниц 					= ?(ПервыйЗапуск, ОтображениеСтраницФормы.Нет, ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально);
	Элементы.ГруппаПерваяСтраницаТекст.Видимость 				= ПервыйЗапуск;
	Элементы.ГруппаНастройкаБДИнформация.Видимость 				= ПервыйЗапуск;
	Элементы.ГруппаСопоставлениеПартнеров.Видимость 			= ПервыйЗапуск;
	Элементы.эдиВыполнятьПопыткуПроведения.Видимость 			= Не ПервыйЗапуск;
	Элементы.ОткрытьСопоставлениеПартнеров.Видимость 			= Объект.эдиГЛНПартнераХранение = "ВоВнешнейБД"
																	И Не ПервыйЗапуск;
	Элементы.ОткрытьСопоставлениеТочекДоставки.Видимость 		= Объект.эдиГЛНТочкиДоставкиХранение = "ВоВнешнейБД"
																	И Не ПервыйЗапуск;
	Элементы.ОткрытьСопоставлениеОрганизаций.Видимость 			= Объект.эдиГЛНОрганизацииХранение = "ВоВнешнейБД"
																	И Не ПервыйЗапуск;
	Элементы.ОткрытьСопоставлениеНоменклатуры.Видимость 		= Объект.эдиСпособПоискаНоменклатуры = "ВоВнешнейБД"
																	И Не ПервыйЗапуск;
	Элементы.ЗакрытьСопоставлениеПартнеров.Видимость 			= Не ПервыйЗапуск;
	Элементы.ГруппаПерваяСтраницаИнформация.Видимость 			= ПервыйЗапуск;
	Элементы.ГруппаХранениеДанных.ОтображатьЗаголовок 			= Не ПервыйЗапуск;
	Элементы.ЗакрытьСопоставлениеТочекДоставки.Видимость 		= Не ПервыйЗапуск;	
	Элементы.ГруппаСопоставлениеВторичныхДанных.Видимость 		= ПервыйЗапуск;
	Элементы.ГруппаНастройкиПодключенияИнформация.Видимость 	= ПервыйЗапуск;
	Элементы.ГруппаНастройкаСправочниковИнформация.Видимость 	= ПервыйЗапуск;
	Элементы.ГруппаЗаголовокОбщихНастроек.ОтображатьЗаголовок 	= Не ПервыйЗапуск;
	Элементы.ГруппаПараметрыКлассификаторов.ОтображатьЗаголовок = Не ПервыйЗапуск;
	
	Элементы.эдиГЛНПартнераИмяРеквизита.Видимость 		= Объект.эдиГЛНПартнераХранение = "ВРеквизите";
	Элементы.эдиГЛНОрганизацииИмяРеквизита.Видимость 	= Объект.эдиГЛНОрганизацииХранение = "ВРеквизите";
	Элементы.эдиГЛНТочкиДоставкиИмяРеквизита.Видимость 	= Объект.эдиГЛНТочкиДоставкиХранение = "ВРеквизите";
	Элементы.эдиЗапросПоискаНоменклатуры.Видимость 		= Объект.эдиСпособПоискаНоменклатуры = "ПоПроизвольномуЗапросу";
	Элементы.эдиРегистрСведенийДляПоиска.Видимость 		= Объект.эдиСпособПоискаНоменклатуры = "ПоРегиструСведений";
	Элементы.эдиКодНоменклатурыИмяРеквизита.Видимость 	= Объект.эдиСпособПоискаНоменклатуры = "ПоРегиструСведений"
															Или Объект.эдиСпособПоискаНоменклатуры = "ПоРеквизиту";
	
	Элементы.ТаблицаДоступныхРеляцийСохранитьСопоставлениеПартнеров.Видимость = Не ПервыйЗапуск;
	
	Элементы.ГруппаПодписант.Видимость 				= Объект.эдиИспользоватьПодписание;
	Элементы.ГруппаПараметрыСертификата.Видимость 	= Объект.эдиИспользоватьПодписание;
	Элементы.ГруппаНастройкаДокумента.Видимость 	= Ложь;
	
	РаботаСSOAP 		= ЭтаФорма.ВладелецФормы.РаботаСSOAP;
	РаботаСВнешнейБД 	= ЭтаФорма.ВладелецФормы.РаботаСВнешнейБД;	
	РаботаСXML 			= ЭтаФорма.ВладелецФормы.РаботаСXML;
	РаботаСРасширениями = ЭтаФорма.ВладелецФормы.РаботаСРасширениями;
	РаботаСПодписанием 	= ЭтаФорма.ВладелецФормы.РаботаСПодписанием;
	
	Если Не ПервыйЗапуск Тогда
		
		ЗаполнитьСписокПрофилей();
		ПерезаполнитьТаблицуРасширений();
		
		Если Объект.эдиГЛНПартнераХранение = "ВоВнешнейБД" Тогда
			
			Попытка
				
				ОтветПлатформы = РаботаСSOAP.Relationships();
				ЗаполнитьДоступныхПартнеров(ОтветПлатформы);
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Если Объект.эдиГЛНОрганизацииХранение = "ВоВнешнейБД" Тогда
			ДобавитьСтрокиСопоставлений("Организация");
		КонецЕсли;
		
		Если Объект.эдиГЛНТочкиДоставкиХранение = "ВоВнешнейБД" Тогда
			ДобавитьСтрокиСопоставлений("ТочкаДоставки");
		КонецЕсли;
		
		Если Объект.эдиСпособПоискаНоменклатуры = "ВоВнешнейБД" Тогда
			ДобавитьСтрокиСопоставлений("Номенклатура");
		КонецЕсли;
		
		ДействияРасширений = РаботаСРасширениями.ПолучитьТекстМетодов("ИзменитьФормуНастроек", Объект.эдиСписокПодключенныхРасширений);
		Если Не ПустаяСтрока(ДействияРасширений) Тогда
			ВыполнитьДействиеНаСервере(ДействияРасширений);
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
	Модифицированность = ПервыйЗапуск;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ 					= Истина;
		СтандартнаяОбработка 	= Ложь;
		Оповещение 				= Новый ОписаниеОповещения("ОтветСохранениеНастроек", ЭтотОбъект, Новый Структура);
		
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Настройки были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовФормы

&НаКлиенте
Процедура ПоказыватьПарольПриИзменении(Элемент)
	
	Элементы.эдиПароль.РежимПароля = Не ПоказыватьПароль;
	
КонецПроцедуры

&НаКлиенте
Процедура эдиТипСУБДПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура эдиКаталогБДПриИзменении(Элемент)
	
	Объект.эдиПутьВключаетБД = Прав(Объект.эдиКаталогБД, 3) = ".db"; 
	Если Не Объект.эдиПутьВключаетБД Тогда
		Объект.эдиКаталогБД = ДополнитьПутьСправа(Объект.эдиКаталогБД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура эдиКаталогБДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить("СоздатьНовую"		, "Создать новую");
	СписокКнопок.Добавить("ВыбратьСуществующую"	, "Выбрать существующую");
	СписокКнопок.Добавить("Отмена"				, "Отмена");
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьХранениеДанных", ЭтотОбъект, Новый Структура);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Создать новую базу для хранения данных или выбрать существующую?'"), СписокКнопок, , , НСтр("ru = 'Выберите действие'"));
	
КонецПроцедуры

&НаКлиенте
Процедура эдиТекущийПрофильПриИзменении(Элемент)
		
	ЗапонитьНастройкиИзПрофиля();
	
КонецПроцедуры

&НаКлиенте
Процедура эдиИспользоватьПроксиПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура эдиГЛНОрганизацииХранениеПриИзменении(Элемент)
	
	Элементы.эдиГЛНОрганизацииИмяРеквизита.Видимость 	= Объект.эдиГЛНОрганизацииХранение = "ВРеквизите";
	Элементы.ОткрытьСопоставлениеОрганизаций.Видимость 	= Объект.эдиГЛНОрганизацииХранение = "ВоВнешнейБД";
	
КонецПроцедуры

&НаКлиенте
Процедура эдиПартнерИмяСправочникаПриИзменении(Элемент)
	
	ОбработатьВыборОбъектаМетаданных("эдиПартнерИмяСправочника", "эдиГЛНПартнераИмяРеквизита");
	
КонецПроцедуры

&НаКлиенте
Процедура эдиГЛНПартнераХранениеПриИзменении(Элемент)
	
	Элементы.эдиГЛНПартнераИмяРеквизита.Видимость 		= Объект.эдиГЛНПартнераХранение = "ВРеквизите";
	Элементы.ОткрытьСопоставлениеПартнеров.Видимость 	= Объект.эдиГЛНПартнераХранение = "ВоВнешнейБД";
	
КонецПроцедуры

&НаКлиенте
Процедура эдиТочкаДоставкиИмяСправочникаПриИзменении(Элемент)
	
	ОбработатьВыборОбъектаМетаданных("эдиТочкаДоставкиИмяСправочника", "эдиГЛНТочкиДоставкиИмяРеквизита");
		
КонецПроцедуры

&НаКлиенте
Процедура эдиГЛНТочкиДоставкиХранениеПриИзменении(Элемент)
	
	Элементы.эдиГЛНТочкиДоставкиИмяРеквизита.Видимость 		= Объект.эдиГЛНТочкиДоставкиХранение = "ВРеквизите";
	Элементы.ОткрытьСопоставлениеТочекДоставки.Видимость 	= Объект.эдиГЛНТочкиДоставкиХранение = "ВоВнешнейБД";
	
КонецПроцедуры

&НаКлиенте
Процедура эдиСпособПоискаНоменклатурыПриИзменении(Элемент)
	
	Элементы.ОткрытьСопоставлениеНоменклатуры.Видимость = Объект.эдиСпособПоискаНоменклатуры = "ВоВнешнейБД";
	Элементы.эдиЗапросПоискаНоменклатуры.Видимость 		= Объект.эдиСпособПоискаНоменклатуры = "ПоПроизвольномуЗапросу";
	Элементы.эдиРегистрСведенийДляПоиска.Видимость 		= Объект.эдиСпособПоискаНоменклатуры = "ПоРегиструСведений";
	Элементы.эдиКодНоменклатурыИмяРеквизита.Видимость 	= Объект.эдиСпособПоискаНоменклатуры = "ПоРегиструСведений"
															Или Объект.эдиСпособПоискаНоменклатуры = "ПоРеквизиту";
															
	Если Объект.эдиСпособПоискаНоменклатуры = "ПоРеквизиту" Тогда
		ЗаполнитьСписокРеквизитовОбъектаМетаданных("эдиКодНоменклатурыИмяРеквизита", "Номенклатура");
	ИначеЕсли Объект.эдиСпособПоискаНоменклатуры = "ПоРегиструСведений"
		И Не ПустаяСтрока(Объект.эдиРегистрСведенийДляПоиска) Тогда
		
		ЗаполнитьСписокРеквизитовОбъектаМетаданных("эдиКодНоменклатурыИмяРеквизита", Объект.эдиРегистрСведенийДляПоиска, "РегистрыСведений");
		
	ИначеЕсли Объект.эдиСпособПоискаНоменклатуры = "ПоРегиструСведений"
		И ПустаяСтрока(Объект.эдиРегистрСведенийДляПоиска) Тогда
		
		Элементы.эдиКодНоменклатурыИмяРеквизита.СписокВыбора.Очистить();
		
	КонецЕсли;
	
	Если Элементы.эдиКодНоменклатурыИмяРеквизита.СписокВыбора.НайтиПоЗначению(Объект.эдиКодНоменклатурыИмяРеквизита) = Неопределено Тогда
		Объект.эдиКодНоменклатурыИмяРеквизита = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура эдиРегистрСведенийДляПоискаПриИзменении(Элемент)
	
	ОбработатьВыборОбъектаМетаданных("эдиРегистрСведенийДляПоиска", "эдиКодНоменклатурыИмяРеквизита", "РегистрыСведений");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныхРеляцийПартнерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаДоступныхРеляций.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Партнер) Тогда
		ТекущиеДанные.ИНН = ПолучитьРеквизит(ТекущиеДанные.Партнер, "ИНН", "");
	Иначе
		ТекущиеДанные.ИНН = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныхРеляцийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьФормуПартнера();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныхРеляцийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПартнера();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСопоставленияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОткрытьФормуСопоставления(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСопоставленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуСопоставления();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСопоставленияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьФормуСопоставления();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСопоставленияПередУдалением(Элемент, Отказ)
	
	Если Элементы.ТаблицаСопоставления.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = Элементы.ТаблицаСопоставления.ТекущиеДанные.ИдентификаторЗаписи;
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		РаботаСВнешнейБД.ЭДИ_Удалить(Неопределено, Неопределено, , , , , , , , Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовДокументаИмяРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПустаяСтрока(ИмяДокументаВМетаданных) Тогда
		
		СообщитьПользователю(НСтр("ru = 'Не указан тип документа.'"), "ИмяДокументаВМетаданных");
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
	СписокВыбора 	= Новый СписокЗначений;	
	ТекущиеДанные 	= Элементы.ДеревоРеквизитовДокумента.ТекущиеДанные;
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено
		И ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 Тогда
		
		СписокВыбора = ВернутьСписокРеквизитовОбъектаМетаданных(ИмяДокументаВМетаданных, "Документы");
		
	ИначеЕсли ТекущиеДанные.ПолучитьРодителя() = Неопределено
		И ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
		
		СписокВыбора = ПолучитьСписокТабличныхЧастей(ИмяДокументаВМетаданных, "Документы");
		
	Иначе
		СписокВыбора = ПолучитьСписокРеквизитовТабличнойЧасти(ИмяДокументаВМетаданных, "Документы", ТекущиеДанные.ПолучитьРодителя().ИмяРеквизита);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВыборРеквизитаДокумента", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзСписка(Оповещение, СписокВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура эдиКаталогРасширенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбора 					= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.МножественныйВыбор = Ложь;
	ДиалогВыбора.Заголовок 			= "Выберите каталог для хранения файлов";
	
	Если ДиалогВыбора.Выбрать() Тогда
		
		Объект.эдиКаталогРасширений = ДополнитьПутьСправа(ДиалогВыбора.Каталог);
		РаботаСРасширениями.Инициализировать(Объект.эдиКаталогРасширений);
		ПерезаполнитьТаблицуРасширений();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура эдиКаталогРасширенийПриИзменении(Элемент)
	
	РаботаСРасширениями.Инициализировать(Объект.эдиКаталогРасширений);
	ПерезаполнитьТаблицуРасширений();
		
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяПодписаниеПриИзменении(Элемент)
	
	Элементы.ФорматПодписи.Видимость = ТребуетсяПодписание;
	
КонецПроцедуры

&НаКлиенте
Процедура эдиИспользоватьПодписаниеПриИзменении(Элемент)
	
	Элементы.ГруппаПодписант.Видимость 				= Объект.эдиИспользоватьПодписание;
	Элементы.ГруппаПараметрыСертификата.Видимость 	= Объект.эдиИспользоватьПодписание;
	
КонецПроцедуры

&НаКлиенте
Процедура эдиСертификатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокСертификатов = РаботаСПодписанием.ПолучитьСписокСертификатов();
	//Никитин 6.06
	ЭтаФорма.Элементы.эдиСертификат.СписокВыбора.Очистить();
	
	Для Каждого Сертификат Из СписокСертификатов Цикл
		ЭтаФорма.Элементы.эдиСертификат.СписокВыбора.Добавить(СТрока(Сертификат.Значение), Сертификат.Представление);
	КонецЦикла;	
	//***

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Далее(Команда)
	
	Отмена = Ложь;
	ВыполнитьДействияПередСменойСтраницы(Отмена, 1);
	
	Если Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКомандуСменыСтраницы(1);
	ВыполнитьДействияПослеСменыСтраницы(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	ОбновитьФормуПриСменеСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Отмена = Ложь;
	ВыполнитьДействияПередСменойСтраницы(Отмена, -1);
	
	Если Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКомандуСменыСтраницы(-1);
	ВыполнитьДействияПослеСменыСтраницы(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	ОбновитьФормуПриСменеСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	РезультатПодключения = ВыполнитьПодключениеКПлатформе();
	Если РезультатПодключения = Неопределено Тогда
		Возврат;
	ИначеЕсли РезультатПодключения.Результат Тогда
		ТекстПредупреждения = НСтр("ru = 'Подключение выполнено успешно.'");
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Ошибка подключения к платформе: " + РезультатПодключения.СообщениеОшибки + ".'");
	КонецЕсли;
	
	ПоказатьПредупреждение(, ТекстПредупреждения);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДрайвер32(Команда)
	
	УстановитьДрайвер(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДрайвер64(Команда)
	
	УстановитьДрайвер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеКБД(Команда)
	
	ХранилищеСоздано = ВыполнитьПодключениеКВнешнейБД();
	Если ХранилищеСоздано = Неопределено
		Или Не ХранилищеСоздано Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Ошибка открытия внешнего хранилища данных.'"));
		
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Подключение к внешнему хранилищу данных выполнено успешно.'"));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если ПервыйЗапуск Тогда
		ЗаписатьСопоставлениеПартнеров();
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть(ПолучитьСтрукутуруНастроек());
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПрофиль(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ДобавлениеПрофиля", ЭтотОбъект, Новый Структура);
	ПоказатьВводСтроки(Оповещение, "", НСтр("ru = 'Наименование профиля'"), 50, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПрофиль(Команда)
	
	Если Объект.эдиТекущийПрофиль = "ПоУмолчанию" Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Невозможно удалить профиль по умолчанию.'"));
		Возврат;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("УдалениеПрофиля", ЭтотОбъект, Новый Структура);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Удалить выбранный профиль и связанные с ним настройки?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьПоИНН(Команда)
	
	СписокИНН = ПолучитьСписокИННПартнеров(Объект.эдиПартнерИмяСправочника);
	Если СписокИНН.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементПартнера Из СписокИНН Цикл
		
		Ответ = РаботаСSOAP.OrganizationInfo(ЭлементПартнера.Представление);
		Если Ответ <> Неопределено
			И Ответ.Результат
			И Не ПустаяСтрока(Ответ.ТекстXML) Тогда
			
			СтруктураПартнера = РаботаСXML.ПолучитьСтруктуруПартнера(Ответ.ТекстXML);
			
		Иначе
			Продолжить;			
		КонецЕсли;
		
		СтрокиРеляций = ТаблицаДоступныхРеляций.НайтиСтроки(Новый Структура("ILN", СтруктураПартнера.ГЛН));
		Для Каждого Строка Из СтрокиРеляций Цикл
			
			Строка.ИНН 		= ЭлементПартнера.Представление;
			Строка.Партнер 	= ЭлементПартнера.Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСопоставлениеПартнеров(Команда)
	
	ОткрытьСопоставление(Элементы.ГруппаСопоставлениеПартнеров, "эдиПартнерИмяСправочника", "партнеров", "ТаблицаДоступныхРеляцийПартнер", "ТаблицаДоступныхРеляцийСохранитьСопоставлениеПартнеров");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСопоставлениеТочекДоставки(Команда)
	
	ТекущееСопоставление = "ТочкаДоставки";
	ОткрытьСопоставление(Элементы.ГруппаСопоставлениеВторичныхДанных, "эдиТочкаДоставкиИмяСправочника", "точек доставки", "", "");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСопоставлениеОрганизаций(Команда)
	
	Элементы.ТаблицаСопоставленияЗаполнитьОрганизации.Видимость = Истина;
	
	ТекущееСопоставление = "Организация";
	ОткрытьСопоставление(Элементы.ГруппаСопоставлениеВторичныхДанных, "", "", "", "", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСопоставлениеНоменклатуры(Команда)
	
	ТекущееСопоставление = "Номенклатура";
	ОткрытьСопоставление(Элементы.ГруппаСопоставлениеВторичныхДанных, "", "", "", "", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСопоставлениеПартнеров(Команда)
	
	ЗакрытьСопоставление(Элементы.ГруппаСопоставлениеПартнеров);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСопоставлениеКоманда(Команда)
	
	Элементы.ТаблицаСопоставленияЗаполнитьОрганизации.Видимость = Ложь;
	
	ЗаписатьСопоставлениеСправочников();
	ТекущееСопоставление = "";
	ЗакрытьСопоставление(Элементы.ГруппаСопоставлениеВторичныхДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПартнеров(Команда)
	
	ОтветПлатформы = РаботаСSOAP.Relationships();
	ЗаполнитьДоступныхПартнеров(ОтветПлатформы);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСопоставлениеПартнеров(Команда)
	
	ЗаписатьСопоставлениеПартнеров();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСопоставлениеПартнеров(Команда)
	
	Если Элементы.ТаблицаДоступныхРеляций.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ТаблицаДоступныхРеляций.ТекущиеДанные;
	РаботаСSOAP.ЭДИ_Удалить(ТекущиеДанные.ILN, ТекущиеДанные.Партнер, "PartnerILN", , ТекущиеДанные.ИНН, ТекущиеДанные.FNSID, , , ТекущиеДанные.ИдентификаторЗаписи)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОрганизации(Команда)
		
	СписокОрганизаций = ПолучитьСписокИННОрганизаций();
	Для Каждого ЭлементСписка Из СписокОрганизаций Цикл
		
		Ответ = РаботаСSOAP.OrganizationInfo(ЭлементСписка.Представление);
		Если Ответ <> Неопределено
			И Ответ.Результат
			И Не ПустаяСтрока(Ответ.ТекстXML) Тогда
			
			СтруктураОрганизации = РаботаСXML.ПолучитьСтруктуруПартнера(Ответ.ТекстXML);
			
		Иначе
			Продолжить;			
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидСопоставления"	, "Организация");
		СтруктураПоиска.Вставить("Код"				, СтруктураОрганизации.ГЛН);
		
		ДобавленныеСтроки 	= ТаблицаСопоставления.НайтиСтроки(СтруктураПоиска);
		СтрокаСопоставления = ?(ДобавленныеСтроки.Количество() = 0, ТаблицаСопоставления.Добавить(), ДобавленныеСтроки[0]);
		
		СтрокаСопоставления.Код 				= СтруктураОрганизации.ГЛН;
		СтрокаСопоставления.Значение 			= ЭлементСписка.Значение;
		СтрокаСопоставления.FNSID 				= СтруктураОрганизации.ФНСИД;
		СтрокаСопоставления.КодРегиона 			= Лев(ЭлементСписка.Представление, 2);
		СтрокаСопоставления.ВидСопоставления 	= "Организация";
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройкуДокумента(Команда)
	
	СохранитьНастройкуДокумента();
	
	Элементы.ГруппаНастройкаДокумента.Видимость = Ложь;
	Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	Элементы.ГруппаШапка.Видимость 				= Истина;
	Элементы.ПанельНастроек.Видимость 			= Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница 	= Элементы.ГруппаДокументы;
	Элементы.ГруппаСтраницы.ОтображениеСтраниц 	= ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
	
	ИмяРеляции = "";
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенияВключитьВсе(Команда)
	
	Для Каждого СтрокаРасширения Из ТаблицаРасширений Цикл
		СтрокаРасширения.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРасширения(Команда)
	
	ПерезаполнитьТаблицуРасширений();
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенияОтключитьВсе(Команда)
	
	Для Каждого СтрокаРасширения Из ТаблицаРасширений Цикл
		СтрокаРасширения.Использование = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеДанных

&НаКлиенте
Процедура ВыборТипа(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		
		Если Элементы[ДополнительныеПараметры.ИмяЭлементаФормыИное].СписокВыбора.Количество() = 0 Тогда
			Объект[ДополнительныеПараметры.ИмяЭлементаФормыИное] = "";
		Иначе
			Объект[ДополнительныеПараметры.ИмяЭлементаФормыИное] = Элементы[ДополнительныеПараметры.ИмяЭлементаФормыИное].СписокВыбора[0].Значение;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если Элементы[ДополнительныеПараметры.ИмяЭлементаФормыИное].СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение.Значение) = Неопределено Тогда
		Элементы[ДополнительныеПараметры.ИмяЭлементаФормыИное].СписокВыбора.Вставить(0, ВыбранноеЗначение.Значение, ВыбранноеЗначение.Представление);
	КонецЕсли;
	
	Элементы[ДополнительныеПараметры.ИмяЭлементаФормы].СписокВыбора.Очистить();
	
	Объект[ДополнительныеПараметры.ИмяЭлементаФормыИное] 	= ВыбранноеЗначение.Значение;
	СписокРеквизитовСправочника 							= ВернутьСписокРеквизитовОбъектаМетаданных(Объект[ДополнительныеПараметры.ИмяЭлементаФормыИное], ДополнительныеПараметры.ТипМетаданных);
	Для Каждого Реквизит Из СписокРеквизитовСправочника Цикл
		Элементы[ДополнительныеПараметры.ИмяЭлементаФормы].СписокВыбора.Добавить(Реквизит.Значение, Реквизит.Представление);
	КонецЦикла;
	
	Объект[ДополнительныеПараметры.ИмяЭлементаФормы] = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыПартнера(СтруктураПартнера, ДополнительныеПараметры) Экспорт
	
	Если СтруктураПартнера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Элементы.ТаблицаДоступныхРеляций.ТекущиеДанные, СтруктураПартнера);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыСопоставления(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = ?(ДополнительныеПараметры.ДобавлениеСтроки, ТаблицаСопоставления.Добавить(), Элементы.ТаблицаСопоставления.ТекущиеДанные);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборОбъектаМетаданных(Знач ИмяРеквизитаОбъектаМетаданных, Знач ИмяРеквизитаСпискаПолей, Знач ТипМетаданных = "Справочники")
	
	Если ПустаяСтрока(Объект[ИмяРеквизитаОбъектаМетаданных]) Тогда
		Элементы[ИмяРеквизитаСпискаПолей].СписокВыбора.Очистить();
	ИначеЕсли Объект[ИмяРеквизитаОбъектаМетаданных] = "Иное" Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ТипМетаданных"		, ТипМетаданных);
		ПараметрыОповещения.Вставить("ИмяЭлементаФормы"		, ИмяРеквизитаСпискаПолей);
		ПараметрыОповещения.Вставить("ИмяЭлементаФормыИное"	, ИмяРеквизитаОбъектаМетаданных);
		
		Оповещение 			= Новый ОписаниеОповещения("ВыборТипа", ЭтотОбъект, ПараметрыОповещения);
		СписокМетаданных 	= ПолучитьСписокМетаданныхКонфигурации(ПараметрыОповещения.ТипМетаданных);
		ПоказатьВыборИзСписка(Оповещение, СписокМетаданных);
		
	Иначе
		
		Элементы[ИмяРеквизитаСпискаПолей].СписокВыбора.Очистить();
		
		СписокРеквизитов = ВернутьСписокРеквизитовОбъектаМетаданных(Объект[ИмяРеквизитаОбъектаМетаданных], ТипМетаданных);
		Для Каждого Реквизит Из СписокРеквизитов Цикл
			Элементы[ИмяРеквизитаСпискаПолей].СписокВыбора.Добавить(Реквизит.Значение, Реквизит.Представление);
		КонецЦикла;
		
		Объект[ИмяРеквизитаСпискаПолей] = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПолейСопоставленияКлассификаторов(Отказ)
	
	Если Объект.эдиГЛНОрганизацииХранение = "ВРеквизите"
		И ПустаяСтрока(Объект.эдиГЛНОрганизацииИмяРеквизита) Тогда
		
		СообщитьПользователю(НСтр("ru = 'Не заполнено имя реквизита, в котором хранится GLN организации.'"), "Объект.эдиГЛНОрганизацииИмяРеквизита", Отказ);
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.эдиГЛНПартнераХранение) Тогда
		СообщитьПользователю(НСтр("ru = 'Не заполнено имя справочника, по которому осуществляется поиск партнера.'"), "Объект.эдиГЛНПартнераХранение", Отказ);
	КонецЕсли;
	
	Если Объект.эдиГЛНПартнераХранение = "ВРеквизите"
		И ПустаяСтрока(Объект.эдиГЛНПартнераИмяРеквизита) Тогда
		
		СообщитьПользователю(НСтр("ru = 'Не заполнено имя реквизита, в котором хранится GLN партнера.'"), "Объект.эдиГЛНПартнераИмяРеквизита", Отказ);
		
	КонецЕсли;

	Если ПустаяСтрока(Объект.эдиГЛНТочкиДоставкиХранение) Тогда
		СообщитьПользователю(НСтр("ru = 'Не заполнено имя справочника, по которому осуществляется поиск точки доставки.'"), "Объект.эдиГЛНТочкиДоставкиХранение", Отказ);
	КонецЕсли;
	
	Если Объект.эдиГЛНТочкиДоставкиХранение = "ВРеквизите"
		И ПустаяСтрока(Объект.эдиГЛНТочкиДоставкиИмяРеквизита) Тогда
		
		СообщитьПользователю(НСтр("ru = 'Не заполнено имя реквизита, в котором хранится GLN точки доставки.'"), "Объект.эдиГЛНТочкиДоставкиИмяРеквизита", Отказ);
		
	КонецЕсли;
	
	Если Объект.эдиСпособПоискаНоменклатуры = "ПоРегиструСведений"
		И ПустаяСтрока(Объект.эдиРегистрСведенийДляПоиска) Тогда
		
		СообщитьПользователю(НСтр("ru = 'Не заполнено имя регистра сведений, по которому осуществляется поиск номенклатуры.'"), "Объект.эдиРегистрСведенийДляПоиска", Отказ);
		
	КонецЕсли;

	Если (Объект.эдиСпособПоискаНоменклатуры = "ПоРеквизиту"
		Или Объект.эдиСпособПоискаНоменклатуры = "ПоРегиструСведений")
		И ПустаяСтрока(Объект.эдиКодНоменклатурыИмяРеквизита) Тогда
		
		СообщитьПользователю(НСтр("ru = 'Не заполнено имя реквизита, по которому осуществляется поиск номенклатуры.'"), "Объект.эдиКодНоменклатурыИмяРеквизита", Отказ);
		
	КонецЕсли;

	Если Объект.эдиСпособПоискаНоменклатуры = "ПоПроизвольномуЗапросу"
		И ПустаяСтрока(Объект.эдиЗапросПоискаНоменклатуры) Тогда
		
		СообщитьПользователю(НСтр("ru = 'Не указан текст запроса.'"), "Объект.эдиЗапросПоискаНоменклатуры", Отказ);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоступныхПартнеров(ОтветПлатформы)
		
	ТаблицаДоступныхРеляций.Очистить();	
	Элементы.ТаблицаДоступныхРеляцийПартнер.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + Объект.эдиПартнерИмяСправочника);
	
	Если ОтветПлатформы = Неопределено
		Или ПустаяСтрока(ОтветПлатформы.ТекстXML) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СписокПартнеров 				= РаботаСXML.ПолучитьСписокПартнеров(ОтветПлатформы.ТекстXML);
	СписокСопоставленныхПартнеров 	= РаботаСВнешнейБД.ЭДИ_ПрочитатьСвойства(Неопределено, Неопределено, "PartnerILN", , , , , , , , , 1, , ).Содержимое;
	
	Если СписокСопоставленныхПартнеров <> Неопределено Тогда
		
		ТаблицаПартнеров.Очистить();
		Для Каждого ЭлементСписка Из СписокСопоставленныхПартнеров Цикл
			
			СтрокаПартнера 						= ТаблицаПартнеров.Добавить();
			СтрокаПартнера.ГЛН 					= ЗначениеИзСтрокиВнутрСервер(ЭлементСписка.Значение.Объект);
			СтрокаПартнера.ИНН 					= ЭлементСписка.Значение.Индекс2;
			СтрокаПартнера.Партнер 				= ЗначениеИзСтрокиВнутрСервер(ЭлементСписка.Значение.Владелец);
			СтрокаПартнера.ИдентификаторЗаписи 	= ЭлементСписка.Значение.Индекс;
			
		КонецЦикла;
		
	КонецЕсли;

	Для Каждого Партнер Из СписокПартнеров Цикл
		
		СтрокаПартнера 				= ТаблицаДоступныхРеляций.Добавить();
		СтрокаПартнера.ILN 			= Партнер.Значение;
		СтрокаПартнера.Наименование = Партнер.Представление;
		
		СтрокиИзВнешнейБД = ТаблицаПартнеров.НайтиСтроки(Новый Структура("ГЛН", СтрокаПартнера.ILN));
		Если СтрокиИзВнешнейБД.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаПартнера, СтрокиИзВнешнейБД[0]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокиСопоставлений(Знач ВидСопоставления, Знач УдалятьСтроки = Ложь)
	
	Если ВидСопоставления = "Организация" Тогда
		ТипЗаписи = "OrganizationILN";
	ИначеЕсли ВидСопоставления = "ТочкаДоставки" Тогда
		ТипЗаписи = "DeliveryPointILN";
	ИначеЕсли ВидСопоставления = "Номенклатура" Тогда
		ТипЗаписи = "GoodsCode";
	Иначе
		Возврат;
	КонецЕсли;
	
	Если УдалятьСтроки Тогда
		
		ДобавленныеСтроки = ТаблицаСопоставления.НайтиСтроки(Новый Структура("ВидСопоставления", ВидСопоставления));	
		Для Каждого Строка Из ДобавленныеСтроки Цикл
			ТаблицаСопоставления.Удалить(ДобавленныеСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	СписокДанных = РаботаСВнешнейБД.ЭДИ_ПрочитатьСвойства(Неопределено, Неопределено, ТипЗаписи, , , , , , , , , 1, , ).Содержимое;
	Если СписокДанных <> Неопределено Тогда
		
		Для Каждого ЭлементСписка Из СписокДанных Цикл
			
			СтрокаСопоставления 					= ТаблицаСопоставления.Добавить();
			СтрокаСопоставления.Код 				= ЗначениеИзСтрокиВнутрСервер(ЭлементСписка.Значение.Объект);
			СтрокаСопоставления.Значение 			= ЗначениеИзСтрокиВнутрСервер(ЭлементСписка.Значение.Владелец);
			СтрокаСопоставления.ВидСопоставления 	= ВидСопоставления;
			СтрокаСопоставления.ИдентификаторЗаписи = ЭлементСписка.Значение.Индекс;
			
			Если ВидСопоставления = "Организация" Тогда
				
				СтрокаСопоставления.FNSID 		= ЭлементСписка.Значение.Индекс1;
				СтрокаСопоставления.КодРегиона = ЭлементСписка.Значение.Индекс2;
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСопоставлениеПартнеров()
	
	Если Объект.эдиГЛНПартнераХранение <> "ВоВнешнейБД" Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Для Каждого СтрокаСопоставления Из ТаблицаДоступныхРеляций Цикл
		
		Если СтрокаСопоставления.Партнер = Неопределено
			Или СтрокаСопоставления.Партнер.Пустая() Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураДокументов = Новый Структура("СписокВходящих, СписокИсходящих");
		Если СтрокаСопоставления.СписокВходящих <> Объект.эдиСписокВходящих Тогда 
			СтруктураДокументов.СписокВходящих = СтрокаСопоставления.СписокВходящих;
		КонецЕсли;
		
		Если СтрокаСопоставления.СписокИсходящих <> Объект.эдиСписокИсходящих Тогда 
			СтруктураДокументов.СписокИсходящих = СтрокаСопоставления.СписокИсходящих;
		КонецЕсли;
		
		Если СтруктураДокументов.СписокВходящих <> Неопределено
			Или СтруктураДокументов.СписокИсходящих <> Неопределено Тогда
			
			Атрибут3 = ЗначениеВСтрокуВнутрСервер(СтруктураДокументов);
			
		Иначе
			Атрибут3 = Неопределено;
		КонецЕсли;
		
		ИдентификаторЗаписи = ?(ЗначениеЗаполнено(СтрокаСопоставления.ИдентификаторЗаписи), СтрокаСопоставления.ИдентификаторЗаписи, Неопределено);
		Ответ 				= РаботаСВнешнейБД.ЭДИ_Записать(СтрокаСопоставления.ILN, СтрокаСопоставления.Партнер, "PartnerILN", , СтрокаСопоставления.ИНН, СтрокаСопоставления.FNSID, Атрибут3, , , , , ИдентификаторЗаписи); 		
		
		Если Ответ.Результат <> Истина Тогда
			ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + Ответ.Сообщение;
		КонецЕсли;
			
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСопоставлениеСправочников()
	
	Если ТекущееСопоставление = "Организация" Тогда
		ТипЗаписи = "OrganizationILN";
	ИначеЕсли ТекущееСопоставление = "ТочкаДоставки" Тогда
		ТипЗаписи = "DeliveryPointILN";
	ИначеЕсли ТекущееСопоставление = "Номенклатура" Тогда
		ТипЗаписи = "GoodsCode";
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Для Каждого СтрокаСопоставления Из ТаблицаСопоставления Цикл
		
		Если СтрокаСопоставления.ВидСопоставления <> ТекущееСопоставление Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущееСопоставление = "Организация" Тогда
			
			Атрибут1 = СтрокаСопоставления.FNSID;
			Атрибут2 = СтрокаСопоставления.КодРегиона;
			
		Иначе
			
			Атрибут1 = Неопределено;
			Атрибут2 = Неопределено;
			
		КонецЕсли;
		
		ИдентификаторЗаписи = ?(ЗначениеЗаполнено(СтрокаСопоставления.ИдентификаторЗаписи), СтрокаСопоставления.ИдентификаторЗаписи, Неопределено);
		Ответ 				= РаботаСВнешнейБД.ЭДИ_Записать(СтрокаСопоставления.Код, СтрокаСопоставления.Значение, ТипЗаписи, , Атрибут1, Атрибут2, , , , , , ИдентификаторЗаписи); 		
		
		Если Ответ.Результат <> Истина Тогда
			ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + Ответ.Сообщение;
		КонецЕсли;
			
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПартнера()
	
	Если Элементы.ТаблицаДоступныхРеляций.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыПартнера", ЭтотОбъект, Новый Структура);
	ОткрытьФорму("ВнешняяОбработка.EDISOFT.Форма.ФормаПартнера", Новый Структура("СтруктураПараметров", ПолучитьСтруктуруПартнера()), ЭтаФорма, , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСопоставления(Знач ДобавлениеСтроки = Ложь)
	
	Если Не ДобавлениеСтроки
		И Элементы.ТаблицаСопоставления.ТекущаяСтрока = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыСопоставления", ЭтотОбъект, Новый Структура("ДобавлениеСтроки", ДобавлениеСтроки));
	ОткрытьФорму("ВнешняяОбработка.EDISOFT.Форма.ФормаСопоставления", Новый Структура("СтруктураПараметров", ПолучитьСтруктуруСопоставления(ДобавлениеСтроки)), ЭтаФорма, , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПартнера()
	
	ТекущиеДанные 		= Элементы.ТаблицаДоступныхРеляций.ТекущиеДанные;
	СписокВходящих 		= ?(ТекущиеДанные.СписокВходящих.Количество() = 0, Объект.эдиСписокВходящих, ТекущиеДанные.СписокВходящих);
	СписокИсходящих 	= ?(ТекущиеДанные.СписокИсходящих.Количество() = 0, Объект.эдиСписокИсходящих, ТекущиеДанные.СписокИсходящих);
	СтруктураПартнера 	= Новый Структура("ILN, FNSID, Наименование, Партнер");
	
	ЗаполнитьЗначенияСвойств(СтруктураПартнера, ТекущиеДанные);
	
	СтруктураПартнера.Вставить("СписокВходящих"	, СписокВходящих);
	СтруктураПартнера.Вставить("СписокИсходящих", СписокИсходящих);
	СтруктураПартнера.Вставить("ОграничениеТипа", Объект.эдиПартнерИмяСправочника);
	
	Возврат СтруктураПартнера;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруСопоставления(Знач ДобавлениеСтроки)
	
	ТекущиеДанные 			= Элементы.ТаблицаСопоставления.ТекущиеДанные;
	СтруктураПараметров 	= Новый Структура("Код, Значение, ОграничениеТипа");
	
	Если ТекущееСопоставление = "Организация" Тогда
		
		СтруктураПараметров.Вставить("FNSID");
		СтруктураПараметров.Вставить("КодРегиона");
		СтруктураПараметров.ОграничениеТипа = "Организации";
		
	ИначеЕсли ТекущееСопоставление = "ТочкаДоставки" Тогда
		СтруктураПараметров.ОграничениеТипа = Объект.эдиТочкаДоставкиИмяСправочника;	
	ИначеЕсли ТекущееСопоставление = "Номенклатура" Тогда
		СтруктураПараметров.ОграничениеТипа = "Номенклатура";	
	КонецЕсли;
	
	Если Не ДобавлениеСтроки Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ТекущиеДанные);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("КодЗаголовок"			, Элементы.ТаблицаСопоставленияКод.Заголовок);
	СтруктураПараметров.Вставить("ЗначениеЗаголовок"	, Элементы.ТаблицаСопоставленияЗначение.Заголовок);
	СтруктураПараметров.Вставить("ТекущееСопоставление" , ТекущееСопоставление);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокРеквизитовОбъектаМетаданных(ИмяРеквизита, Знач ИмяСправочника, Знач ТипМетаданных = "Справочники")

	Элементы[ИмяРеквизита].СписокВыбора.Очистить();
	
	СписокРеквизитовСправочникаПартнеры = ВернутьСписокРеквизитовОбъектаМетаданных(ИмяСправочника, ТипМетаданных);
	Для Каждого Реквизит Из СписокРеквизитовСправочникаПартнеры Цикл
		Элементы[ИмяРеквизита].СписокВыбора.Добавить(Реквизит.Значение, Реквизит.Представление);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокМетаданныхКонфигурации(Знач ТипМетаданныхСтрокой = "Справочники")
	
	СписокМетаданных = Новый СписокЗначений;
	Для Каждого МетаданныеЭлемент Из Метаданные[ТипМетаданныхСтрокой] Цикл
		СписокМетаданных.Добавить(МетаданныеЭлемент.Имя, МетаданныеЭлемент.Синоним);
	КонецЦикла;
	
	Возврат СписокМетаданных;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокИННПартнеров(Знач ИмяОбъектаМетаданных)

	СписокИНН = Новый СписокЗначений;
	Если ИмяОбъектаМетаданных = "Партнеры"
		И Метаданные.Справочники.Найти("Контрагенты") <> Неопределено
		И Метаданные.Справочники[ИмяОбъектаМетаданных].Реквизиты.Найти("ИНН") = Неопределено
		И Метаданные.Справочники.Контрагенты.Реквизиты.Найти("ИНН") <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Контрагенты.Партнер,
		|	Контрагенты.ИНН
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.Партнер.ПометкаУдаления";
		
	Иначе
		
		Если Метаданные.Справочники[ИмяОбъектаМетаданных].Реквизиты.Найти("ИНН") = Неопределено Тогда
			
			Сообщить(НСтр("ru = 'Невозможно определить ИНН партнеров.'"));
			Возврат СписокИНН;
			
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Партнеры.Ссылка КАК Партнер,
		|	Партнеры.ИНН
		|ИЗ
		|	Справочник." + ИмяОбъектаМетаданных + " КАК Партнеры
		|ГДЕ
		|	НЕ Партнеры.ПометкаУдаления";
		
	КонецЕсли;
	
	Запрос 				= Новый Запрос;
	Запрос.Текст 		= ТекстЗапроса;
	ВыборкаПартнеров 	= Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПартнеров.Следующий() Цикл
		
		Если Не ПустаяСтрока(ВыборкаПартнеров.ИНН) Тогда
			СписокИНН.Добавить(ВыборкаПартнеров.Партнер, ВыборкаПартнеров.ИНН);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокИНН;
	
КонецФункции

#КонецОбласти

#Область РаботаМастераНастройки

&НаКлиенте
Процедура ОбновитьФормуПриСменеСтраницы()
	
	ЗаголовокТекущейСтраницы = ЗаголовокСтраницы(ЭтаФорма);
	
	ОбновитьИндикатор(ЭтаФорма);
	ОбновитьКнопки(ЭтаФорма);   
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандуСменыСтраницы(Направление) 
	
	ТекущаяСтраницаИмя 	= Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИндексСтраницы 		= ПорядокСтраниц.Найти(ТекущаяСтраницаИмя);
	
	Если ИндексСтраницы = Неопределено Тогда
		ИндексНовойСтраницы = 0;
	Иначе
		ИндексНовойСтраницы = ИндексСтраницы + Направление;
	КонецЕсли;
	
	Если ИндексНовойСтраницы > ПорядокСтраниц.ВГраница() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИндексНовойСтраницы < 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтраницаИмя = ПорядокСтраниц.Получить(ИндексНовойСтраницы);
	Если НоваяСтраницаИмя <> Неопределено Тогда
		НоваяСтраница = Элементы.Найти(НоваяСтраницаИмя);
		Если НоваяСтраница <> Неопределено Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = НоваяСтраница;
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтраницаИмя = ""
		И Направление = 1 Тогда
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПередСменойСтраницы(Отмена, Направление)
	
	ТекущаяСтраницаИмя = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	
	Если ТекущаяСтраницаИмя = "ГруппаОбщиеНастройки"
		И Направление = 1 Тогда
		
		ЗаполнитьВидыДокументов(Истина);
		
	ИначеЕсли ТекущаяСтраницаИмя = "ГруппаПодключение"
		И Направление = 1 Тогда

		РезультатПодключения = ВыполнитьПодключениеКПлатформе();
		Если РезультатПодключения = Неопределено Тогда
			Отмена = Истина;
		ИначеЕсли Не РезультатПодключения.Результат Тогда
			
			Отмена = Истина;
			ПоказатьПредупреждение(, НСтр("ru = 'Ошибка подключения к платформе: " + РезультатПодключения.СообщениеОшибки + ".'"));
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраницаИмя = "ГруппаРаботаСВнешнейБД"
		И Направление = 1 Тогда
		
		ХранилищеСоздано = ВыполнитьПодключениеКВнешнейБД();
		Если ХранилищеСоздано = Неопределено Тогда
			Отмена = Истина;
		ИначеЕсли Не ХранилищеСоздано Тогда
			
			Отмена = Истина;
			ПоказатьПредупреждение(, НСтр("ru = 'Ошибка открытия внешнего хранилища данных.'"));
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраницаИмя = "ГруппаСопоставлениеСправочников"
		И Направление = 1 Тогда
		
		ПроверитьЗаполнениеПолейСопоставленияКлассификаторов(Отмена);
		
	ИначеЕсли ТекущаяСтраницаИмя = "ГруппаСопоставлениеВторичныхДанных" Тогда
		
		ЗаписатьСопоставлениеСправочников();
		ТекущееСопоставление = "";
		
		Если Объект.эдиГЛНПартнераХранение = "ВоВнешнейБД" Тогда
			ВыполнитьПодключениеКПлатформе(Истина);
		Иначе
			ПорядокСтраниц = Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма, Ложь));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПослеСменыСтраницы(БылаСтраницаИмя)
	
	ТекущаяСтраницаИмя 	= Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ПорядокСтраниц   	= Новый ФиксированныйМассив(ПорядокСтраницПоНастройкамФормы(ЭтаФорма));
	
	ОбновитьИндикатор(ЭтаФорма);
	
	Если ТекущаяСтраницаИмя = "ГруппаСопоставлениеВторичныхДанных" Тогда
		
		ТекущееСопоставление = "Организация";
		
	ИначеЕсли ТекущаяСтраницаИмя = "ГруппаПоследняяСтраница" Тогда
		
		Элементы.Закрыть.Видимость 	= Истина;
		Элементы.Назад.Видимость 	= Ложь;
		Элементы.Далее.Видимость 	= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОписанияСтраницИЭтапов()
	
	СтруктураСтраниц = Новый Структура;
	ОписаниеЭтапов   = Новый Структура;
	
	СтраницыЭтапа = Новый Структура;
	СтраницыЭтапа.Вставить("ГруппаОбщиеНастройки", НСтр("ru = 'Начало...'"));
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураСтраниц, СтраницыЭтапа);
	
	ОписаниеЭтапа 								= ОписаниеЭтапаНастройкиПрограммы();
	ОписаниеЭтапа.РазрешеноПрименениеНастроек 	= Ложь; 
	ОписаниеЭтапа.СтраницыЭтапа 				= СтраницыЭтапа;
	ОписаниеЭтапа.Этап 							= "ГруппаОбщиеНастройки";
	
	ОписаниеЭтапов.Вставить("ГруппаОбщиеНастройки", ОписаниеЭтапа);
	 
	СтраницыЭтапа = Новый Структура;
	СтраницыЭтапа.Вставить("ГруппаПодключение"					, НСтр("ru = 'Настройки подключения'"));
	СтраницыЭтапа.Вставить("ГруппаРаботаСВнешнейБД"				, НСтр("ru = 'Настройки хранения данных'"));
	СтраницыЭтапа.Вставить("ГруппаСопоставлениеСправочников"	, НСтр("ru = 'Справочная информация'"));
	СтраницыЭтапа.Вставить("ГруппаДокументы"					, НСтр("ru = 'Документы'"));
	СтраницыЭтапа.Вставить("ГруппаСопоставлениеВторичныхДанных"	, НСтр("ru = 'Организации, участвующие в ЭДО'"));
	СтраницыЭтапа.Вставить("ГруппаСопоставлениеПартнеров"		, НСтр("ru = 'Партнеры, участвующие в ЭДО'"));
	СтраницыЭтапа.Вставить("ГруппаПоследняяСтраница"			, НСтр("ru = 'Завершение'"));
	  
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураСтраниц, СтраницыЭтапа);
	
	ОписаниеЭтапа 									= ОписаниеЭтапаНастройкиПрограммы();  
	ОписаниеЭтапа.ДействиеКомандыПримененияНастроек = "Записать";
	ОписаниеЭтапа.СтраницыЭтапа 					= СтраницыЭтапа;
	ОписаниеЭтапа.Этап 								= "НачальнаяНастройка";
	
	ОписаниеЭтапов.Вставить("НачальнаяНастройка",ОписаниеЭтапа);
	
	ЗаголовкиСтраниц = Новый ФиксированнаяСтруктура(СтруктураСтраниц);
	ЭтапыНастройкиПрограммы = Новый ФиксированнаяСтруктура(ОписаниеЭтапов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПорядокСтраницПоНастройкамФормы(Форма, Знач СопоставлятьПартнеров = Истина)
	
	Элементы 		= Форма.Элементы;
	ПорядокСтраниц 	= Новый Массив;
	ПорядокСтраниц.Добавить("ГруппаОбщиеНастройки"); 
	ПорядокСтраниц.Добавить("ГруппаПодключение");
	ПорядокСтраниц.Добавить("ГруппаРаботаСВнешнейБД");
	ПорядокСтраниц.Добавить("ГруппаСопоставлениеСправочников");
	ПорядокСтраниц.Добавить("ГруппаДокументы");
	ПорядокСтраниц.Добавить("ГруппаСопоставлениеВторичныхДанных");
	Если СопоставлятьПартнеров Тогда
		ПорядокСтраниц.Добавить("ГруппаСопоставлениеПартнеров");
	КонецЕсли;
	ПорядокСтраниц.Добавить("ГруппаПоследняяСтраница");
	 
	Возврат ПорядокСтраниц;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокСтраницы(Форма)
	
	ТекущаяСтраницаИмя = Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	Если Форма.ЗаголовкиСтраниц.Свойство(ТекущаяСтраницаИмя) Тогда
		Возврат Форма.ЗаголовкиСтраниц[ТекущаяСтраницаИмя];
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИндикатор(Форма)
	
	ТекущаяСтраницаИмя = Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИндексСтраницы = Форма.ПорядокСтраниц.Найти(ТекущаяСтраницаИмя);
	Если ИндексСтраницы <> Неопределено Тогда
		Если Форма.ПорядокСтраниц.Количество() <= 1 Тогда
			Форма.ИндикаторТекущаяСтраница = 100;
		Иначе
			Форма.ИндикаторТекущаяСтраница = 100 * ИндексСтраницы / (Форма.ПорядокСтраниц.Количество() - 1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКнопки(Форма)
	
	ТекущаяСтраницаИмя = Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИндексСтраницы = Форма.ПорядокСтраниц.Найти(ТекущаяСтраницаИмя);
	Если ИндексСтраницы = Неопределено Тогда
		ИндексСтраницы = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеЭтапаНастройкиПрограммы()
	
	ОписаниеЭтапа = Новый Структура;
	ОписаниеЭтапа.Вставить("РазрешеноПрименениеНастроек", Истина);
	ОписаниеЭтапа.Вставить("Этап","");
	ОписаниеЭтапа.Вставить("ДействиеКомандыПримененияНастроек", "");
	ОписаниеЭтапа.Вставить("СтраницыЭтапа", Новый Структура );
	Возврат ОписаниеЭтапа;
	
КонецФункции

#КонецОбласти

#Область Документы

&НаКлиенте
Процедура ВыборРеквизитаДокумента(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоРеквизитовДокумента.ТекущиеДанные.ИмяРеквизита = ЗначениеВыбора.Значение;
	
КонецПроцедуры

&НаКлиенте
Функция ИзменениеФлажкаДокумента(Элемент)
	
	ПозицияРазделителя = Найти(Элемент.Имя, "_");
	ПозицияПодчеркивание = ПозицияРазделителя;
	Пока ПозицияПодчеркивание > 0 Цикл
		
		ТекстПоиска 			= Сред(Элемент.Имя, ПозицияРазделителя + 1);
		ПозицияПодчеркивание 	= Найти(ТекстПоиска, "_");
		ПозицияРазделителя 		= ПозицияРазделителя + ПозицияПодчеркивание;
		
	КонецЦикла;
		
	ЭлементСписка = ?(Сред(Элемент.Имя, ПозицияРазделителя + 1) = "Входящий", 
					Объект.эдиСписокВходящих.НайтиПоЗначению(Лев(Элемент.Имя, ПозицияРазделителя - 1)), 
					Объект.эдиСписокИсходящих.НайтиПоЗначению(Лев(Элемент.Имя, ПозицияРазделителя - 1)));
	ЭлементСписка.Пометка = ЭтаФорма[Элемент.Имя];
	
	Элементы[Элемент.Имя + "Декорация"].Видимость = Не ЭтаФорма[Элемент.Имя];
	Элементы[Элемент.Имя + "Настройка"].Видимость = ЭтаФорма[Элемент.Имя];
	
КонецФункции

&НаКлиенте
Функция НастройкаДокумента(Команда)
	
	Элементы.ГруппаНастройкаДокумента.Видимость = Истина;
	Элементы.ГруппаШапка.Видимость 				= Ложь;
	Элементы.ПанельНастроек.Видимость 			= Ложь;
	Элементы.ГруппаСтраницы.ОтображениеСтраниц 	= ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаСтраницы.ТекущаяСтраница 	= Элементы.ГруппаНастройкаДокумента;
	
	ЗаполнитьРеквизитыДокумента(Команда.Имя);
	
КонецФункции

&НаКлиенте
Процедура СохранитьНастройкуДокумента()
	 
	Если Не Объект.эдиОписаниеДокументов.Свойство(ИмяРеляции) Тогда
		Объект.эдиОписаниеДокументов.Вставить(ИмяРеляции);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ОбъектМетаданных, ТребуетсяПодписание, ФорматПодписи", ИмяДокументаВМетаданных, ТребуетсяПодписание, ФорматПодписи);
	СтруктураРеквизитов = Новый Структура();
	
	СтрокиРеквизитов = ДеревоРеквизитовДокумента.ПолучитьЭлементы();
	Для Каждого Реквизит Из СтрокиРеквизитов Цикл
		
		СтруктураСтроки = Новый Структура("НеИспользовать, ИмяРеквизита");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Реквизит);
		
		ПодчиненныеРеквизиты = Реквизит.ПолучитьЭлементы();
		Если ПодчиненныеРеквизиты.Количество() > 0 Тогда
			
			СтруктураРеквизитовТаблицы = Новый Структура();
			Для Каждого ПодчиненныйРеквизит Из ПодчиненныеРеквизиты Цикл
				
				СтруктураПараметровПодчиненногоРеквизита = Новый Структура("НеИспользовать, ИмяРеквизита");
				ЗаполнитьЗначенияСвойств(СтруктураПараметровПодчиненногоРеквизита, ПодчиненныйРеквизит);
				
				СтруктураРеквизитовТаблицы.Вставить(ПодчиненныйРеквизит.ИмяТэга, СтруктураПараметровПодчиненногоРеквизита);
				
			КонецЦикла;
			
			СтруктураСтроки.Вставить("РеквизитыТабличнойЧасти", СтруктураРеквизитовТаблицы);
			
		КонецЕсли;
		
		СтруктураРеквизитов.Вставить(Реквизит.ИмяТэга, СтруктураСтроки);
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("Данные", СтруктураРеквизитов);
	Объект.эдиОписаниеДокументов[ИмяРеляции]  = СтруктураПараметров;
	                                        
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыДокумента(ИмяКоманды)
	
	ДеревоРеквизитовДокумента.ПолучитьЭлементы().Очистить();
	Если Не ЗначениеЗаполнено(ИмяРеляции) Тогда
		ИмяРеляции = Лев(ИмяКоманды, Найти(ИмяКоманды, "_") - 1);
	КонецЕсли;
	
	ЕстьСопоставление 	= Объект.эдиОписаниеДокументов.Свойство(ИмяРеляции);
	Если ЕстьСопоставление Тогда
		ИмяДокументаВМетаданных = Объект.эдиОписаниеДокументов[ИмяРеляции].ОбъектМетаданных;
		Если Объект.эдиОписаниеДокументов[ИмяРеляции].Свойство("ТребуетсяПодписание") Тогда
			
			ФорматПодписи 		= Объект.эдиОписаниеДокументов[ИмяРеляции].ФорматПодписи;
			ТребуетсяПодписание = Объект.эдиОписаниеДокументов[ИмяРеляции].ТребуетсяПодписание;
			
		КонецЕсли;
	КонецЕсли;
	ТекстXML = ПолучитьТекстРеквизитовДокументов();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "Object"
			И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			И ЧтениеXML.ПолучитьАтрибут("Name") = ИмяРеляции Тогда
			
			ОбластьДобавления 		= ДеревоРеквизитовДокумента.ПолучитьЭлементы();
			ОбластьСопоставления 	= ?(ЕстьСопоставление, Объект.эдиОписаниеДокументов[ИмяРеляции].Данные, Неопределено);
			Пока ЧтениеXML.Прочитать() Цикл
				
				Если ЧтениеXML.Имя = "Object"
					И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					
					Прервать;
					
				КонецЕсли;
				
				Если (ЧтениеXML.Имя = "Item"
					Или ЧтениеXML.Имя = "Table"
					Или ЧтениеXML.Имя = "row")
					И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					
					СтрокаРеквизита 				= ОбластьДобавления.Добавить();
					СтрокаРеквизита.ИмяТэга 		= ЧтениеXML.ПолучитьАтрибут("Name");
					СтрокаРеквизита.ИмяРеквизита 	= ЧтениеXML.ПолучитьАтрибут("DocumentItem");
					
					Если ЕстьСопоставление
						И ОбластьСопоставления.Свойство(СтрокаРеквизита.ИмяТэга) Тогда
						
						ЗаполнитьЗначенияСвойств(СтрокаРеквизита, ОбластьСопоставления[СтрокаРеквизита.ИмяТэга]);
						
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СтрокаРеквизита.ИмяРеквизита) Тогда
						СтрокаРеквизита.НеИспользовать = Истина;
					КонецЕсли;
					
					Если ЧтениеXML.Имя = "Table" Тогда
						
						ОбластьДобавления 		= СтрокаРеквизита.ПолучитьЭлементы();
						СтруктураТаблицы 		= ?(ОбластьСопоставления = Неопределено, Новый Структура, ОбластьСопоставления[СтрокаРеквизита.ИмяТэга]);
						Если ЕстьСопоставление
							И Не СтруктураТаблицы.Свойство("РеквизитыТабличнойЧасти") Тогда
							
							СтруктураТаблицы.Вставить("РеквизитыТабличнойЧасти", Новый Структура);
							
						КонецЕсли;
						
						ОбластьСопоставления = ?(ЕстьСопоставление, СтруктураТаблицы.РеквизитыТабличнойЧасти, Неопределено);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьИнтерфейсДокументов()
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	Для Каждого Входящий Из Объект.эдиСписокВходящих Цикл
		
		СтруктураПоиска = Новый Структура(Входящий.Значение + "_Входящий");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭтаФорма);
		Если СтруктураПоиска[Входящий.Значение + "_Входящий"] = Неопределено Тогда
			
			НоваяФлажок = Новый РеквизитФормы(Входящий.Значение + "_Входящий", Новый ОписаниеТипов("Булево"));
	        МассивДобавляемыхРеквизитов.Добавить(НоваяФлажок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Исходящий Из Объект.эдиСписокИсходящих Цикл
		
		СтруктураПоиска = Новый Структура(Исходящий.Значение + "_Исходящий");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭтаФорма);
		Если СтруктураПоиска[Исходящий.Значение + "_Исходящий"] = Неопределено Тогда
			
			НоваяФлажок = Новый РеквизитФормы(Исходящий.Значение + "_Исходящий", Новый ОписаниеТипов("Булево"));
			МассивДобавляемыхРеквизитов.Добавить(НоваяФлажок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);  

	Для Каждого Входящий Из Объект.эдиСписокВходящих Цикл
		
		ЭтаФорма[Входящий.Значение + "_Входящий"] = Входящий.Пометка;
		
		Если Элементы.ГруппаКолонкаФлажковВходящие.ПодчиненныеЭлементы.Найти(Входящий.Значение + "Входящий") = Неопределено Тогда
			
			НовыйЭлементФормы						= Элементы.Добавить(Входящий.Значение + "_Входящий", Тип("ПолеФормы"), Элементы.ГруппаКолонкаФлажковВходящие);
	        НовыйЭлементФормы.Вид 					= ВидПоляФормы.ПолеФлажка;
	        НовыйЭлементФормы.ПутьКДанным 			= Входящий.Значение + "_Входящий";
			НовыйЭлементФормы.Заголовок				= Входящий.Представление;
			НовыйЭлементФормы.ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Право;
			
			Если Не ПервыйЗапуск Тогда
				НовыйЭлементФормы.УстановитьДействие("ПриИзменении", "ИзменениеФлажкаДокумента");
			КонецЕсли;

		КонецЕсли;			
		
		Если Не ПервыйЗапуск Тогда
			
			Если ЭтаФорма.Команды.Найти(Входящий.Значение + "_ВходящийНастройка") = Неопределено Тогда
				
				Команда 			= ЭтаФорма.Команды.Добавить(Входящий.Значение + "_ВходящийНастройка");
				Команда.Действие 	= "НастройкаДокумента";
				Команда.Заголовок 	= "Настройка >>";
				
			КонецЕсли;
			
			Если Элементы.ГруппаКолонкаКомандВходящие.ПодчиненныеЭлементы.Найти(Входящий.Значение + "_ВходящийНастройка") = Неопределено Тогда
				
				НоваяКнопка 			= Элементы.Добавить(Входящий.Значение + "_ВходящийНастройка", Тип("КнопкаФормы"), Элементы.ГруппаКолонкаКомандВходящие);
				НоваяКнопка.Вид 		= ВидКнопкиФормы.Гиперссылка;
				НоваяКнопка.ИмяКоманды 	= Входящий.Значение + "_ВходящийНастройка";
				НоваяКнопка.Видимость 	= Входящий.Пометка;
				
				Декорация 			= Элементы.Добавить(Входящий.Значение + "_ВходящийДекорация", Тип("ДекорацияФормы"), Элементы.ГруппаКолонкаКомандВходящие);
				Декорация.Заголовок = "";
				Декорация.Подсказка = "";
				Декорация.Видимость = Не Входящий.Пометка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Исходящий Из Объект.эдиСписокИсходящих Цикл
		
		ЭтаФорма[Исходящий.Значение + "_Исходящий"] = Исходящий.Пометка;
		
		Если Элементы.ГруппаКолонкаФлажковИсходящие.ПодчиненныеЭлементы.Найти(Исходящий.Значение + "Исходящий") = Неопределено Тогда
			
			НовыйЭлементФормы						= Элементы.Добавить(Исходящий.Значение + "_Исходящий", Тип("ПолеФормы"), Элементы.ГруппаКолонкаФлажковИсходящие);
	        НовыйЭлементФормы.Вид 					= ВидПоляФормы.ПолеФлажка;
	        НовыйЭлементФормы.ПутьКДанным 			= Исходящий.Значение + "_Исходящий";
			НовыйЭлементФормы.Заголовок				= Исходящий.Представление;
			НовыйЭлементФормы.ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Право;
			
			Если Не ПервыйЗапуск Тогда
				НовыйЭлементФормы.УстановитьДействие("ПриИзменении", "ИзменениеФлажкаДокумента");
			КонецЕсли;

		КонецЕсли;			
		
		Если Не ПервыйЗапуск Тогда
			
			Если ЭтаФорма.Команды.Найти(Исходящий.Значение + "_ИсходящийНастройка") = Неопределено Тогда
				
				Команда 			= ЭтаФорма.Команды.Добавить(Исходящий.Значение + "_ИсходящийНастройка");
				Команда.Действие 	= "НастройкаДокумента";
				Команда.Заголовок 	= "Настройка >>";
				
			КонецЕсли;
			
			Если Элементы.ГруппаКолонкаКомандИсходящие.ПодчиненныеЭлементы.Найти(Исходящий.Значение + "_ИсходящийНастройка") = Неопределено Тогда
				
				НоваяКнопка 			= Элементы.Добавить(Исходящий.Значение + "_ИсходящийНастройка", Тип("КнопкаФормы"), Элементы.ГруппаКолонкаКомандИсходящие);
				НоваяКнопка.Вид 		= ВидКнопкиФормы.Гиперссылка;
				НоваяКнопка.ИмяКоманды 	= Исходящий.Значение + "_ИсходящийНастройка";
				НоваяКнопка.Видимость 	= Исходящий.Пометка;
				
				Декорация 			= Элементы.Добавить(Исходящий.Значение + "_ИсходящийДекорация", Тип("ДекорацияФормы"), Элементы.ГруппаКолонкаКомандИсходящие);
				Декорация.Заголовок = "";
				Декорация.Подсказка = "";
				Декорация.Видимость = Не Исходящий.Пометка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстРеквизитовДокументов()
	
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПоляДокументов").ПолучитьТекст();
	
КонецФункции

#КонецОбласти

#Область Расширения

&НаКлиенте
Процедура ПерезаполнитьТаблицуРасширений()
	
	ТаблицаРасширений.Очистить();
	
	МассивРасширений = РаботаСРасширениями.ПолучитьСписокРасширений();
	Для Каждого Расширение Из МассивРасширений Цикл
		
		СтрокаРасширения = ТаблицаРасширений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасширения, Расширение);
		
		Если Объект.эдиСписокПодключенныхРасширений.НайтиПоЗначению(СтрокаРасширения.ИмяФайла) <> Неопределено Тогда
			СтрокаРасширения.Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИспользуемыеРасширения()
	
	Объект.эдиСписокПодключенныхРасширений.Очистить();
	
	Для Каждого СтрокаРасширения Из ТаблицаРасширений Цикл
		
		Если СтрокаРасширения.Использование Тогда
			Объект.эдиСписокПодключенныхРасширений.Добавить(СтрокаРасширения.ИмяФайла);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьХранениеДанных(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = "СоздатьНовую" Тогда
		
		ДиалогВыбора 					= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбора.МножественныйВыбор = Ложь;
		ДиалогВыбора.Заголовок 			= "Выберите каталог для хранения файлов";
		
		Если ДиалогВыбора.Выбрать() Тогда
			Объект.эдиКаталогБД = ДополнитьПутьСправа(ДиалогВыбора.Каталог);
		КонецЕсли;
		
	ИначеЕсли Ответ = "ВыбратьСуществующую" Тогда
		
		ДиалогВыбора 					= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбора.МножественныйВыбор = Ложь;
		ДиалогВыбора.Заголовок 			= "Выберите файл базы данных";
		ДиалогВыбора.Фильтр 			= НСтр("ru = 'База данных'") + "(*.db)|*.db";
		
		Если ДиалогВыбора.Выбрать() Тогда
			
			Объект.эдиПутьВключаетБД 	= Истина;
			Объект.эдиКаталогБД 		= ДиалогВыбора.ПолноеИмяФайла;
			
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветСохранениеНастроек(Ответ, ДополнительныеПараметры) Экспорт
	
	Если ПервыйЗапуск Тогда
		ЗаписатьСопоставлениеПартнеров();
	КонецЕсли;
	
	Модифицированность = Ложь;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Закрыть(ПолучитьСтрукутуруНастроек());
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеПрофиля(Наименование, ДополнительныеПараметры) Экспорт
	
	Если Наименование <> Неопределено Тогда
		
		Если Элементы.эдиТекущийПрофиль.СписокВыбора.НайтиПоЗначению(Наименование) <> Неопределено Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Профиль настроек с таким наименование уже существует.'"));
			Возврат;
			
		КонецЕсли;
		
		Модифицированность 			= Истина;
		Объект.эдиТекущийПрофиль 	= Наименование;
		
		Элементы.эдиТекущийПрофиль.СписокВыбора.Добавить(Наименование);
		ЗапонитьНастройкиИзПрофиля();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеПрофиля(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Элементы.эдиТекущийПрофиль.СписокВыбора.Удалить(Элементы.эдиТекущийПрофиль.СписокВыбора.НайтиПоЗначению(Объект.эдиТекущийПрофиль));
		
		РаботаСВнешнейБД.ЭДИ_Удалить(Объект.эдиТекущийПрофиль, Неопределено, "SETTINGS");
		
		Модифицированность 			= Истина;
		Объект.эдиТекущийПрофиль 	= "ПоУмолчанию";
		ЗапонитьНастройкиИзПрофиля();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПодключениеКПлатформе(ОбновлятьДоступныхПартнеров = Ложь)
	
	Отказ = Ложь;
	Если ПустаяСтрока(Объект.эдиАдресПодключения) Тогда
		СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Адрес подключения"".'"), "Объект.эдиАдресПодключения", Отказ);
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.эдиЛогин) Тогда
		СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Имя пользователя"".'"), "Объект.эдиЛогин", Отказ);
	КонецЕсли;

	Если ПустаяСтрока(Объект.эдиПароль) Тогда
		СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Пароль"".'"), "Объект.эдиПароль", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОтветПлатформы = РаботаСSOAP.Инициализировать(Объект.эдиАдресПодключения, Объект.эдиЛогин, Объект.эдиПароль,
										Объект.эдиИспользоватьПрокси, Объект.эдиПроксиСервер, Объект.эдиПроксиПорт,
										Объект.эдиПроксиЛогин, Объект.эдиПроксиПароль);
										
	Если ОбновлятьДоступныхПартнеров Тогда
		ЗаполнитьДоступныхПартнеров(ОтветПлатформы);
	КонецЕсли;
	
	Возврат ОтветПлатформы;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьПодключениеКВнешнейБД()
	
	Отказ = Ложь;
	Если Объект.эдиТипСУБД = "SQLite" Тогда
		
		Если ПустаяСтрока(Объект.эдиКаталогБД) Тогда
			СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Каталог базы данных"".'"), "Объект.эдиКаталогБД", Отказ);
		КонецЕсли;
		
	Иначе
		
		Если ПустаяСтрока(Объект.эдиСерверБД) Тогда
			СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Имя сервера"".'"), "Объект.эдиСерверБД", Отказ);
		КонецЕсли;

		Если ПустаяСтрока(Объект.эдиПортБД) Тогда
			СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Порт"".'"), "Объект.эдиПортБД", Отказ);
		КонецЕсли;
		
		Если ПустаяСтрока(Объект.эдиИмяБД) Тогда
			СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Имя базы данных"".'"), "Объект.эдиИмяБД", Отказ);
		КонецЕсли;
		
		Если ПустаяСтрока(Объект.эдиИмяТаблицыБД) Тогда
			СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Имя таблицы"".'"), "Объект.эдиИмяТаблицыБД", Отказ);
		КонецЕсли;
		
		Если ПустаяСтрока(Объект.эдиПользовательБД) Тогда
			СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Имя пользователя"".'"), "Объект.эдиПользовательБД", Отказ);
		КонецЕсли;
				
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ТипВнешнейБД"			, Объект.эдиТипСУБД);
	СтруктураНастроек.Вставить("ПутьВключаетБД"			, Объект.эдиПутьВключаетБД);
	СтруктураНастроек.Вставить("ПутьВнешнейБД"			, Объект.эдиКаталогБД);
	СтруктураНастроек.Вставить("ИмяВнешнейБД"			, Объект.эдиИмяБД);
	СтруктураНастроек.Вставить("ИмяТаблицыВнешнейБД"	, Объект.эдиИмяТаблицыБД);
	СтруктураНастроек.Вставить("СерверВнешнейБД"		, Объект.эдиСерверБД);
	СтруктураНастроек.Вставить("ПортВнешнейБД"			, Объект.эдиПортБД);
	СтруктураНастроек.Вставить("ПользовательВнешнейБД"	, Объект.эдиПользовательБД);
	СтруктураНастроек.Вставить("ПарольВнешнейБД"		, Объект.эдиПарольБД);
	
	РаботаСВнешнейБД.Инициализировать(СтруктураНастроек);	
	Возврат РаботаСВнешнейБД.ЭДИ_ПроверитьТаблицуХранилища();
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокПрофилей()
	
	СписокПрофилей = РаботаСВнешнейБД.ЭДИ_ПрочитатьСвойства(Неопределено, Неопределено, "SETTINGS", , , , , , , , , , , 1);
	Если СписокПрофилей.Результат Тогда
		
		Для Каждого Профиль Из СписокПрофилей.Содержимое Цикл
			
			ЗначениеЭлемента 		= ЗначениеИзСтрокиВнутрСервер(Профиль.Значение.Объект);
			ПредставлениеЭлемента 	= ?(ЗначениеЭлемента = "ПоУмолчанию", "<По умолчанию>", ЗначениеЭлемента);
			Элементы.эдиТекущийПрофиль.СписокВыбора.Добавить(ЗначениеЭлемента, ПредставлениеЭлемента);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапонитьНастройкиИзПрофиля()
	
	ПараметрыСвойств = РаботаСВнешнейБД.ЭДИ_Прочитать(Объект.эдиТекущийПрофиль, Неопределено, "SETTINGS");
	Если ПараметрыСвойств.Результат Тогда
		
		Если Не ПустаяСтрока(ПараметрыСвойств.Содержимое.Данные) Тогда
			
			СтруктураНастроек = ЗначениеИзСтрокиВнутрСервер(ПараметрыСвойств.Содержимое.Данные);
	        ЗаполнитьЗначенияСвойств(Объект, СтруктураНастроек);
			
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Ошибка чтения настроек из внешней БД.'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьПользователю(Знач Текст, Знач Поле = "", Отказ = Ложь)
	
	Отказ = Истина;
	
	Сообщение 		= Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Если Не ПустаяСтрока(Поле) Тогда
		Сообщение.Поле = Поле;
	КонецЕсли;
	
	Сообщение.Сообщить();

КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭлементамиФормы()
	
	ЭтоSQLite 											= Объект.эдиТипСУБД = "SQLite";
	Элементы.эдиКаталогБД.Видимость 					= ЭтоSQLite;
	Элементы.ГруппаSQL.Видимость 						= Не ПустаяСтрока(Объект.эдиТипСУБД) И Не ЭтоSQLite;
	Элементы.ПроверитьПодключениеКБД.Видимость 			= Не ПустаяСтрока(Объект.эдиТипСУБД);
	
	Элементы.ГруппаКолонкиЭлементовПрокси.Доступность 		= Объект.эдиИспользоватьПрокси;
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьДрайвер(Знач ЭтоWin64)
	
	Возврат УстановитьДрайверSQLite(ПолучитьДвоичныеДанныеКомпоненты(?(ЭтоWin64, "ФайлыSQLiteODBC64", "ФайлыSQLiteODBC86")));
	
КонецФункции

&НаКлиенте
Процедура ОткрытьСопоставление(Страница, Знач ИмяРеквизитаИмяСправочника, Знач ТипСопоставленияСтрокой
								, Знач ИмяЭлементаОграниченийТипа, Знач ИмяЭлементаКнопкаСохранения, Знач НеПроверятьЗаполнение = Ложь)
	
	Если Не НеПроверятьЗаполнение
		И ПустаяСтрока(Объект[ИмяРеквизитаИмяСправочника]) Тогда
		
		СообщитьПользователю(НСтр("ru = 'Не указан тип для сопоставления " + ТипСопоставленияСтрокой + ".'"), "Объект." + ИмяРеквизитаИмяСправочника);
		Возврат;
		
	КонецЕсли;
	
	Страница.Видимость = Истина;
	
	Если Не ПустаяСтрока(ИмяЭлементаКнопкаСохранения) Тогда
		Элементы[ИмяЭлементаКнопкаСохранения].КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИмяЭлементаОграниченийТипа) Тогда
		Элементы[ИмяЭлементаОграниченийТипа].ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + Объект[ИмяРеквизитаИмяСправочника]);
	КонецЕсли;
	
	Элементы.ГруппаШапка.Видимость 					= Ложь;
	Элементы.ПанельНастроек.Видимость 				= Ложь;
	Элементы.ГруппаСтраницы.ОтображениеСтраниц 		= ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаСтраницы.ТекущаяСтраница 		= Страница;
	
	Если ТекущееСопоставление <> "" Тогда
		ОтобразитьЗначенияСопоставлений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСопоставление(Страница)
	
	Страница.Видимость = Ложь;
	
	Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	
	Элементы.ГруппаШапка.Видимость 				= Истина;
	Элементы.ПанельНастроек.Видимость 			= Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница 	= Элементы.ГруппаСопоставлениеСправочников;
	Элементы.ГруппаСтраницы.ОтображениеСтраниц 	= ОтображениеСтраницФормы.ЗакладкиСлеваГоризонтально;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьЗначенияСопоставлений()
	
	Элементы.ТаблицаСопоставления.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидСопоставления", ТекущееСопоставление);
	
	Если ТекущееСопоставление = "Организация" Тогда
		
		Элементы.ТаблицаСопоставленияКод.Заголовок 				= "ГЛН";
		Элементы.ТаблицаСопоставленияЗначение.Заголовок 		= "Организация";
		
	ИначеЕсли ТекущееСопоставление = "ТочкаДоставки" Тогда
		
		Элементы.ТаблицаСопоставленияКод.Заголовок 				= "ГЛН";
		Элементы.ТаблицаСопоставленияЗначение.Заголовок 		= "Точка доставки";
		
	ИначеЕсли ТекущееСопоставление = "Номенклатура" Тогда
		
		Элементы.ТаблицаСопоставленияКод.Заголовок 				= Объект.эдиВидСопоставленияНоменклатуры;
		Элементы.ТаблицаСопоставленияЗначение.Заголовок 		= "Номенклатура";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрукутуруНастроек()
	
	СохранитьИспользуемыеРасширения();
	
	СтруктураНастроек = ПолучитьШаблонСтруктурыНастроек();
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, Объект);
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
Функция ПолучитьДвоичныеДанныеКомпоненты(ИмяМакета)
	
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакета);	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСпискиВыбораЗначений()
	
	// Организации
	Элементы.эдиГЛНОрганизацииХранение.СписокВыбора.Добавить("ВоВнешнейБД"	, "Во внешней базе данных");
	Элементы.эдиГЛНОрганизацииХранение.СписокВыбора.Добавить("ВРеквизите"	, "В реквизите справочника ""Организации""");
	
	СписокРеквизитовСправочникаОрганизации = Новый СписокЗначений;
	Если Метаданные.Справочники.Найти("Организации") <> Неопределено Тогда
		
		Для Каждого Реквизит Из Метаданные.Справочники.Организации.Реквизиты Цикл
			Элементы.эдиГЛНОрганизацииИмяРеквизита.СписокВыбора.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	КонецЕсли;
	 
	// Партнеры	
	Если Метаданные.Справочники.Найти("Партнеры") <> Неопределено Тогда
		Элементы.эдиПартнерИмяСправочника.СписокВыбора.Добавить("Партнеры");
	КонецЕсли;
	
	Если Метаданные.Справочники.Найти("Контрагенты") <> Неопределено Тогда
		Элементы.эдиПартнерИмяСправочника.СписокВыбора.Добавить("Контрагенты");
	КонецЕсли;
	
	Элементы.эдиПартнерИмяСправочника.СписокВыбора.Добавить("Иное", "Иное...");
	
	Если Не ПустаяСтрока(Объект.эдиПартнерИмяСправочника)
		И Элементы.эдиПартнерИмяСправочника.СписокВыбора.НайтиПоЗначению(Объект.эдиПартнерИмяСправочника) = Неопределено Тогда
		
		Элементы.эдиПартнерИмяСправочника.СписокВыбора.Добавить(Объект.эдиПартнерИмяСправочника);
		
	КонецЕсли;
	
	Элементы.эдиГЛНПартнераХранение.СписокВыбора.Добавить("ВоВнешнейБД"	, "Во внешней базе данных");
	Элементы.эдиГЛНПартнераХранение.СписокВыбора.Добавить("ВРеквизите"	, "В реквизите справочника");
	
	Если Не ПустаяСтрока(Объект.эдиПартнерИмяСправочника) Тогда
		ЗаполнитьСписокРеквизитовОбъектаМетаданных("эдиГЛНПартнераИмяРеквизита", Объект.эдиПартнерИмяСправочника);
	КонецЕсли;
	
	// Точки доставки
	Если Метаданные.Справочники.Найти("Контрагенты") <> Неопределено Тогда
		Элементы.эдиТочкаДоставкиИмяСправочника.СписокВыбора.Добавить("Контрагенты");
	КонецЕсли;
	Если Метаданные.Справочники.Найти("СоглашенияСКлиентами") <> Неопределено Тогда
		Элементы.эдиТочкаДоставкиИмяСправочника.СписокВыбора.Добавить("СоглашенияСКлиентами", "Соглашения с клиентами");
	КонецЕсли;
	Если Метаданные.Справочники.Найти("ДоговорыКонтрагентов") <> Неопределено Тогда
		Элементы.эдиТочкаДоставкиИмяСправочника.СписокВыбора.Добавить("ДоговорыКонтрагентов", "Договоры с контрагентами");
	КонецЕсли;
	Элементы.эдиТочкаДоставкиИмяСправочника.СписокВыбора.Добавить("Иное", "Иное...");
	
	Если Не ПустаяСтрока(Объект.эдиТочкаДоставкиИмяСправочника)
		И Элементы.эдиТочкаДоставкиИмяСправочника.СписокВыбора.НайтиПоЗначению(Объект.эдиТочкаДоставкиИмяСправочника) = Неопределено Тогда
		
		Элементы.эдиТочкаДоставкиИмяСправочника.СписокВыбора.Добавить(Объект.эдиТочкаДоставкиИмяСправочника);
		
	КонецЕсли;
	
	Элементы.эдиГЛНТочкиДоставкиХранение.СписокВыбора.Добавить("ВоВнешнейБД", "Во внешней базе данных");
	Элементы.эдиГЛНТочкиДоставкиХранение.СписокВыбора.Добавить("ВРеквизите"	, "В реквизите справочника");
	
	Если Не ПустаяСтрока(Объект.эдиТочкаДоставкиИмяСправочника) Тогда
		ЗаполнитьСписокРеквизитовОбъектаМетаданных("эдиГЛНТочкиДоставкиИмяРеквизита", Объект.эдиТочкаДоставкиИмяСправочника);
	КонецЕсли;
	
	// Номенклатура
	Элементы.эдиВидСопоставленияНоменклатуры.СписокВыбора.Добавить("BuyerItemCode"		, "По коду покупателя");
	Элементы.эдиВидСопоставленияНоменклатуры.СписокВыбора.Добавить("SupplierItemCode"	, "По коду поставщика");
	Элементы.эдиВидСопоставленияНоменклатуры.СписокВыбора.Добавить("EAN"				, "По штрих-коду");
	
	Элементы.эдиСпособПоискаНоменклатуры.СписокВыбора.Добавить("ВоВнешнейБД"			, "Во внешней базе данных");
	Элементы.эдиСпособПоискаНоменклатуры.СписокВыбора.Добавить("ПоРеквизиту"			, "По полю справочника ""Номенклатура""");
	Элементы.эдиСпособПоискаНоменклатуры.СписокВыбора.Добавить("ПоРегиструСведений"		, "По полю регистра сведений");
	Элементы.эдиСпособПоискаНоменклатуры.СписокВыбора.Добавить("ПоПроизвольномуЗапросу"	, "По произвольному запросу");
	
	Если Метаданные.РегистрыСведений.Найти("НоменклатураКонтрагентов") <> Неопределено Тогда
		Элементы.эдиРегистрСведенийДляПоиска.СписокВыбора.Добавить("НоменклатураКонтрагентов", "Номенклатура контрагентов");
	КонецЕсли;
	
	Элементы.эдиРегистрСведенийДляПоиска.СписокВыбора.Добавить("Иное", "Иное...");	
	
	// Документы
	Для Каждого Документ Из Метаданные.Документы Цикл
		Элементы.ИмяДокументаВМетаданных.СписокВыбора.Добавить(Документ.Имя, Документ.Синоним);		
	КонецЦикла;
	
	Элементы.ФорматПодписи.СписокВыбора.Добавить("P7S");
	Элементы.ФорматПодписи.СписокВыбора.Добавить("BIN");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеРеквизиты()
	
	Если ПустаяСтрока(Объект.эдиАдресПодключения) Тогда
		Объект.эдиАдресПодключения = "https://soap.ediweb.ru/wsedi/services/platform";
	КонецЕсли;
	Если ПустаяСтрока(Объект.эдиТипСУБД) Тогда
		Объект.эдиТипСУБД = "SQLite";
	КонецЕсли;
	Если ПустаяСтрока(Объект.эдиИмяТаблицыБД) Тогда
		Объект.эдиИмяТаблицыБД = "object_properties";
	КонецЕсли;
	Если ПустаяСтрока(Объект.эдиГЛНОрганизацииХранение) Тогда
		Объект.эдиГЛНОрганизацииХранение = "ВоВнешнейБД";
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.эдиПартнерИмяСправочника) Тогда
		
		Если Элементы.эдиПартнерИмяСправочника.СписокВыбора.НайтиПоЗначению("Партнеры") <> Неопределено Тогда
			Объект.эдиПартнерИмяСправочника = "Партнеры";
		ИначеЕсли Элементы.эдиПартнерИмяСправочника.СписокВыбора.НайтиПоЗначению("Контрагенты") <> Неопределено Тогда
			Объект.эдиПартнерИмяСправочника = "Контрагенты";
		КонецЕсли;
				
	КонецЕсли;
	
	Если Не ПустаяСтрока(Объект.эдиПартнерИмяСправочника)
		И Элементы.эдиГЛНПартнераИмяРеквизита.СписокВыбора.Количество() = 0 Тогда
		
		ЗаполнитьСписокРеквизитовОбъектаМетаданных("эдиГЛНПартнераИмяРеквизита", Объект.эдиПартнерИмяСправочника);
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.эдиТочкаДоставкиИмяСправочника) Тогда
		
		Если Элементы.эдиТочкаДоставкиИмяСправочника.СписокВыбора.НайтиПоЗначению("Контрагенты") <> Неопределено Тогда
			Объект.эдиТочкаДоставкиИмяСправочника = "Контрагенты";
		ИначеЕсли Элементы.эдиТочкаДоставкиИмяСправочника.СписокВыбора.НайтиПоЗначению("СоглашенияСКлиентами") <> Неопределено Тогда
			Объект.эдиТочкаДоставкиИмяСправочника = "СоглашенияСКлиентами";
		ИначеЕсли Элементы.эдиТочкаДоставкиИмяСправочника.СписокВыбора.НайтиПоЗначению("ДоговорыКонтрагентов") <> Неопределено Тогда
			Объект.эдиТочкаДоставкиИмяСправочника = "ДоговорыКонтрагентов";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Объект.эдиТочкаДоставкиИмяСправочника)
		И Элементы.эдиГЛНТочкиДоставкиИмяРеквизита.СписокВыбора.Количество() = 0 Тогда
		
		ЗаполнитьСписокРеквизитовОбъектаМетаданных("эдиГЛНТочкиДоставкиИмяРеквизита", Объект.эдиТочкаДоставкиИмяСправочника);
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.эдиГЛНПартнераХранение) Тогда
		Объект.эдиГЛНПартнераХранение = "ВоВнешнейБД";
	КонецЕсли;
	Если ПустаяСтрока(Объект.эдиГЛНТочкиДоставкиХранение) Тогда
		Объект.эдиГЛНТочкиДоставкиХранение = "ВоВнешнейБД";
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.эдиВидСопоставленияНоменклатуры) Тогда
		Объект.эдиВидСопоставленияНоменклатуры = "BuyerItemCode";
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.эдиСпособПоискаНоменклатуры) Тогда
		Объект.эдиСпособПоискаНоменклатуры = "ВоВнешнейБД";
	КонецЕсли;
	
	Если Объект.эдиСпособПоискаНоменклатуры = "ПоРеквизиту" Тогда
		ЗаполнитьСписокРеквизитовОбъектаМетаданных("эдиКодНоменклатурыИмяРеквизита", "Номенклатура");
	ИначеЕсли Объект.эдиСпособПоискаНоменклатуры = "ПоРегиструСведений"
		И Не ПустаяСтрока(Объект.эдиРегистрСведенийДляПоиска) Тогда
		
		ЗаполнитьСписокРеквизитовОбъектаМетаданных("эдиКодНоменклатурыИмяРеквизита", Объект.эдиРегистрСведенийДляПоиска, "РегистрыСведений");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыДокументов(ПерерисоватьНаФорме = Ложь)
	
	ОбрабокаОбъект = РеквизитФормыВЗначение("Объект");
	ОбрабокаОбъект.ЗаполнитьВидыДокументов();
	ЗначениеВРеквизитФормы(ОбрабокаОбъект, "Объект");
	
	Если ПерерисоватьНаФорме Тогда
		ОтрисоватьИнтерфейсДокументов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействиеНаСервере(ДействияРасширений)
	
	Выполнить ДействияРасширений;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеВСтрокуВнутрСервер(Значение)
	
	Если Значение = Неопределено
		ИЛИ Значение = "" Тогда 
		
		Возврат "";
		
	КонецЕсли;
	
	Возврат ЗначениеВСтрокуВнутр(Значение);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеИзСтрокиВнутрСервер(Строка)
	
	Если Строка = "" Тогда 
		Возврат ""; 
	КонецЕсли;
	
	Возврат ЗначениеИзСтрокиВнутр(Строка);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизит(Знач Ссылка, Знач ИмяРеквизита, Знач ЗначениеОшибки = Неопределено)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат ЗначениеОшибки;
	КонецЕсли;
	
	Если Ссылка.Метаданные().Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат ЗначениеОшибки;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Классификатор." + ИмяРеквизита + " КАК " + ИмяРеквизита + "
		|ИЗ
		|	Справочник." + Ссылка.Метаданные().Имя + " КАК Классификатор
		|ГДЕ
		|	Классификатор.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка" , Ссылка);
		ВыборкаРеквизита = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаРеквизита.Следующий() Тогда
			Возврат ВыборкаРеквизита[ИмяРеквизита];
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокИННОрганизаций()
	
	СписокОрганизаций = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Организации.Ссылка,
	|	Организации.ИНН
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН <> """"
	|	И НЕ Организации.ПометкаУдаления";
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаОрганизаций.Следующий() Цикл
		СписокОрганизаций.Добавить(ВыборкаОрганизаций.Ссылка, ВыборкаОрганизаций.ИНН);
	КонецЦикла;
	
	Возврат СписокОрганизаций;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьСписокРеквизитовОбъектаМетаданных(Знач ИмяОбъектаМетаданных, Знач ТипМетаданных = "Справочники")
	
	СписокРеквизитов = Новый СписокЗначений;

	Если Не ПустаяСтрока(ИмяОбъектаМетаданных)
		И Метаданные[ТипМетаданных].Найти(ИмяОбъектаМетаданных) <> Неопределено Тогда
		
		Если Найти(НРег(ТипМетаданных), "регистр") > 0 Тогда
			
			Для Каждого Измерение Из Метаданные[ТипМетаданных][ИмяОбъектаМетаданных].Измерения Цикл
				СписокРеквизитов.Добавить(Измерение.Имя, Измерение.Синоним);
			КонецЦикла;
			
			Для Каждого Ресурс Из Метаданные[ТипМетаданных][ИмяОбъектаМетаданных].Реусрсы Цикл
				СписокРеквизитов.Добавить(Ресурс.Имя, Ресурс.Синоним);
			КонецЦикла;
			
		Иначе
			
			Для Каждого СтандартныйРеквизит Из Метаданные[ТипМетаданных][ИмяОбъектаМетаданных].СтандартныеРеквизиты Цикл
				СписокРеквизитов.Добавить(СтандартныйРеквизит.Имя, СтандартныйРеквизит.Синоним);
			КонецЦикла;
			
		КонецЕсли;
			
		Для Каждого Реквизит Из Метаданные[ТипМетаданных][ИмяОбъектаМетаданных].Реквизиты Цикл
			СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокРеквизитов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокТабличныхЧастей(Знач ИмяОбъектаМетаданных, Знач ТипМетаданных = "Справочники")
	
	СписокТЧ = Новый СписокЗначений;

	Если Не ПустаяСтрока(ИмяОбъектаМетаданных)
		И Метаданные[ТипМетаданных].Найти(ИмяОбъектаМетаданных) <> Неопределено Тогда
	
		Для Каждого ТабличнаяЧасть Из Метаданные[ТипМетаданных][ИмяОбъектаМетаданных].ТабличныеЧасти Цикл
			СписокТЧ.Добавить(ТабличнаяЧасть.Имя, ТабличнаяЧасть.Синоним);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокТЧ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокРеквизитовТабличнойЧасти(Знач ИмяОбъектаМетаданных, Знач ТипМетаданных = "Справочники", Знач ИмяТЧ)
	
	СписокРеквизитовТЧ = Новый СписокЗначений;

	Если Не ПустаяСтрока(ИмяОбъектаМетаданных)
		И Не ПустаяСтрока(ИмяТЧ)
		И Метаданные[ТипМетаданных].Найти(ИмяОбъектаМетаданных) <> Неопределено Тогда
		
		Для Каждого РеквизитТЧ Из Метаданные[ТипМетаданных][ИмяОбъектаМетаданных].ТабличныеЧасти[ИмяТЧ].Реквизиты Цикл
			СписокРеквизитовТЧ.Добавить(РеквизитТЧ.Имя, РеквизитТЧ.Синоним);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокРеквизитовТЧ;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДополнитьПутьСправа(Знач Путь)
	
	ДополненныйПуть = Путь;
	Если Найти(ДополненныйПуть, "\") > 0 Тогда
		ДополненныйПуть = ДополненныйПуть + ?(Прав(ДополненныйПуть, 1) = "\", "", "\");
	ИначеЕсли Найти(ДополненныйПуть, "/") > 0 Тогда
		ДополненныйПуть = ДополненныйПуть + ?(Прав(ДополненныйПуть, 1) = "/", "", "/");
	КонецЕсли;
	
	Возврат ДополненныйПуть;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьДрайверSQLite(Знач ДвоичныеДанные)
	
	ИнфоОСистеме = Новый СистемнаяИнформация;
	Если ИнфоОСистеме.ТипПлатформы = ТипПлатформы.Windows_x86 
		Или  ИнфоОСистеме.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		
		ИмяПриложения = ДополнитьПутьСправа(КаталогВременныхФайлов()) + "SQLite.exe";
		ДвоичныеДанные.Записать(ИмяПриложения);
		
		ЗапуститьПриложение(ИмяПриложения);
		
	Иначе
		Возврат НСтр("ru = 'Операционная система не поддерживается.'");
	КонецЕсли;

	Возврат "";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьШаблонСтруктурыНастроек(ТолькоНастройкиБД = Ложь)
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("эдиТипСУБД");
	СтруктураНастроек.Вставить("эдиКаталогБД");
	СтруктураНастроек.Вставить("эдиСерверБД");
	СтруктураНастроек.Вставить("эдиПортБД");
	СтруктураНастроек.Вставить("эдиИмяБД");
	СтруктураНастроек.Вставить("эдиИмяТаблицыБД");
	СтруктураНастроек.Вставить("эдиПользовательБД");
	СтруктураНастроек.Вставить("эдиПарольБД");
	СтруктураНастроек.Вставить("эдиПутьВключаетБД");
	
	Если ТолькоНастройкиБД Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	СтруктураНастроек.Вставить("эдиАдресПодключения");
	СтруктураНастроек.Вставить("эдиЛогин");
	СтруктураНастроек.Вставить("эдиПароль");
	
	СтруктураНастроек.Вставить("эдиИспользоватьПрокси");
	СтруктураНастроек.Вставить("эдиПроксиСервер");
	СтруктураНастроек.Вставить("эдиПроксиПорт");
	СтруктураНастроек.Вставить("эдиПроксиЛогин");
	СтруктураНастроек.Вставить("эдиПроксиПароль");
	
	СтруктураНастроек.Вставить("эдиТекущийПрофиль");
	СтруктураНастроек.Вставить("эдиОбработкаДляСети");
	СтруктураНастроек.Вставить("эдиВыполнятьПопыткуПроведения");
	
	СтруктураНастроек.Вставить("эдиГЛНОрганизацииХранение");
	СтруктураНастроек.Вставить("эдиГЛНОрганизацииИмяРеквизита");
	
	СтруктураНастроек.Вставить("эдиПартнерИмяСправочника");
	СтруктураНастроек.Вставить("эдиГЛНПартнераХранение");
	СтруктураНастроек.Вставить("эдиИННПартнераХранение");
	СтруктураНастроек.Вставить("эдиFNSIDПартнераХранение");
	СтруктураНастроек.Вставить("эдиГЛНПартнераИмяРеквизита");
	СтруктураНастроек.Вставить("эдиИННПартнераИмяРеквизита");
	СтруктураНастроек.Вставить("эдиFNSIDПартнераИмяРеквизита");
	
	СтруктураНастроек.Вставить("эдиТочкаДоставкиИмяСправочника");
	СтруктураНастроек.Вставить("эдиГЛНТочкиДоставкиХранение");
	СтруктураНастроек.Вставить("эдиГЛНТочкиДоставкиИмяРеквизита");
	
	СтруктураНастроек.Вставить("эдиВидСопоставленияНоменклатуры");
	СтруктураНастроек.Вставить("эдиСпособПоискаНоменклатуры");
	СтруктураНастроек.Вставить("эдиРегистрСведенийДляПоиска");
	СтруктураНастроек.Вставить("эдиКодНоменклатурыИмяРеквизита");
	СтруктураНастроек.Вставить("эдиЗапросПоискаНоменклатуры");
	
	СтруктураНастроек.Вставить("эдиСписокВходящих");
	СтруктураНастроек.Вставить("эдиСписокИсходящих");
	СтруктураНастроек.Вставить("эдиОписаниеДокументов");
	
	СтруктураНастроек.Вставить("эдиИспользоватьПодписание");
	СтруктураНастроек.Вставить("эдиСертификат");
	СтруктураНастроек.Вставить("эдиКлючСертификата");
	СтруктураНастроек.Вставить("эдиФамилияПодписанта");
	СтруктураНастроек.Вставить("эдиИмяПодписанта");
	СтруктураНастроек.Вставить("эдиОтчествоПодписанта");
	СтруктураНастроек.Вставить("эдиОбластьПолномочий");
	
	СтруктураНастроек.Вставить("эдиКаталогРасширений");
	СтруктураНастроек.Вставить("эдиСписокПодключенныхРасширений");
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПоУмолчанию(Команда)
	ЕстьСопоставление 	= Объект.эдиОписаниеДокументов.Свойство(ИмяРеляции);
	Если ЕстьСопоставление Тогда
		Объект.эдиОписаниеДокументов.Удалить(ИмяРеляции);	
	КонецЕсли;
	ЗаполнитьРеквизитыДокумента(ИмяРеляции);
КонецПроцедуры


#КонецОбласти
