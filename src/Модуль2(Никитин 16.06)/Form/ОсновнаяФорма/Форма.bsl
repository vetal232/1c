&НаКлиенте
Перем РаботаСSOAP Экспорт;
&НаКлиенте
Перем РаботаСВнешнейБД Экспорт;
&НаКлиенте
Перем РаботаСXML Экспорт;
&НаКлиенте
Перем РаботаСРасширениями Экспорт;
&НаКлиенте
Перем РаботаСПодписанием Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	эдиРежимПервогоЗапуска 			= Не ВосстановитьНастройкиИзХранилищаНастроек();
	Объект.эдиОписаниеДокументов 	= Новый Структура;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПолучитьФормы();
	Если эдиРежимПервогоЗапуска Тогда
		
		ОтборПериод.ДатаНачала 		= ДобавитьМесяц(ТекущаяДата(), -2);
		ОтборПериод.ДатаОкончания 	= ТекущаяДата();
		
		ПодключитьОбработчикОжидания("ОткрытьМастерНастроек", 0.1, Истина);
		
	Иначе
		
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("ТипВнешнейБД"			, Объект.эдиТипСУБД);
		СтруктураНастроек.Вставить("ПутьВключаетБД"			, Объект.эдиПутьВключаетБД);
		СтруктураНастроек.Вставить("ПутьВнешнейБД"			, Объект.эдиКаталогБД);
		СтруктураНастроек.Вставить("ИмяВнешнейБД"			, Объект.эдиИмяБД);
		СтруктураНастроек.Вставить("ИмяТаблицыВнешнейБД"	, Объект.эдиИмяТаблицыБД);
		СтруктураНастроек.Вставить("СерверВнешнейБД"		, Объект.эдиСерверБД);
		СтруктураНастроек.Вставить("ПортВнешнейБД"			, Объект.эдиПортБД);
		СтруктураНастроек.Вставить("ПользовательВнешнейБД"	, Объект.эдиПользовательБД);
		СтруктураНастроек.Вставить("ПарольВнешнейБД"		, Объект.эдиПарольБД);
		
		РаботаСВнешнейБД.Инициализировать(СтруктураНастроек);	
		
		ВосстановитьНастройки();
		ЗаполнитьВидыДокументов();
		ЗаполнитьТаблицыФормы();
		ИнициализироватьФормы();
		ЗаполнитьСпискиОтборов();
		
		Если Не ПустаяСтрока(Объект.эдиПартнерИмяСправочника) Тогда
			Элементы.ОтборКонтрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + Объект.эдиПартнерИмяСправочника);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовФормы

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	
	ОтборыСтрокДокументов("ХранениеДокумента", ОтборСтатус);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
	
	ОтборыСтрокДокументов("ТипДокумента", ОтборТипДокумента);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	
	ОтборыСтрокДокументов("Партнер", ОтборПартнер);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНеПоказыватьЗавершенныеПриИзменении(Элемент)
	
	ОтборыСтрокДокументов("Завершен", ?(ОтборНеПоказыватьЗавершенные, Ложь, Неопределено));	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Найти(Поле.Имя, "ФлагВыбора") > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка 	= Ложь;
	ТекущиеДанные 			= Элементы.Документы.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.СозданныйДокумент) Тогда
		ПоказатьЗначение(, ТекущиеДанные.СозданныйДокумент);
	Иначе
		ОбработатьВходящийДокумент(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Настройки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыНастроек", ЭтотОбъект, Новый Структура);
	ОткрытьФорму("ВнешняяОбработка.EDISOFT.Форма.ФормаНастроек", Новый Структура("СтруктураНастроек", ПолучитьСтруктуруНастроек()), ЭтаФорма, , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	СтрокиЭДО = ТаблицаДокументов.НайтиСтроки(Новый Структура("ФлагВыбора", Истина));
	Для Каждого СтрокаДокумента Из СтрокиЭДО Цикл
		
		Если СтрокаДокумента.ХранениеДокумента = 0
			Или СтрокаДокумента.ХранениеДокумента = 2 Тогда
			
			ОбработатьВходящийДокумент(СтрокаДокумента, Ложь);
			
		ИначеЕсли СтрокаДокумента.ХранениеДокумента = 1 Тогда
			
			ДвоичныеДанные = СоздатьЭДО(СтрокаДокумента.ТипДокумента, СтрокаДокумента.СозданныйДокумент);	
			Если ДвоичныеДанные = Неопределено Тогда
				
				Сообщить(НСтр("ru = 'Не удалось выгрузить документ " + Строка(СтрокаДокумента.СозданныйДокумент) + "'"));
				Возврат;
				
			КонецЕсли;
			
			Base64Документа 	= Base64Строка(ДвоичныеДанные);
			//ВФ(*)
			ПараметрыОтправки 	= РаботаСSOAP.SendBinary(СтрокаДокумента.ГЛНПартнера, СтрокаДокумента.ТипДокумента, СтрокаДокумента.ТипДокумента + Строка(СтрокаДокумента.СозданныйДокумент.УникальныйИдентификатор()) + ".xml", Base64Документа);
			Если Не ПараметрыОтправки.Результат Тогда
				
				Сообщить(НСтр("ru = 'Не удалось отправить документ " + Строка(СтрокаДокумента.СозданныйДокумент) + " по причине:" + Символы.ПС + ПараметрыОтправки.СообщениеОшибки + "'"));
				Возврат;
				
			КонецЕсли;
			//ВФ(**)
			СтрокаДокумента.ХранениеДокумента = 3;
			
			ПараметрыЗаписи = РаботаСВнешнейБД.ЭДИ_Записать(СтрокаДокумента.СозданныйДокумент, СтрокаДокумента.ГЛНПартнера, СтрокаДокумента.ТипДокумента, , , , , , , Base64Документа, , );
			Если Не ПараметрыЗаписи.Результат Тогда
				
				Сообщить(НСтр("ru = 'Документ " + Строка(СтрокаДокумента.СозданныйДокумент) + " отправлен, но изменения не были сохранены. Причина:" + Символы.ПС + ПараметрыЗаписи.Сообщение + "'"));
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ТаблицаДокументов.Очистить();
	
	Для Каждого ЭлементСписка Из Объект.эдиСписокВходящих Цикл
		
		Если Не ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ГЛНПартнера = "";
		Если ЗначениеЗаполнено(ОтборПартнер) Тогда
			
			СтрокиПартнера = ТаблицаПартнеров.НайтиСтроки(Новый Структура("Партнер", ОтборПартнер));
			Если СтрокиПартнера.Количество() > 0 Тогда
				ГЛНПартнера = СтрокиПартнера[0].GLN;
			КонецЕсли;
			
		КонецЕсли;
		
		ОтветПлатформы = РаботаСSOAP.ListMBex(ЭлементСписка.Значение, ГЛНПартнера,
												?(ЗначениеЗаполнено(ОтборПериод.ДатаНачала), ОтборПериод.ДатаНачала, Неопределено),
												?(ЗначениеЗаполнено(ОтборПериод.ДатаОкончания), ОтборПериод.ДатаОкончания, Неопределено));
												
		Если ОтветПлатформы.Результат Тогда
		
			МассивДокументов = РаботаСXML.ПолучитьМассивДокументов(ОтветПлатформы.ТекстXML);
			Для Каждого ВходящийДокумент Из МассивДокументов Цикл
				
				СтрокаДокумента 				= ТаблицаДокументов.Добавить();
				СтрокаДокумента.ТипДокумента 	= ЭлементСписка.Значение;
				СтрокаДокумента.Входящий 		= Истина;
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, ВходящийДокумент);
				
				Если Не ПустаяСтрока(СтрокаДокумента.ГЛНПартнера) Тогда
					СтрокаДокумента.Партнер = НайтиПартнераПоГЛН(СтрокаДокумента.ГЛНПартнера);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыДокументов = РаботаСВнешнейБД.ЭДИ_ПрочитатьСвойства(Неопределено, Неопределено, ЭлементСписка.Значение, , , , , , , , , 1, , );
		Если ПараметрыДокументов.Результат Тогда
			
			Для Каждого Документ Из ПараметрыДокументов.Содержимое Цикл
				
				СтрокаТаблицы 						= ТаблицаДокументов.Добавить();
				СтрокаТаблицы.ТипДокумента 			= ЭлементСписка.Значение;
				СтрокаТаблицы.НомерДокумента 		= Документ.Значение.Индекс3;
				СтрокаТаблицы.ДатаДокумента 		= ЗначениеИзСтрокиВнутрСервер(Документ.Значение.Индекс4);
				СтрокаТаблицы.ХранениеДокумента 	= ?(ПустаяСтрока(Документ.Значение.Объект), 2, 4);
				СтрокаТаблицы.ГЛНПартнера 			= ЗначениеИзСтрокиВнутрСервер(Документ.Значение.Владелец);
				СтрокаТаблицы.Партнер 				= НайтиПартнераПоГЛН(СтрокаТаблицы.ГЛНПартнера);
				СтрокаТаблицы.СозданныйДокумент 	= ЗначениеИзСтрокиВнутрСервер(Документ.Значение.Объект);
				СтрокаТаблицы.ИдентификаторЗаписи 	= Документ.Значение.Индекс;
				СтрокаТаблицы.ТрекНомер				= Документ.Значение.Индекс2;
				СтрокаТаблицы.Входящий 				= Истина;
				СтрокаТаблицы.Завершен 				= СтрокаТаблицы.ХранениеДокумента = 4;				
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДатаНачала 		= НачалоДня(?(ЗначениеЗаполнено(ОтборПериод.ДатаНачала), ОтборПериод.ДатаНачала, ДобавитьМесяц(ТекущаяДата(), -2)));
	ДатаОкончания 	= КонецДня(?(ЗначениеЗаполнено(ОтборПериод.ДатаОкончания), ОтборПериод.ДатаОкончания, ДобавитьМесяц(ТекущаяДата(), 1)));
	
	Для Каждого ЭлементСписка Из Объект.эдиСписокИсходящих Цикл
		
		Если Не ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураРазбораДокумента = Неопределено;
		Если Не Объект.эдиОписаниеДокументов.Свойство(ЭлементСписка.Значение, СтруктураРазбораДокумента) Тогда
			
			Сообщить(НСтр("ru = 'Отсутствуют настройки сопоставления документов " + ЭлементСписка.Значение + "'"));
			Продолжить;
			
		КонецЕсли;		
		
		МассивДокументов = ПолучитьМассивДокументовИнформационнойБазы(СтруктураРазбораДокумента.ОбъектМетаданных, Объект.эдиПартнерИмяСправочника, ДатаНачала, ДатаОкончания, ПолучитьОрганизацииСервер());
		ЗаполнитьGLNПартнераВМассивеДокументов(МассивДокументов);
		
		ПараметрыСозданныхДокументов = РаботаСВнешнейБД.ЭДИ_ПрочитатьСвойства(Неопределено, Неопределено, ЭлементСписка.Значение, , , , , , , , , 1, , );
		
		МассивСозданныхДокументов = Новый Массив;
		Если ПараметрыСозданныхДокументов.Результат Тогда
			
			Для Каждого СозданныйДокумент Из ПараметрыСозданныхДокументов.Содержимое Цикл
				МассивСозданныхДокументов.Добавить(ЗначениеИзСтрокиВнутрСервер(СозданныйДокумент.Значение.Объект));
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого Документ Из МассивДокументов Цикл
			
			СтрокаДокумента 				= ТаблицаДокументов.Добавить();
			СтрокаДокумента.ТипДокумента 	= ЭлементСписка.Значение;
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, Документ);
						
			СтрокаДокумента.ХранениеДокумента 	= ?(МассивСозданныхДокументов.Найти(СтрокаДокумента.СозданныйДокумент) <> Неопределено, 3, 1);
			СтрокаДокумента.Завершен 			= СтрокаДокумента.ХранениеДокумента = 3;

		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВходящийДокумент(СтрокаДокумента, ТолькоПросмотр = Истина)
	
	ТипДокумента 		= Объект.эдиСписокВходящих.НайтиПоЗначению(СтрокаДокумента.ТипДокумента);
	ПредставлениеТипа 	= ?(ТипДокумента = Неопределено, "", ТипДокумента.Представление);
	Если СтрокаДокумента.ХранениеДокумента = 0 Тогда
		
		ЗапросДокумента = РаботаСSOAP.ReceiveBinary(СтрокаДокумента.ГЛНПартнера, СтрокаДокумента.ТипДокумента, СтрокаДокумента.ТрекНомер);
		
		Если Не ЗапросДокумента.Результат Тогда
								
			Сообщить(НСтр("ru = 'Не удалось загрузить документ " + ПредставлениеТипа + " №" + СтрокаДокумента.НомерДокумента + " от " +
							Формат(СтрокаДокумента.ДатаДокумента, "ДФ=dd.MM.yyyy") + "." + Символы.ПС + ЗапросДокумента.СообщениеОшибки + "'"));
			Возврат;
			
		КонецЕсли;
		
		Если ТипЗнч(ЗапросДокумента.ТекстXML.Data) = Тип("ДвоичныеДанные") Тогда
			ЗапросДокумента.ТекстXML.Data = Base64Строка(ЗапросДокумента.ТекстXML.Data);
		КонецЕсли;
		
		СохранениеДокумента = РаботаСВнешнейБД.ЭДИ_Записать(Неопределено, СтрокаДокумента.ГЛНПартнера, СтрокаДокумента.ТипДокумента, , ЗапросДокумента.ТекстXML.Name, 
																СтрокаДокумента.ТрекНомер, СтрокаДокумента.НомерДокумента, ЗначениеВСтрокуВнутрСервер(СтрокаДокумента.ДатаДокумента), , ЗапросДокумента.ТекстXML.Data, , );
		Если Не СохранениеДокумента.Результат Тогда
			
			Сообщить(НСтр("ru = 'Не удалось сохранить документ " + ПредставлениеТипа + " №" + СтрокаДокумента.НомерДокумента + " от " +
							Формат(СтрокаДокумента.ДатаДокумента, "ДФ=dd.MM.yyyy") + "." + Символы.ПС + СохранениеДокумента.Сообщение + "'"));
			Возврат;
			
		КонецЕсли;
		
		СтрокаДокумента.ХранениеДокумента 	= 2;
		СтрокаДокумента.ИдентификаторЗаписи = СохранениеДокумента.ЗапросЗаписанногоСвойства.ИндексЗаписи;
		
		ИмяФайла 		= ЗапросДокумента.ТекстXML.Name;
		Base64Документа = Base64Значение(ЗапросДокумента.ТекстXML.Data);
		
	Иначе
		
		ЗапросДокумента = РаботаСВнешнейБД.ЭДИ_Прочитать(Неопределено, СтрокаДокумента.ГЛНПартнера, СтрокаДокумента.ТипДокумента, , , СтрокаДокумента.ТрекНомер, СтрокаДокумента.НомерДокумента, ЗначениеВСтрокуВнутрСервер(СтрокаДокумента.ДатаДокумента));
		Если Не ЗапросДокумента.Результат Тогда
			
			Сообщить(НСтр("ru = 'Не удалось прочитать документ " + ПредставлениеТипа + " №" + СтрокаДокумента.НомерДокумента + " от " +
							Формат(СтрокаДокумента.ДатаДокумента, "ДФ=dd.MM.yyyy") + "." + Символы.ПС + ЗапросДокумента.Сообщение + "'"));
							
		КонецЕсли;
		
		ИмяФайла 		= ЗапросДокумента.Содержимое.Индекс1;
		Base64Документа = Base64Значение(ЗапросДокумента.Содержимое.Данные);
		
	КонецЕсли;
	
	Если Не ТолькоПросмотр Тогда
		СоздатьДокумент(СтрокаДокумента.ТипДокумента, Base64Документа, ИмяФайла);
	Иначе
		ОткрытьФорму("ВнешняяОбработка.EDISOFT.Форма.ФормаРедактированияТабличныхЧастей");
	КонецЕсли;
			
КонецПроцедуры

//ВФ(*)
&НаСервере
Функция ПолучитьПартнёровСервер(ОбъектМетаданных)
	ОбрабокаОбъект = РеквизитФормыВЗначение("Объект");
	ТаблицаПартнеровОбъект = РеквизитФормыВЗначение("ТаблицаПартнеров");
	МасПарт = ТаблицаПартнеровОбъект.ВыгрузитьКолонку("Партнер");
	Если ОбрабокаОбъект.эдиПартнерИмяСправочника = "Контрагенты" Тогда
		Возврат МасПарт;
	ИначеЕсли ОбрабокаОбъект.эдиПартнерИмяСправочника = "Партнеры" Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Контрагенты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Партнер В(&Контрагенты)";
		
		Запрос.УстановитьПараметр("Контрагенты", МасПарт);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Мас = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
		Возврат Мас;
	КонецЕсли;	
КонецФункции

&НаСервере
Функция ПолучитьОрганизацииСервер()
	ТаблицаОрганизацийОбъект = РеквизитФормыВЗначение("ТаблицаОрганизаций");
	Мас = ТаблицаОрганизацийОбъект.ВыгрузитьКолонку("Организация");
	Возврат Мас;	
КонецФункции
//ВФ(**)

#КонецОбласти

#Область РаботаСДокументами

&НаКлиенте
Функция СоздатьДокумент(Знач ТипДокумента, Знач ДвоичныеДанныеДокумента, Знач ИмяДокумента)
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + ИмяДокумента;
	ДвоичныеДанныеДокумента.Записать(ИмяВременногоФайла);
	
	Файл = Новый Файл(ИмяВременногоФайла);
	Если Файл.Существует() Тогда
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяВременногоФайла, "UTF-8");
		
		ТекстXML = ТекстовыйДокумент.ПолучитьТекст();
		УдалитьФайлы(ИмяВременногоФайла);
		
	Иначе
		
		Сообщить(НСтр("ru = 'Ошибка файловой операции.'"));
		Возврат Неопределено;
	
	КонецЕсли;
	
	XSDСхема = ПолучитьXSDСхемуДокумента(ТипДокумента);
	Если ПустаяСтрока(XSDСхема) Тогда
		
		Сообщить(НСтр("ru = 'Отсутствует XSD-схема для типа документов " + ТипДокумента + "'"));
		Возврат Неопределено;
		
	КонецЕсли;
	
	СтруктураРазбораДокумента = Неопределено;
	Если Не Объект.эдиОписаниеДокументов.Свойство(ТипДокумента, СтруктураРазбораДокумента) Тогда
		
		Сообщить(НСтр("ru = 'Отсутствуют настройки сопоставления документов " + ТипДокумента + "'"));
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Не СтруктураРазбораДокумента.Свойство("ОбъектМетаданных")
		Или ПустаяСтрока(СтруктураРазбораДокумента.ОбъектМетаданных) Тогда
		
		Сообщить(НСтр("ru = 'Не указан документ конфигурации для сопоставления документам " + ТипДокумента + "'"));
		Возврат Неопределено;
		
	КонецЕсли;
	
	СтруктураВозврата = ЗагрузитьДокументПоXML(ТипДокумента, ПреобразоватьXMLВНотацию1С(ТекстXML), ПреобразоватьXMLВНотацию1С(XSDСхема), СтруктураРазбораДокумента, 0);
	Если Не ТолькоПросмотр Тогда
		
		Если СтруктураВозврата.ЗагруженБезОшибок = Ложь Тогда
			ОткрытьРедактированиеТаблицы(СтруктураВозврата);
		Иначе
			Возврат СтруктураВозврата.Документ;
		КонецЕсли;
		
	Иначе
		
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция СоздатьЭДО(Знач ТипДокумента, Знач СсылкаНаДокумент)
	
	XSDСхема = ПолучитьXSDСхемуДокумента(ТипДокумента);
	Если ПустаяСтрока(XSDСхема) Тогда
		
		Сообщить(НСтр("ru = 'Отсутствует XSD-схема для типа документов " + ТипДокумента + "'"));
		Возврат Неопределено;
		
	КонецЕсли;
	
	СтруктураРазбораДокумента = Неопределено;
	Если Не Объект.эдиОписаниеДокументов.Свойство(ТипДокумента, СтруктураРазбораДокумента) Тогда
		
		Сообщить(НСтр("ru = 'Отсутствуют настройки сопоставления документов " + ТипДокумента + "'"));
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Не СтруктураРазбораДокумента.Свойство("ОбъектМетаданных")
		Или ПустаяСтрока(СтруктураРазбораДокумента.ОбъектМетаданных) Тогда
		
		Сообщить(НСтр("ru = 'Не указан документ конфигурации для сопоставления документам " + ТипДокумента + "'"));
		Возврат Неопределено;
		
	КонецЕсли;
	
	ТекстXML = ПолучитьXMLВыгружаемогоДокумента(ТипДокумента, СтруктураРазбораДокумента, СсылкаНаДокумент, ПреобразоватьXMLВНотацию1С(XSDСхема));
	Если ТекстXML = Неопределено
		Или ПустаяСтрока(ТекстXML) Тогда
		
		Сообщить(НСтр("ru = 'Ошибка формирования XML.'"));
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИмяФайла = ТипДокумента + Строка(СсылкаНаДокумент.УникальныйИдентификатор()) + ".xml";
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстXML);
	ТекстовыйДокумент.Записать(КаталогВременныхФайлов() + ИмяФайла, "UTF-8");
	
	Файл = Новый Файл(КаталогВременныхФайлов() + ИмяФайла);
	Если Не Файл.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//13.06 Никитин
	ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
	
	Если СтруктураРазбораДокумента.ТребуетсяПодписание Тогда
		
		СписокОпций = Новый СписокЗначений;
		ОпцииПодписания = РаботаСПодписанием.ПолучитьОпцииПодписания();
		ОпцииПодписания.ТипПодписи = СтруктураРазбораДокумента.ФорматПодписи;		
		ОпцииПодписания.ОтпечатокСеритфиката = СтрЗаменить(Объект.эдиСертификат," ","");//Base64Значение()
		ОпцииПодписания.ПарольККлючуСертификата = Объект.эдиКлючСертификата;
		СписокОпций.Добавить(ОпцииПодписания);
		Файл = РаботаСПодписанием.ПолучитьАрхивСПодписью(ДвоичныеДанные, ИмяФайла, СписокОпций, Истина, Ложь);
		
		Если Файл.Результат Тогда
			ДвоичныеДанные = Файл.Содержимое;
		Иначе
			Сообщить(Файл.Сообщение);
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		УдалитьФайлы(Файл.ПолноеИмя);
		
	КонецЕсли;
	//
	
	
	Возврат ДвоичныеДанные;
	
КонецФункции

&НаСервере
Функция ПолучитьXSDСхемуДокумента(Знач ТипДокумента)
	
	Попытка
		МакетXSD = РеквизитФормыВЗначение("Объект").ПолучитьМакет("XSD_" + ТипДокумента);
	Исключение
		Возврат "";
	КонецПопытки;
	
	Возврат МакетXSD.ПолучитьТекст();
	
КонецФункции

&НаСервере
Функция ЗагрузитьДокументПоXML(Знач ТипДокумента, Знач ТекстXML, Знач ТекстXSD, Знач СтруктураРазбора, Знач СтатусДокумента)
	
	ЧтениеСхема = Новый ЧтениеXML;
	ЧтениеСхема.УстановитьСтроку(ТекстXSD);
	
	ПостроительДом 	= Новый ПостроительDOM;
	ДокументДом 	= ПостроительДом.Прочитать(ЧтениеСхема);
	ПостроительСхем = Новый ПостроительСхемXML;
	СхемаДокумента 	= ПостроительСхем.СоздатьСхемуXML(ДокументДом); 
	
	НаборСхем = Новый НаборСхемXML;
	НаборСхем.Добавить(СхемаДокумента);
	
	ФабрикаДокумента = Новый ФабрикаXDTO(НаборСхем);
	
	ЧтениеДокумент = Новый ЧтениеXML;
	ЧтениеДокумент.УстановитьСтроку(ТекстXML);
	
	Попытка
		СтруктураДокумента = ФабрикаДокумента.ПрочитатьXML(ЧтениеДокумент);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если СтатусДокумента = 0 И ТипДокумента = "RECADV" Тогда
		
		Контрагент 	= ПреобразоватьРеквизитДляЗагрузки("Buyer", СтруктураДокумента.ReceivingAdvice_Parties.Buyer);
		Организация = ПреобразоватьРеквизитДляЗагрузки("Seller", СтруктураДокумента.ReceivingAdvice_Parties.Seller);
		
		Попытка
			
			Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Партнеры") Тогда
				РольКонтрагентаВыполняет = "Партнер";
			Иначе
				РольКонтрагентаВыполняет = "Контрагент";
			КонецЕсли;
			
		Исключение
			
			РольКонтрагентаВыполняет = "Контрагент";
			
		КонецПопытки;
		
		document_date 	= ПреобразоватьДатуИзXML(СтруктураДокумента.ReceivingAdvice_Header.ReceivingAdviceDate);//Тег с датой документа
		document_number = СтруктураДокумента.ReceivingAdvice_Header.DespatchNumber;
		ДокументОбъект 	= НайтиРеализацию(document_number, document_date, Контрагент, РольКонтрагентаВыполняет, Организация);
		
		Если ЗначениеЗаполнено(ДокументОбъект) = Ложь Тогда
			
			Сообщить("Не найдена реализация с номером" + document_number + " от " + document_date);
			Возврат Неопределено;
			
		КонецЕсли;
		
	Иначе
		ДокументОбъект = Документы[СтруктураРазбора.ОбъектМетаданных].СоздатьДокумент();
	КонецЕсли;
	
	ТаблицаЗамены = Новый ТаблицаЗначений;
	ПолучитьКолонкиТабличнойЧасти(СтруктураРазбора.Данные, ТаблицаЗамены);
	
	ЗагруженБезОшибок = Истина;
	Для Каждого КлючИЗначение Из СтруктураРазбора.Данные Цикл
		
		Если КлючИЗначение.Значение.НеИспользовать Тогда
			Продолжить;
		КонецЕсли;
		
		Если КлючИЗначение.Значение.Свойство("РеквизитыТабличнойЧасти") Тогда			
			
			Таблица 			= ПолучитьЗначениеТэга(СтруктураДокумента, КлючИЗначение.Ключ);
			ИмяТабличнойЧасти 	= КлючИЗначение.Значение.ИмяРеквизита;
			Если ТипЗнч(Таблица.Line) = Тип("ОбъектXDTO") Тогда
				
				СтрокаТоваров 	= ТаблицаЗамены.Добавить();
				СтрокаЗаказа 	= Таблица.Line.Line_Item;
				
				СтрокаТоваров.Номенклатура = НайтиВТаблицеНаСервере(СтрокаЗаказа[Объект.эдиВидСопоставленияНоменклатуры], "ТаблицаНоменклатуры", "КодНоменклатуры", "Номенклатура");
				Если ЗначениеЗаполнено(СтрокаТоваров.Номенклатура) Тогда
					СтрокаТоваров.СтавкаНДС = СтрокаТоваров.Номенклатура.СтавкаНДС;
				Иначе
					ЗагруженБезОшибок = Ложь;
				КонецЕсли;
				
				Попытка
					СтрокаТоваров.Описание 	= СтрокаЗаказа.ItemDescription;
					СтрокаТоваров.ЕдИзм 	= СтрокаЗаказа.UnitOfMeasure;
				Исключение
				КонецПопытки;
				
				Если ТипДокумента = "RECADV" Тогда
					
					Если СтрокаЗаказа.QuantityReceived <> СтрокаЗаказа.QuantityOrdered Тогда
						 ЗагруженБезОшибок = Ложь;
					КонецЕсли;
					 
				КонецЕсли;

				Для Каждого РеквизитТабличнойЧасти Из КлючИЗначение.Значение.РеквизитыТабличнойЧасти Цикл
					
					Если РеквизитТабличнойЧасти.Значение.НеИспользовать Тогда
						Продолжить;
					КонецЕсли;
					
					Значение = ПолучитьЗначениеТэга(СтрокаЗаказа, РеквизитТабличнойЧасти.Ключ);
					СтрокаТоваров[РеквизитТабличнойЧасти.Значение.ИмяРеквизита] = ПреобразоватьРеквизитДляЗагрузки(РеквизитТабличнойЧасти.Ключ, Значение);
					
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(Таблица.Line) = Тип("СписокXDTO") Тогда
				Для Каждого СтрокаЗаказа Из Таблица.Line Цикл
					
					СтрокаТоваров 				= ТаблицаЗамены.Добавить();
					СтрокаЗаказа 				= СтрокаЗаказа.Line_Item;
					СтрокаТоваров.Номенклатура 	= НайтиВТаблицеНаСервере(СтрокаЗаказа[Объект.эдиВидСопоставленияНоменклатуры], "ТаблицаНоменклатуры", "КодНоменклатуры", "Номенклатура");
					
					Если ЗначениеЗаполнено(СтрокаТоваров.Номенклатура) Тогда
						СтрокаТоваров.СтавкаНДС = СтрокаТоваров.Номенклатура.СтавкаНДС;
					Иначе
						ЗагруженБезОшибок = Ложь;
					КонецЕсли;
					
					Попытка
						СтрокаТоваров.Описание = СтрокаЗаказа.ItemDescription;
						СтрокаТоваров.ЕдИзм = СтрокаЗаказа.UnitOfMeasure;
					Исключение
					КонецПопытки;
					
					Для Каждого РеквизитТабличнойЧасти Из КлючИЗначение.Значение.РеквизитыТабличнойЧасти Цикл
						
						Если РеквизитТабличнойЧасти.Значение.НеИспользовать Тогда
							Продолжить;
						КонецЕсли;
						
						Значение = ПолучитьЗначениеТэга(СтрокаЗаказа, РеквизитТабличнойЧасти.Ключ);
						Попытка
							СтрокаТоваров[РеквизитТабличнойЧасти.Значение.ИмяРеквизита] = ПреобразоватьРеквизитДляЗагрузки(РеквизитТабличнойЧасти.Ключ, Значение);
						Исключение
						КонецПопытки;
						
					КонецЦикла;				
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			Значение = ПолучитьЗначениеТэга(СтруктураДокумента, КлючИЗначение.Ключ);
			Если ТипЗнч(Значение) = Тип("ОбъектXDTO")
				Или ТипЗнч(Значение) = Тип("СвойствоXDTO") Тогда
				
				ДокументОбъект[КлючИЗначение.Значение.ИмяРеквизита] = ПреобразоватьРеквизитДляЗагрузки(КлючИЗначение.Ключ, Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗагруженБезОшибок = Истина И ТипДокумента <> "RECADV" Тогда
		
		Для каждого СтрокаЗамены Из ТаблицаЗамены Цикл 
			
			СтрокаДокумента = ДокументОбъект[КлючИЗначение.Значение.ИмяРеквизита].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаЗамены);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЗагруженБезОшибок"	,ЗагруженБезОшибок);
	СтруктураВозврата.Вставить("Документ"			,ДокументОбъект.Ссылка);
	СтруктураВозврата.Вставить("ТабЗнач"			,ЗначениеВСтрокуВнутрСервер(ТаблицаЗамены));
	СтруктураВозврата.Вставить("ИмяТабличнойЧасти"	,ИмяТабличнойЧасти);
	
	Если ТипДокумента <> "RECADV" Тогда
		
		ЗаполнитьСтандартныеРеквизитыПередЗагрузкой(ТипДокумента, ДокументОбъект);
		Если Объект.эдиВыполнятьПопыткуПроведения Тогда
			
			Попытка
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				СтруктураВозврата.Документ = ДокументОбъект.Ссылка;
				Возврат СтруктураВозврата;
				
			Исключение
				
				Сообщить("Не удалось провести документ" + ТипДокумента);
				ДокументОбъект.Записать();
				
				СтруктураВозврата.Документ = ДокументОбъект.Ссылка;
				
			КонецПопытки;
			
		Иначе
			
			Попытка
				
				ДокументОбъект.Записать();
				СтруктураВозврата.Документ = ДокументОбъект.Ссылка;
				
				Возврат СтруктураВозврата;
				
			Исключение
				Сообщить("Не удалось записать документ" + ТипДокумента);
			КонецПопытки;
			
		КонецЕсли;
	Иначе
		Возврат СтруктураВозврата;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьXMLВыгружаемогоДокумента(Знач ТипДокумента, Знач СтруктураРазбора, Знач СсылкаНаДокумент, Знач ТекстXSD)
	
	СтруктураДокумента = ПолучитьСтруктуруДокумента(СтруктураРазбора, СсылкаНаДокумент);
	
	ЧтениеСхема = Новый ЧтениеXML;
	ЧтениеСхема.УстановитьСтроку(ТекстXSD);
	
	ПостроительДом 	= Новый ПостроительDOM;
	ДокументДом 	= ПостроительДом.Прочитать(ЧтениеСхема);
	ПостроительСхем = Новый ПостроительСхемXML;
	СхемаДокумента 	= ПостроительСхем.СоздатьСхемуXML(ДокументДом); 
	
	НаборСхем = Новый НаборСхемXML;
	НаборСхем.Добавить(СхемаДокумента);
	
	ФабрикаДокумента 	= Новый ФабрикаXDTO(НаборСхем);
	ПакетДокумента 		= ФабрикаДокумента.Пакеты.Получить(ТипДокумента);
	
	Если ТипДокумента = "ORDER" Тогда
		ИмяКорневогоСвойства = "Document_Order";
	ИначеЕсли ТипДокумента = "ORDRSP" Тогда
		ИмяКорневогоСвойства = "Document_OrderResponse";
	ИначеЕсли ТипДокумента = "DESADV" Тогда
		ИмяКорневогоСвойства = "Document_DespatchAdvice";
	ИначеЕсли ТипДокумента = "RECADV" Тогда
		ИмяКорневогоСвойства = "Document_ReceivingAdvice";
	ИначеЕсли ТипДокумента = "FNSSTATUSARCHIVE" Тогда
		ИмяКорневогоСвойства = "Файл";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	

	ТипДокументаXDTO 	= ПакетДокумента.КорневыеСвойства.Получить(ИмяКорневогоСвойства).Тип;
	ДокументXDTO 		= ФабрикаДокумента.Создать(ТипДокументаXDTO);
	
	Для Каждого Свойство Из ДокументXDTO.Свойства() Цикл
		
		Попытка
			
			ТипСвойства 		= ПакетДокумента.КорневыеСвойства.Получить(Свойство.Имя).Тип;
			ЗначениеСвойства 	= ФабрикаДокумента.Создать(ТипСвойства);
			
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если СтруктураДокумента.Свойство(Свойство.Имя) Тогда
			
			НомерСтроки 				= 0;
			ВидСопоставления 			= Объект.эдиВидСопоставленияНоменклатуры;
			ТабличнаяЧасть 				= ФабрикаДокумента.Создать(ПакетДокумента.КорневыеСвойства.Получить(Свойство.Имя).Тип);
			ТипСтрокиТабличнойЧасти 	= ТабличнаяЧасть.Line.ВладеющееСвойство.Тип;
			ТипОбъектаТабличнойЧасти 	= ПакетДокумента.КорневыеСвойства.Получить("Line_Item").Тип;
			
			Для Каждого СтрокаДокумента Из СтруктураДокумента[Свойство.Имя] Цикл
				
				НомерСтроки = НомерСтроки + 1;
				
				СтрокаТабличнойЧасти 					= ТабличнаяЧасть.Line.Добавить(ФабрикаДокумента.Создать(ТипСтрокиТабличнойЧасти));
				
				ОбъектТабличнойЧасти 					= ФабрикаДокумента.Создать(ТипОбъектаТабличнойЧасти);
				ОбъектТабличнойЧасти.LineNumber 		= НомерСтроки;
				ОбъектТабличнойЧасти[ВидСопоставления] 	= ПреобразоватьРеквизитДляВыгрузки(ВидСопоставления, СтрокаДокумента.Номенклатура);
				
				Если ПустаяСтрока(ОбъектТабличнойЧасти[ВидСопоставления]) Тогда
					
					Сообщить(НСтр("ru = 'Не найден " + ВидСопоставления + " для Номенклатуры " + Строка(СтрокаДокумента.Номенклатура) + "'"));
					Возврат Неопределено;
					
				КонецЕсли;
				
				Для Каждого СвойствоОбъектаТЧ Из ОбъектТабличнойЧасти.Свойства() Цикл
					
					Если СтрокаДокумента.Свойство(СвойствоОбъектаТЧ.Имя) Тогда
						ОбъектТабличнойЧасти[СвойствоОбъектаТЧ.Имя] = ПреобразоватьРеквизитДляВыгрузки(СвойствоОбъектаТЧ.Имя, СтрокаДокумента[СвойствоОбъектаТЧ.Имя]);
					КонецЕсли;
					
				КонецЦикла;
				
				СтрокаТабличнойЧасти["Line_Item"] = ОбъектТабличнойЧасти;
				
			КонецЦикла;
			
			ДокументXDTO[Свойство.Имя] = ТабличнаяЧасть;
			
		Иначе
			
			ДобавлятьГруппу = Ложь;
			Для Каждого ПодчиненноеСвойство Из ЗначениеСвойства.Свойства() Цикл
				
				Если СтруктураДокумента.Свойство(ПодчиненноеСвойство.Имя) Тогда
					
					ДобавлятьГруппу = Истина;
					ЗначениеПодчиненногоСвойства = ФабрикаДокумента.Создать(ПакетДокумента.КорневыеСвойства.Получить(ПодчиненноеСвойство.Имя).Тип);
					Если ЗначениеПодчиненногоСвойства = Неопределено
						Или ЗначениеПодчиненногоСвойства.Свойства().Получить("Line") = Неопределено Тогда
						
						Если ЗначениеПодчиненногоСвойства <> Неопределено Тогда
							
							ЗаполнитьЗначенияСвойств(ЗначениеПодчиненногоСвойства, ПреобразоватьРеквизитДляВыгрузки(ПодчиненноеСвойство.Имя, СтруктураДокумента[ПодчиненноеСвойство.Имя]));
							Если ПустаяСтрока(ЗначениеПодчиненногоСвойства.ILN) Тогда
								
								Сообщить(НСтр("ru = 'Не найден GLN для  " + Строка(СтруктураДокумента[ПодчиненноеСвойство.Имя]) + "'"));
								Возврат Неопределено;
								
							КонецЕсли;
							
						Иначе
							ЗначениеПодчиненногоСвойства = СтруктураДокумента[ПодчиненноеСвойство.Имя];
						КонецЕсли;
												
					Иначе
						
						НомерСтроки 				= 0;
						ВидСопоставления 			= Объект.эдиВидСопоставленияНоменклатуры;
						ТипСтрокиТабличнойЧасти 	= ЗначениеПодчиненногоСвойства.Line.ВладеющееСвойство.Тип;
						ТипОбъектаТабличнойЧасти 	= ПакетДокумента.КорневыеСвойства.Получить("Line_Item").Тип;
						
						Для Каждого СтрокаДокумента Из СтруктураДокумента[ПодчиненноеСвойство.Имя] Цикл
							
							НомерСтроки = НомерСтроки + 1;
							
							СтрокаТабличнойЧасти 					= ЗначениеПодчиненногоСвойства.Line.Добавить(ФабрикаДокумента.Создать(ТипСтрокиТабличнойЧасти));
							
							ОбъектТабличнойЧасти 					= ФабрикаДокумента.Создать(ТипОбъектаТабличнойЧасти);
							ОбъектТабличнойЧасти.LineNumber 		= НомерСтроки;
							ОбъектТабличнойЧасти[ВидСопоставления] 	= ПреобразоватьРеквизитДляВыгрузки(ВидСопоставления, СтрокаДокумента.Номенклатура);
							
							Если ПустаяСтрока(ОбъектТабличнойЧасти[ВидСопоставления]) Тогда
								
								Сообщить(НСтр("ru = 'Не найден " + ВидСопоставления + " для Номенклатуры " + Строка(СтрокаДокумента.Номенклатура) + "'"));
								Возврат Неопределено;
								
							КонецЕсли;
							
							Для Каждого СвойствоОбъектаТЧ Из ОбъектТабличнойЧасти.Свойства() Цикл
								
								Если СтрокаДокумента.Свойство(СвойствоОбъектаТЧ.Имя) Тогда
									ОбъектТабличнойЧасти[СвойствоОбъектаТЧ.Имя] = ПреобразоватьРеквизитДляВыгрузки(СвойствоОбъектаТЧ.Имя, СтрокаДокумента[СвойствоОбъектаТЧ.Имя]);
								КонецЕсли;
								
							КонецЦикла;
							
							СтрокаТабличнойЧасти["Line_Item"] = ОбъектТабличнойЧасти;
							
						КонецЦикла;
						
					КонецЕсли;
					
					ЗначениеСвойства[ПодчиненноеСвойство.Имя] = ЗначениеПодчиненногоСвойства;

				КонецЕсли;
				
			КонецЦикла;
			
			Если ДобавлятьГруппу Тогда
				ДокументXDTO[Свойство.Имя] = ЗначениеСвойства;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	ЗаполнитьСтандартныеРеквизитыПередОтправкой(ТипДокумента, ФабрикаДокумента, ДокументXDTO,СсылкаНаДокумент);

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ФабрикаДокумента.ЗаписатьXML(ЗаписьXML, ДокументXDTO, ИмяКорневогоСвойства);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ЗаписьXML.Закрыть());
	ТекстовыйДокумент.ЗаменитьСтроку(1, "<" + ИмяКорневогоСвойства + ">");
	
	Возврат ПреобразоватьXMLИзНотации1С(ТекстовыйДокумент.ПолучитьТекст());
	
КонецФункции

&НаСервере
Функция ПреобразоватьРеквизитДляЗагрузки(Знач ИмяТэга, Знач Значение)
	
	Если Значение = Неопределено Тогда
		Возврат Неопределено;
	Конецесли;
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если ИмяТэга = "OrderDate"
		Или ИмяТэга = "ExpectedDeliveryDate" Тогда
		
		ВозвращаемоеЗначение = ПреобразоватьДатуИзXML(Значение);
		
	ИначеЕсли ИмяТэга = "Buyer" Тогда
		ВозвращаемоеЗначение = НайтиВТаблицеНаСервере(Значение.ILN, "ТаблицаПартнеров", "GLN", "Партнер");
	ИначеЕсли ИмяТэга = "Seller" Тогда
		ВозвращаемоеЗначение = НайтиВТаблицеНаСервере(Значение.ILN, "ТаблицаОрганизаций", "GLN", "Организация");
	ИначеЕсли ИмяТэга = "DeliveryPoint"
		Или ИмяТэга = "UltimateCustomer" Тогда
		
		ВозвращаемоеЗначение = НайтиВТаблицеНаСервере(Значение.ILN, "ТаблицаТочекДоставки", "GLN", "ТочкаДоставки");
		
	ИначеЕсли ИмяТэга = "OrderedQuantity"
		Или ИмяТэга = "OrderedUnitNetPrice"
		Или ИмяТэга = "OrderedUnitGrossPrice" 
		Или ИмяТэга = "OrderedNetAmount" 
		Или ИмяТэга = "OrderedGrossAmount" 
		Или ИмяТэга = "QuantityReceived" Тогда
		
		ВозвращаемоеЗначение = Число(Значение);
		
	Иначе
		ВозвращаемоеЗначение = Значение;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция ПреобразоватьРеквизитДляВыгрузки(Знач ИмяТэга, Знач Значение)
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если ИмяТэга = "OrderResponseDate"
		Или ИмяТэга = "BuyerOrderDate"
		Или ИмяТэга = "ExpectedDeliveryDate" Тогда
		
		ВозвращаемоеЗначение = Формат(Значение, "ДФ=yyyy-MM-dd");
		
	ИначеЕсли ИмяТэга = "Buyer"
		Или ИмяТэга = "Receiver" Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		Если ЗначениеЗаполнено(Значение) Тогда
			
			ГЛН = НайтиВТаблицеНаСервере(Значение, "ТаблицаПартнеров", "Партнер", "GLN");
			
			ВозвращаемоеЗначение.Вставить("ILN"	, ?(ГЛН = Неопределено, "", ГЛН));
			ВозвращаемоеЗначение.Вставить("Name", Значение.Наименование);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТэга = "Seller"
		Или ИмяТэга = "Sender" Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		Если ЗначениеЗаполнено(Значение) Тогда
			
			ГЛН = НайтиВТаблицеНаСервере(Значение, "ТаблицаОрганизаций", "Организация", "GLN");
			
			ВозвращаемоеЗначение.Вставить("ILN"	, ?(ГЛН = Неопределено, "", ГЛН));
			ВозвращаемоеЗначение.Вставить("Name", Значение.Наименование);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТэга = "DeliveryPoint" Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		Если ЗначениеЗаполнено(Значение) Тогда
			
			ГЛН = НайтиВТаблицеНаСервере(Значение, "ТаблицаТочекДоставки", "ТочкаДоставки", "GLN");
		
			ВозвращаемоеЗначение.Вставить("ILN"	, ?(ГЛН = Неопределено, "", ГЛН));
			ВозвращаемоеЗначение.Вставить("Name", Значение.Наименование);
			
		КонецЕсли;
		
	ИначеЕсли ИмяТэга = "BuyerItemCode"
		Или ИмяТэга = "SupplierItemCode"
		Или ИмяТэга = "EAN" Тогда
		
		ВозвращаемоеЗначение = НайтиВТаблицеНаСервере(Значение, "ТаблицаНоменклатуры", "Номенклатура", "КодНоменклатуры");
		Если ВозвращаемоеЗначение = Неопределено Тогда
			ВозвращаемоеЗначение = "";
		КонецЕсли;
		
	ИначеЕсли ИмяТэга = "TaxRate" Тогда
		
		Если Значение = Перечисления.СтавкиНДС.БезНДС
			Или Значение = Перечисления.СтавкиНДС.НДС0 Тогда
			
			ВозвращаемоеЗначение = 0;
			
		ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС10 Тогда
			ВозвращаемоеЗначение = 10;
		Иначе
			ВозвращаемоеЗначение = 18;
		КонецЕсли;		
	Иначе
		ВозвращаемоеЗначение = Значение;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьGLNПартнераВМассивеДокументов(МассивДокументов)
	
	Для Каждого Документ Из МассивДокументов Цикл
		Документ.ГЛНПартнера = НайтиВТаблицеНаСервере(Документ.Партнер, "ТаблицаПартнеров", "Партнер", "GLN");
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДокумента(Знач СтруктураРазбора, Знач СсылкаНаДокумент)
	
	ИмяТабличнойЧасти = "";
	СтруктураДокумента = Новый Структура("DocumentFunctionCode, DocumentNameCode");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка,
	|	9 КАК DocumentFunctionCode,
	|	351 КАК DocumentNameCode";
	
	Для Каждого КлючИЗначение Из СтруктураРазбора.Данные Цикл
		
		Если Не КлючИЗначение.Значение.НеИспользовать
			И Не ПустаяСтрока(КлючИЗначение.Значение.ИмяРеквизита)
			И Не КлючИЗначение.Значение.Свойство("РеквизитыТабличнойЧасти") Тогда
			
			Запрос.Текст = Запрос.Текст + ",
			|	Документ." + КлючИЗначение.Значение.ИмяРеквизита + " КАК " + КлючИЗначение.Ключ;
			
			СтруктураДокумента.Вставить(КлючИЗначение.Ключ);
			
		ИначеЕсли КлючИЗначение.Значение.Свойство("РеквизитыТабличнойЧасти")
			И Не ПустаяСтрока(КлючИЗначение.Значение.ИмяРеквизита)
			И Не КлючИЗначение.Значение.НеИспользовать Тогда
			
			ИмяТабличнойЧасти = КлючИЗначение.Ключ;
			СтруктураДокумента.Вставить(КлючИЗначение.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ." + СсылкаНаДокумент.Метаданные().Имя + " КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка";
	
	Если Не ПустаяСтрока(ИмяТабличнойЧасти) Тогда
		
		МассивСтрок 			= Новый Массив;
		МассивКолонокТаблицы 	= Новый Массив;
		СтруктураДокумента.Вставить(ИмяТабличнойЧасти);
		
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка,
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Номенклатура.Наименование КАК ItemDescription";
		
		Для Каждого КлючИЗначение Из СтруктураРазбора.Данные[ИмяТабличнойЧасти].РеквизитыТабличнойЧасти Цикл
			
			Если Не КлючИЗначение.Значение.НеИспользовать
				И Не ПустаяСтрока(КлючИЗначение.Значение.ИмяРеквизита) Тогда
				
				Запрос.Текст = Запрос.Текст + ",
				|	ТаблицаДокумента." + КлючИЗначение.Значение.ИмяРеквизита + " КАК " + КлючИЗначение.Ключ;
				
				МассивКолонокТаблицы.Добавить(КлючИЗначение.Ключ);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	Документ." + СсылкаНаДокумент.Метаданные().Имя + "." + СтруктураРазбора.Данные[ИмяТабличнойЧасти].ИмяРеквизита + " КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокумента.НомерСтроки";
		
		ПакетЗапросов 	= Запрос.ВыполнитьПакет();
		ВыборкаШапки 	= ПакетЗапросов[0].Выбрать();
		ВыборкаТаблицы 	= ПакетЗапросов[1].Выбрать();
		
		Пока ВыборкаТаблицы.Следующий() Цикл
			
			СтруктураСтроки = Новый Структура("Номенклатура, ItemDescription");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, ВыборкаТаблицы);
			
			Для Каждого КолонкаТаблицы Из МассивКолонокТаблицы Цикл
				СтруктураСтроки.Вставить(КолонкаТаблицы, ВыборкаТаблицы[КолонкаТаблицы]);	
			КонецЦикла;
			
			МассивСтрок.Добавить(СтруктураСтроки);
			
		КонецЦикла;
		
		СтруктураДокумента[ИмяТабличнойЧасти] = МассивСтрок;
		СтруктураДокумента.Вставить("TotalLines", МассивСтрок.Количество());
		
	Иначе
		ВыборкаШапки = Запрос.Выполнить().Выбрать();
	КонецЕсли;
	
	Если ВыборкаШапки.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДокумента, ВыборкаШапки);
	КонецЕсли;
	
	Возврат СтруктураДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураОтветаСвСчФакт(СтруктураРазбора,СсылкаНаДокумент)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Документ.Ссылка,
	|	отправитель КАК ИнфПолФХЖ1Идентиф";
	Данные = СтруктураРазбора.Данные;
	
	Если Данные.Свойство("СвПрод") Тогда
		 КлючИЗначение = Данные.СвПрод;
		 Если Не КлючИЗначение.Значение.НеИспользовать Тогда
			  	Запрос.Текст = Запрос.Текст + ",
				|	Документ." + КлючИЗначение.Значение.ИмяРеквизита + ".Наименование КАК СвПрод_НаимОрг";
				Запрос.Текст = Запрос.Текст + ",
				|	Документ." + КлючИЗначение.Значение.ИмяРеквизита + ".ИНН КАК СвПрод_ИННЮЛ";
				Запрос.Текст = Запрос.Текст + ",
				|	Документ." + КлючИЗначение.Значение.ИмяРеквизита + ".КПП КАК СвПрод_КПП";
				Запрос.Текст = Запрос.Текст + ",
				|	Документ." + КлючИЗначение.Значение.ИмяРеквизита + ".Ссылка КАК СвПрод_Ссылка";
		 КонецЕсли;
	КонецЕсли;
	Если Данные.Свойство("ГрузПолуч") Тогда
		 КлючИЗначение = Данные.ГрузПолуч;
		 Если Не КлючИЗначение.Значение.НеИспользовать Тогда
			  	Запрос.Текст = Запрос.Текст + ",
				|	Документ." + КлючИЗначение.Значение.ИмяРеквизита + ".Наименование КАК ГрузПолуч_НаимОрг";
				Запрос.Текст = Запрос.Текст + ",
				|	Документ." + КлючИЗначение.Значение.ИмяРеквизита + ".ИНН КАК ГрузПолуч_ИННЮЛ";
				Запрос.Текст = Запрос.Текст + ",
				|	Документ." + КлючИЗначение.Значение.ИмяРеквизита + ".КПП КАК ГрузПолуч_КПП";
				Запрос.Текст = Запрос.Текст + ",
				|	Документ." + КлючИЗначение.Значение.ИмяРеквизита + ".Ссылка КАК ГрузПолуч_Ссылка";
		 КонецЕсли;
	 КонецЕсли;
	 Если Данные.Свойство("СвПокуп") Тогда
		 КлючИЗначение = Данные.СвПокуп;
		 Если Не КлючИЗначение.Значение.НеИспользовать Тогда
			  	Запрос.Текст = Запрос.Текст + ",
				|	Документ." + КлючИЗначение.Значение.ИмяРеквизита + ".Наименование КАК СвПокуп_НаимОрг";
				Запрос.Текст = Запрос.Текст + ",
				|	Документ." + КлючИЗначение.Значение.ИмяРеквизита + ".ИНН КАК СвПокуп_ИННЮЛ";
				Запрос.Текст = Запрос.Текст + ",
				|	Документ." + КлючИЗначение.Значение.ИмяРеквизита + ".КПП КАК СвПокуп_КПП";
				Запрос.Текст = Запрос.Текст + ",
				|	Документ." + КлючИЗначение.Значение.ИмяРеквизита + ".Ссылка КАК СвПокуп_Ссылка";
		 КонецЕсли;
	КонецЕсли;
	//Для Каждого КлючИЗначение Из СтруктураРазбора.Данные Цикл
	//	
	//	Если Не КлючИЗначение.Значение.НеИспользовать
	//		И Не ПустаяСтрока(КлючИЗначение.Значение.ИмяРеквизита)
	//		И Не КлючИЗначение.Значение.Свойство("РеквизитыТабличнойЧасти") Тогда
	//		
	//		Запрос.Текст = Запрос.Текст + ",
	//		|	Документ." + КлючИЗначение.Значение.ИмяРеквизита + " КАК " + КлючИЗначение.Ключ;
	//		
	//		СтруктураДокумента.Вставить(КлючИЗначение.Ключ);
	//		
	//	ИначеЕсли КлючИЗначение.Значение.Свойство("РеквизитыТабличнойЧасти")
	//		И Не ПустаяСтрока(КлючИЗначение.Значение.ИмяРеквизита)
	//		И Не КлючИЗначение.Значение.НеИспользовать Тогда
	//		
	//		ИмяТабличнойЧасти = КлючИЗначение.Ключ;
	//		СтруктураДокумента.Вставить(КлючИЗначение.Ключ);
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ." + СсылкаНаДокумент.Метаданные().Имя + " КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка";
	
	Результат 	= Запрос.Выполнить().Выбрать();
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеТэга(ОбластьПоиска, ИмяТэга)
	
	Значение = Неопределено;
	Для Каждого Свойство Из ОбластьПоиска.Свойства() Цикл
		
		Если Свойство.Имя = ИмяТэга Тогда
			Возврат ОбластьПоиска[ИмяТэга];
		КонецЕсли;
		
		Если ТипЗнч(ОбластьПоиска[Свойство.Имя]) = Тип("ОбъектXDTO") Тогда
				
			Значение = ПолучитьЗначениеТэга(ОбластьПоиска[Свойство.Имя], ИмяТэга);
			Если Значение <> Неопределено Тогда
				Возврат Значение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСтандартныеРеквизитыПередЗагрузкой(Знач ТипДокумента, ДокументОбъект)
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	Если Не ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
		ДокументОбъект.Дата = ТекущаяДата();
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Статус") <> Неопределено Тогда
		
		Если ТипДокумента = "ORDER" Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено Тогда
		ДокументОбъект.УчитыватьНДС = Истина;	
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Партнер") <> Неопределено
		И МетаданныеДокумента.Реквизиты.Найти("Контрагент") <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДокументОбъект.Контрагент)
			И Не ЗначениеЗаполнено(ДокументОбъект.Партнер) Тогда
		
			ДокументОбъект.Партнер = ДокументОбъект.Контрагент.Партнер;
			
		ИначеЕсли Не ЗначениеЗаполнено(ДокументОбъект.Контрагент)
			И ЗначениеЗаполнено(ДокументОбъект.Партнер) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка КАК Контрагент
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.Партнер = &Партнер";
			Запрос.УстановитьПараметр("Партнер", ДокументОбъект.Партнер);
			ВыборкаКонтрагента = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаКонтрагента.Следующий() Тогда
				ДокументОбъект.Контрагент = ВыборкаКонтрагента.Контрагент;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Соглашение") <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СоглашенияСКлиентами.Ссылка КАК Соглашение
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|ГДЕ
		|	НЕ СоглашенияСКлиентами.ПометкаУдаления
		| 	%1";
		
		Запрос 			= Новый Запрос;
		ТекстУсловий 	= "";
		Если МетаданныеДокумента.Реквизиты.Найти("Партнер") <> Неопределено
			И ЗначениеЗаполнено(ДокументОбъект.Партнер) Тогда
			
			ТекстУсловий = ТекстУсловий + ?(ПустаяСтрока(ТекстУсловий), "", "
							| ") + "И СоглашенияСКлиентами.Партнер = &Партнер";
							
			Запрос.УстановитьПараметр("Партнер", ДокументОбъект.Партнер);
			
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Контрагент") <> Неопределено
			И ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			
			ТекстУсловий = ТекстУсловий + ?(ПустаяСтрока(ТекстУсловий), "", "
							| ") + " И СоглашенияСКлиентами.Контрагент = &Контрагент";
							
			Запрос.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%1", ТекстУсловий);
		ВыборкаСоглашений = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаСоглашений.Следующий() Тогда
			ДокументОбъект.Соглашение = ВыборкаСоглашений.Соглашение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Валюта") <> Неопределено
		И ТипДокумента = "doc_order" Тогда

		Если МетаданныеДокумента.Реквизиты.Найти("Соглашение") <> Неопределено
			И ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
			
			ДокументОбъект.Валюта = ДокументОбъект.Соглашение.Валюта;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.Валюта) Тогда
			ДокументОбъект.Валюта = Константы.ВалютаУправленческогоУчета.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Статус") <> Неопределено
		И ТипДокумента = "doc_order" Тогда
		
		ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("ХозяйственнаяОперация") <> Неопределено 
		И ТипДокумента = "doc_order" Тогда
		
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Автор") <> Неопределено Тогда
		ДокументОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("СпособДоставки") <> Неопределено Тогда
		ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента;
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("ВалютаВзаиморасчетов") <> Неопределено Тогда
		ДокументОбъект.ВалютаВзаиморасчетов = ДокументОбъект.Валюта;
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("АдресДоставки") <> Неопределено
		И МетаданныеДокумента.Реквизиты.Найти("Партнер") <> Неопределено
		И ЗначениеЗаполнено(ДокументОбъект.Партнер)Тогда
		
		Попытка
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление КАК АдресДоставки,
			|	КонтактнаяИнформация.Вид.Представление КАК Вид,
			|	КонтактнаяИнформация.ЗначенияПолей КАК АдресДоставкиЗначенияПолей
			|ИЗ
			|	Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка = &Получатель
			|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)");
			Запрос.УстановитьПараметр("Получатель", ДокументОбъект.Партнер);
			Результат = Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				ДокументОбъект.АдресДоставки = Результат.АдресДоставки;
			КонецЕсли;
			
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	ЕстьРеквизитЦенаВключаетНДС = МетаданныеДокумента.Реквизиты.Найти("ЦенаВключаетНДС") <> Неопределено;
	Если ЕстьРеквизитЦенаВключаетНДС Тогда
		ДокументОбъект.ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("Товары") <> Неопределено Тогда
		
		Для Каждого СтрокаТовара Из ДокументОбъект.Товары Цикл
			
			Попытка
				
				СтрокаТовара.СтавкаНДС = СтрокаТовара.Номенклатура.СтавкаНДС;
				
				Если СтрокаТовара.СуммаСНДС > 0 Тогда
					
					Если СтрокаТовара.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
						Ставка = 10;
					ИначеЕсли СтрокаТовара.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
						Ставка = 18;
					Иначе
						Ставка = 0;	
					КонецЕсли;
					
					СтрокаТовара.Сумма 		= (СтрокаТовара.СуммаСНДС/(100 + Ставка))*100;
					СтрокаТовара.СуммаНДС 	= Строкатовара.СуммаСНДС - СтрокаТовара.Сумма;
					
				ИначеЕсли СтрокаТовара.Сумма > 0 Тогда
					
					Если СтрокаТовара.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
						СтрокаТовара.СуммаНДС = 0.1 * СтрокаТовара.Сумма;
					ИначеЕсли СтрокаТовара.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
						СтрокаТовара.СуммаНДС = 0.18 * СтрокаТовара.Сумма;
					Иначе
						СтрокаТовара.СуммаНДС = 0;	
					КонецЕсли;
					
					СтрокаТовара.СуммаСНДС 	= СтрокаТовара.Сумма + СтрокаТовара.СуммаНДС;
					
				КонецЕсли;
								
			Исключение
			КонецПопытки;
			
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтандартныеРеквизитыПередОтправкой(Знач ТипДокумента, Знач ФабрикаДокумента, ДокументОбъект,СсылкаНаДокумент=Неопределено,СтруктураДокумента=Неопределено)
	
	ПакетДокумента = ФабрикаДокумента.Пакеты.Получить(ТипДокумента);
	Если ТипДокумента = "ORDER" Тогда
		
		Если ДокументОбъект.Order_Header = Неопределено Тогда
			ДокументОбъект.Order_Header = ФабрикаДокумента.Создать(ПакетДокумента.КорневыеСвойства.Получить("Order_Header").Тип);
		КонецЕсли;
		
		ДокументОбъект.Order_Header.DocumentNameCode = "220";
		ЗаполнениеРеквизитовТабличнойЧасти(ФабрикаДокумента, ДокументОбъект, "Order_Lines");
		
	ИначеЕсли ТипДокумента = "ORDRSP" Тогда
		
		Если ДокументОбъект.OrderResponse_Header = Неопределено Тогда
			ДокументОбъект.OrderResponse_Header = ФабрикаДокумента.Создать(ПакетДокумента.КорневыеСвойства.Получить("OrderResponse_Header").Тип);
		КонецЕсли;
		
		ДокументОбъект.OrderResponse_Header.DocumentFunctionCode = "9";
		ЗаполнениеРеквизитовТабличнойЧасти(ФабрикаДокумента, ДокументОбъект, "OrderResponse_Lines");
		
	ИначеЕсли ТипДокумента = "DESADV" Тогда
		
		Если ДокументОбъект.DespatchAdvice_Header = Неопределено Тогда
			ДокументОбъект.DespatchAdvice_Header = ФабрикаДокумента.Создать(ПакетДокумента.КорневыеСвойства.Получить("DespatchAdvice_Header").Тип);
		КонецЕсли;
		
		ДокументОбъект.DespatchAdvice_Header.DocumentNameCode 		= "351";
		ДокументОбъект.DespatchAdvice_Header.DocumentFunctionCode 	= "9";
		ЗаполнениеРеквизитовТабличнойЧасти(ФабрикаДокумента, ДокументОбъект, "Packing_Sequence", "DespatchAdvice_Consignment");
		
		Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
			
			ПараметрыОтбора = Новый Структура("Организация", СсылкаНаДокумент.Организация);
			СчетаФактуры 	= СчетаФактурыПоОснованию(СсылкаНаДокумент, ПараметрыОтбора, Неопределено);
			
			Если СчетаФактуры.Количество() = 0 Тогда 
				Сообщить("Ошибка в "+СсылкаНаДокумент+" Не удалось получить данные для тега //Счёт-Фактура.");
			Иначе
				ДокументОбъект.DespatchAdvice_Header.UTDDate = Формат(СчетаФактуры[0].Дата,"ДФ = гггг-ММ-дд");
				ДокументОбъект.DespatchAdvice_Header.UTDnumber = СчетаФактуры[0].Номер;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДокументОбъект.DespatchAdvice_Summary = Неопределено Тогда
			ДокументОбъект.DespatchAdvice_Summary = ФабрикаДокумента.Создать(ПакетДокумента.КорневыеСвойства.Получить("DespatchAdvice_Summary").Тип);
		КонецЕсли;
		
		ЦенаВключаетНДС 			= СсылкаНаДокумент.ЦенаВключаетНДС;
		TotalLines 					= Формат(СсылкаНаДокумент.Товары.Количество(), "ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");
		TotalGoodsDespatchedAmount 	= Формат(СсылкаНаДокумент.Товары.Итог("Количество"), "ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");
		ВсегоНДС 					= СсылкаНаДокумент.Товары.Итог("СуммаНДС");
		
		Если ЦенаВключаетНДС Тогда
			
			TotalNetAmount 		= Формат(СсылкаНаДокумент.Товары.Итог("Сумма") - ВсегоНДС, "ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");
			TotalGrossAmount 	= Формат(СсылкаНаДокумент.Товары.Итог("Сумма"),"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");
			
		Иначе
			
			TotalNetAmount 		= Формат(СсылкаНаДокумент.Товары.Итог("Сумма"), "ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");
			TotalGrossAmount 	= Формат(СсылкаНаДокумент.Товары.Итог("Сумма") + ВсегоНДС, "ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");
			
		КонецЕсли;
		
		TotalPSequence = "1";
		TotalTaxAmount = Формат(ВсегоНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");
		
		Если ЗначениеЗаполнено(TotalPSequence) Тогда 
			ДокументОбъект.DespatchAdvice_Summary.TotalPSequence = TotalPSequence; 
		КонецЕсли;
		Если ЗначениеЗаполнено(TotalLines) Тогда 
			ДокументОбъект.DespatchAdvice_Summary.TotalLines = TotalLines; 
		КонецЕсли;
		Если ЗначениеЗаполнено(TotalGoodsDespatchedAmount) Тогда 
			ДокументОбъект.DespatchAdvice_Summary.TotalGoodsDespatchedAmount = TotalGoodsDespatchedAmount;
		КонецЕсли;
		Если ЗначениеЗаполнено(TotalNetAmount) Тогда 
			ДокументОбъект.DespatchAdvice_Summary.TotalNetAmount = TotalNetAmount;
		КонецЕсли;
		Если ЗначениеЗаполнено(TotalGrossAmount) Тогда 
			ДокументОбъект.DespatchAdvice_Summary.TotalGrossAmount = TotalGrossAmount;
		КонецЕсли;
		Если ЗначениеЗаполнено(TotalTaxAmount) Тогда
			ДокументОбъект.DespatchAdvice_Summary.TotalTaxAmount = TotalTaxAmount;
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = "RECADV" Тогда
		
		Если ДокументОбъект.ReceivingAdvice_Header = Неопределено Тогда
			ДокументОбъект.ReceivingAdvice_Header = ФабрикаДокумента.Создать(ПакетДокумента.КорневыеСвойства.Получить("ReceivingAdvice_Header").Тип);
		КонецЕсли;
		
		ДокументОбъект.ReceivingAdvice_Header.DocumentNameCode 		= "632";
		ДокументОбъект.ReceivingAdvice_Header.DocumentFunctionCode 	= "9";
		ЗаполнениеРеквизитовТабличнойЧасти(ФабрикаДокумента, ДокументОбъект, "ReceivingAdvice_Lines");
		
	ИначеЕсли ТипДокумента = "FNS_STATUS_ARCHIVE" Тогда
	
	    СтруктураОтветаСвСчФакт(СтруктураДокумента,СсылкаНаДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнениеРеквизитовТабличнойЧасти(Знач ФабрикаДокумента, ДокументОбъект, Знач ПолеТаблицы, Знач ПолеГруппировкиТаблицы = "")
	
	Таблица = ?(ПустаяСтрока(ПолеГруппировкиТаблицы), ДокументОбъект[ПолеТаблицы], ДокументОбъект[ПолеГруппировкиТаблицы][ПолеТаблицы]);
	Если Таблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Таблица.Line Цикл
		СтрокаТабличнойЧасти.Line_Item.UnitOfMeasure = "PCE";
	КонецЦикла;

КонецПроцедуры
	
#КонецОбласти

#Область РаботаСТаблицамиФормы

&НаКлиенте
Процедура ЗаполнитьТаблицыФормы()
	
	ЗаполнитьТаблицуПартнеров();	
	ЗаполнитьТаблицуНоменклатуры();
	ЗаполнитьТаблицуТочекДоставки();
	ЗаполнитьТаблицуОрганизаций();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПартнеров()
	
	Если Объект.эдиГЛНПартнераХранение = "ВоВнешнейБД" Тогда
		
		ПараметрыПартнеров = РаботаСВнешнейБД.ЭДИ_ПрочитатьСвойства(Неопределено, Неопределено, "PartnerILN", , , , , , , , , 1, , ).Содержимое;
		Если ПараметрыПартнеров <> Неопределено Тогда
			
			Для Каждого ЭлементПартнера Из ПараметрыПартнеров Цикл
				
				СтрокаТаблицы 			= ТаблицаПартнеров.Добавить();
				СтрокаТаблицы.GLN 		= ЗначениеИзСтрокиВнутрСервер(ЭлементПартнера.Значение.Объект);
				СтрокаТаблицы.Партнер 	= ЗначениеИзСтрокиВнутрСервер(ЭлементПартнера.Значение.Владелец);
				СтрокаТаблицы.ИНН 		= ЭлементПартнера.Значение.Индекс1;
				СтрокаТаблицы.FNSID 	= ЭлементПартнера.Значение.Индекс1;
				
				//Если Не ПустаяСтрока(ЭлементПартнера.Значение.Индекс3) Тогда
				//	
				//	СтруктураДокументов 			= ЗначениеИзСтрокиВнутрСервер(ЭлементПартнера.Значение.Индекс3);
				//	СтрокаТаблицы.СписокВходящих 	= СтруктураДокументов.СписокВходящих;
				//	СтрокаТаблицы.СписокИсходящих 	= СтруктураДокументов.СписокИсходящих;
				//	
				//КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли Объект.эдиГЛНПартнераХранение = "ВРеквизите" Тогда
		
		МассивПартнеров	= ПолучитьМассивПартнеров(Объект.эдиПартнерИмяСправочника, Объект.эдиГЛНПартнераИмяРеквизита); 
		Для Каждого Партнер Из МассивПартнеров Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПартнеров.Добавить(), Партнер);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПартнераПоГЛН(Знач ГЛНПартнера)
	
	СтруктураПоиска 		= Новый Структура("GLN", ГЛНПартнера);
	СтрокиТаблицыПартнеров 	= ТаблицаПартнеров.НайтиСтроки(СтруктураПоиска);
	Если СтрокиТаблицыПартнеров.Количество() > 0 Тогда
		Возврат СтрокиТаблицыПартнеров[0].Партнер;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция НайтиГЛНПартнера(Знач Партнер)
	
	СтруктураПоиска 		= Новый Структура("Партнер", Партнер);
	СтрокиТаблицыПартнеров 	= ТаблицаПартнеров.НайтиСтроки(СтруктураПоиска);
	Если СтрокиТаблицыПартнеров.Количество() > 0 Тогда
		Возврат СтрокиТаблицыПартнеров[0].GLN;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//ВФ(*)
&НаСервере
Функция НайтиРеализацию(Номер,Дата,Контрагент,РольКонтрагентаВыполняет = "Контрагент",Организация)
	Если НЕ ЗначениеЗаполнено(Контрагент) ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не найден контрагент или организация для поиска реализации");
		Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	Конецесли;
	//ДлинаНомера = Документы.РеализацияТоваровУслуг.ПустаяСсылка().Метаданные().ДлинаНомера;//либо указывается вручную
	//Номер2 = Лев("000000000000000000000000000000",ДлинаНомера-СтрДлина(Номер2))+Номер2;
	
	Запрос = Новый Запрос;
	Если РольКонтрагентаВыполняет = "Контрагент" Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказКлиента.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ВТ
		               |ИЗ
		               |	Документ.ЗаказКлиента КАК ЗаказКлиента
		               |ГДЕ
		               |	ЗаказКлиента.НомерПоДаннымКлиента = &Номер
		               |	И ЗаказКлиента.Дата МЕЖДУ &ДатаНач И &ДатаКон
		               |	И ЗаказКлиента.Контрагент = &Контрагент
		               |	И ЗаказКлиента.Организация = &Организация"
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказКлиента.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ВТ
		               |ИЗ
		               |	Документ.ЗаказКлиента КАК ЗаказКлиента
		               |ГДЕ
		               |	ЗаказКлиента.НомерПоДаннымКлиента = &Номер
		               |	И ЗаказКлиента.Дата МЕЖДУ &ДатаНач И &ДатаКон
		               |	И ЗаказКлиента.Партнер = &Контрагент
		               |	И ЗаказКлиента.Организация = &Организация;"
	КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
									|	ВЫБРАТЬ
		                              |	РеализацияТоваровУслуг.Ссылка,
		                              |	РеализацияТоваровУслуг.Номер
		                              |ПОМЕСТИТЬ Реал
		                              |ИЗ
		                              |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ КАК ВТ
		                              |		ПО РеализацияТоваровУслуг.ЗаказКлиента = ВТ.Ссылка
		                              |;
		                              |
		                              |////////////////////////////////////////////////////////////////////////////////
		                              |ВЫБРАТЬ
		                              |	Реал.Ссылка КАК СсылкаРеализация,
		                              |	СчетФактураВыданный.Ссылка КАК СсылкаСФ,
		                              |	СчетФактураВыданный.Номер КАК НомерСФ,
		                              |	Реал.Номер КАК НомерРеал
		                              |ИЗ
		                              |	Реал КАК Реал
		                              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
		                              |			ПО СчетФактураВыданныйДокументыОснования.Ссылка = СчетФактураВыданный.Ссылка
		                              |		ПО Реал.Ссылка = СчетФактураВыданныйДокументыОснования.ДокументОснование";			  
	
	Запрос.УстановитьПараметр("Номер",Номер);
	//Запрос.УстановитьПараметр("Номер2",Номер2);
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("Организация",Организация);	
	Запрос.УстановитьПараметр("ДатаНач",ДобавитьМесяц(Дата, -2));
	Запрос.УстановитьПараметр("ДатаКон",ДобавитьМесяц(Дата, 1));
	Выборка = Запрос.Выполнить();
	Результат = Выборка.Выбрать();
	Таб = Выборка.Выгрузить();
	//ВыборкаРеализации	= Результат[0].Выбрать();
	//ВыборкаРеализацииПоЗаказам 	= Результат[1].Выбрать();
	Если Результат.Количество() = 1 Тогда
		Если Результат.Следующий() Тогда
			Возврат Результат.СсылкаРеализация;
		КонецЕсли;
	КонецЕсли;
	Если Результат.Следующий() Тогда
		ДлинаНомера = СтрДлина(Номер);
		ЧастьНомСФ = Прав(Результат.НомерСФ,ДлинаНомера+1);
		//Индекс = Найти(Результат.НомерСФ,Номер);
		Если ЧастьНомСФ = Номер Тогда
			Возврат Результат.СсылкаРеализация;
		КонецЕсли;
		//Возврат Результат.Ссылка;
	КонецЕсли; 
	СтруктПоиска = Новый Структура;
	СтруктПоиска.Вставить("НомерРеал",Номер);
	Стр = Таб.НайтиСтроки(СтруктПоиска);
	Если Стр.Количество() >0 Тогда
		Возврат Стр[0].СсылкаРеализация;
	КонецЕсли;
	Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();
КонецФункции
//ВФ(**)

&НаКлиенте
Процедура ЗаполнитьТаблицуНоменклатуры()
	
	Если Объект.эдиСпособПоискаНоменклатуры = "ВоВнешнейБД" Тогда
		ЗаполнитьТаблицуИзВнешнейБД("GoodsCode", "ТаблицаНоменклатуры", "Номенклатура", "КодНоменклатуры");
	ИначеЕсли Объект.эдиСпособПоискаНоменклатуры = "ПоРеквизиту" Тогда
		
	ИначеЕсли Объект.эдиСпособПоискаНоменклатуры = "ПоРегиструСведений" Тогда
		
	ИначеЕсли Объект.эдиСпособПоискаНоменклатуры = "ПоПроизвольномуЗапросу" Тогда
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиНоменклатуруПоКоду(Знач Код)
	
	СтруктураПоиска = Новый Структура("КодНоменклатуры", Код);
	СтрокиНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	Если СтрокиНоменклатуры.Количество() > 0 Тогда
		Возврат СтрокиНоменклатуры[0].Номенклатура;
	КонецЕсли;
	
	Возврат Неопределено;		
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуТочекДоставки()
	
	Если Объект.эдиГЛНТочкиДоставкиХранение = "ВоВнешнейБД" Тогда
		ЗаполнитьТаблицуИзВнешнейБД("DeliveryPointILN", "ТаблицаТочекДоставки", "ТочкаДоставки", "GLN");
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуОрганизаций()
	
	Если Объект.эдиГЛНОрганизацииХранение = "ВоВнешнейБД" Тогда
		ЗаполнитьТаблицуИзВнешнейБД("OrganizationILN", "ТаблицаОрганизаций", "Организация", "GLN");
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуИзВнешнейБД(Знач ТипЗаполнения, Знач ИмяТаблицы, Знач ИмяПоляВладелец, Знач ИмяПоляОбъект)
	
	СписокПараметров = РаботаСВнешнейБД.ЭДИ_ПрочитатьСвойства(Неопределено, Неопределено, ТипЗаполнения, , , , , , , , , 1, , ).Содержимое;
	Если СписокПараметров <> Неопределено Тогда
		
		Для Каждого ЭлементСписка Из СписокПараметров Цикл
			
			СтрокаТаблицы 					= ЭтаФорма[ИмяТаблицы].Добавить();
			СтрокаТаблицы[ИмяПоляВладелец] 	= ЗначениеИзСтрокиВнутрСервер(ЭлементСписка.Значение.Владелец);
			СтрокаТаблицы[ИмяПоляОбъект] 	= ЗначениеИзСтрокиВнутрСервер(ЭлементСписка.Значение.Объект);
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция НайтиВТаблицеНаСервере(Знач СтрокаПоиска, Знач ИмяТаблицы, Знач ИмяКолонкиПоиска, Знач ИмяКолонкиВозврата)
	
	СтруктураПоиска = Новый Структура(ИмяКолонкиПоиска, СтрокаПоиска);
	СтрокиТаблицы 	= ЭтаФорма[ИмяТаблицы].НайтиСтроки(СтруктураПоиска);
	Если СтрокиТаблицы.Количество() > 0 Тогда
		Возврат СтрокиТаблицы[0][ИмяКолонкиВозврата];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивПартнеров(Знач ИмяСправочника, Знач ИмяРеквизитаГЛН)
	
	МассивПартнеров = Новый Массив;
	Возврат МассивПартнеров;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьМастерНастроек() Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыНастроек", ЭтотОбъект, Новый Структура);
	ОткрытьФорму("ВнешняяОбработка.EDISOFT.Форма.ФормаНастроек", Новый Структура("СтруктураНастроек, ПервыйЗапуск", ПолучитьСтруктуруНастроек(), Истина), ЭтаФорма, , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыНастроек(СтруктураНастроек, ДополнительныеПараметры) Экспорт
	
	Если СтруктураНастроек <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, СтруктураНастроек);
		СохранитьНастройки();

		Если эдиРежимПервогоЗапуска Тогда
			
			эдиРежимПервогоЗапуска = Ложь;
			ИнициализироватьФормы();
			
		КонецЕсли;
		
		ЗаполнитьТаблицыФормы();
		ЗаполнитьСпискиОтборов();
		
		Если Не ПустаяСтрока(Объект.эдиПартнерИмяСправочника) Тогда
			Элементы.ОтборКонтрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка." + Объект.эдиПартнерИмяСправочника);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФормы()
	
	РаботаСXML 			= ПолучитьФорму("ВнешняяОбработка.EDISOFT.Форма.РаботаСXML", , ЭтотОбъект);
	РаботаСSOAP 		= ПолучитьФорму("ВнешняяОбработка.EDISOFT.Форма.РаботаСSOAP", , ЭтотОбъект);
	РаботаСВнешнейБД 	= ПолучитьФорму("ВнешняяОбработка.EDISOFT.Форма.ПрикладныеМетодыРаботыСВнешнейБазойДанных", , ЭтотОбъект);
	РаботаСРасширениями = ПолучитьФорму("ВнешняяОбработка.EDISOFT.Форма.РаботаСРасширениями", , ЭтотОбъект);
	РаботаСПодписанием 	= ПолучитьФорму("ВнешняяОбработка.EDISOFT.Форма.РаботаСПодписанием", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьФормы()
	
	РаботаСSOAP.Инициализировать(Объект.эдиАдресПодключения, Объект.эдиЛогин, Объект.эдиПароль,
									Объект.эдиИспользоватьПрокси, Объект.эдиПроксиСервер, Объект.эдиПроксиПорт,
									Объект.эдиПроксиЛогин, Объект.эдиПроксиПароль);
									
	РаботаСРасширениями.Инициализировать(Объект.эдиКаталогРасширений);
	РаботаСПодписанием.Инициализировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройки()
	
	ПараметрыСвойств = РаботаСВнешнейБД.ЭДИ_Прочитать(Объект.эдиТекущийПрофиль, Неопределено, "SETTINGS");
	Если ПараметрыСвойств.Результат Тогда
		
		Если Не ПустаяСтрока(ПараметрыСвойств.Содержимое.Данные) Тогда
			
			СтруктураНастроек = ЗначениеИзСтрокиВнутрСервер(ПараметрыСвойств.Содержимое.Данные);
	        ЗаполнитьЗначенияСвойств(Объект, СтруктураНастроек);
			
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Ошибка чтения настроек из внешней БД.'"));
		КонецЕсли;
		
	Иначе
		
		ПараметрыСвойств = РаботаСВнешнейБД.ЭДИ_Прочитать("ПоУмолчанию", Неопределено, "SETTINGS");
		Если ПараметрыСвойств.Результат Тогда
			
			Если Не ПустаяСтрока(ПараметрыСвойств.Содержимое.Данные) Тогда
				
				СтруктураНастроек = ЗначениеИзСтрокиВнутрСервер(ПараметрыСвойств.Содержимое.Данные);
		        ЗаполнитьЗначенияСвойств(Объект, СтруктураНастроек);
				
			Иначе
				ПоказатьПредупреждение(, НСтр("ru = 'Ошибка чтения настроек из внешней БД.'"));
			КонецЕсли;
			
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Не найдены настройки для профиля текущего пользователя.'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Знач СохранятьОбщиеНастройки = Истина)
	
	СтруктураНастроек = ПолучитьШаблонСтруктурыНастроек(, Истина);
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, Объект);
	
	ПрофильПользователя = Объект.эдиТекущийПрофиль;
	СтруктураОтвета 	= РаботаСВнешнейБД.ЭДИ_Записать(ПрофильПользователя, Неопределено, "SETTINGS", , , , , , , ЗначениеВСтрокуВнутрСервер(СтруктураНастроек)); 
	
	Если СохранятьОбщиеНастройки Тогда
		СохранитьНастройкиВХранилище();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруНастроек()
	
	СтруктураНастроек = ПолучитьШаблонСтруктурыНастроек();
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, Объект);
	Возврат СтруктураНастроек;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьСпискиОтборов()
	
	Элементы.ОтборСтатус.СписокВыбора.Очистить();
	Элементы.ТипДокумента.СписокВыбора.Очистить();
	
	Элементы.ТипДокумента.СписокВыбора.Добавить("Все", "<Все документы>");
	Для Каждого ЭлементСписка Из Объект.эдиСписокВходящих Цикл
		
		Если Не ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы.ТипДокумента.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из Объект.эдиСписокИсходящих Цикл
		
		Если Не ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы.ТипДокумента.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		
	КонецЦикла;

	Элементы.ОтборСтатус.СписокВыбора.Добавить("Все", "<Все документы>");
	Элементы.ОтборСтатус.СписокВыбора.Добавить("0", "Входящие");
	Элементы.ОтборСтатус.СписокВыбора.Добавить("1", "Исходящие");
	Элементы.ОтборСтатус.СписокВыбора.Добавить("2", "Загруженные");
	Элементы.ОтборСтатус.СписокВыбора.Добавить("3", "Отправленные");
	Элементы.ОтборСтатус.СписокВыбора.Добавить("4", "Созданные");
	
	Если Не ЗначениеЗаполнено(ОтборТипДокумента) Тогда
		ОтборТипДокумента = "Все";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтборСтатус) Тогда
		ОтборСтатус = "Все";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОтборыСтрокДокументов(Ключ, Значение)
	
	ТекущийОтбор 	= Элементы.Документы.ОтборСтрок;
	СтруктураОтбора = Новый Структура;
	Если ТекущийОтбор <> Неопределено Тогда

		Для Каждого Отбор Из ТекущийОтбор Цикл
			
			Если Отбор.Ключ <> Ключ Тогда
				СтруктураОтбора.Вставить(Отбор.Ключ, Отбор.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Значение <> "Все"
		И ЗначениеЗаполнено(Значение) Тогда
		
		СтруктураОтбора.Вставить(Ключ, Значение);
		
	КонецЕсли;
		
	Элементы.Документы.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	
КонецФункции

&НаСервере
Функция ВосстановитьНастройкиИзХранилищаНастроек()
	
	эдиСписокПараметровРаботы 	= ПолучитьНастройкиИзХранилища();
	НастройкиНайдены 			= эдиСписокПараметровРаботы <> Неопределено;
	Если НастройкиНайдены Тогда
		ЗаполнитьЗначенияСвойств(Объект, эдиСписокПараметровРаботы);
	КонецЕсли;
	
	Возврат НастройкиНайдены;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиВХранилище()
	
	ПараметрыФормы = ПолучитьШаблонСтруктурыНастроек(Истина);
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	
	Если эдиРежимПервогоЗапуска Тогда
		ХранилищеОбщихНастроек.Сохранить("EDISOFT", "EDISOFT", ПараметрыФормы, "Настройки внешней БД", "EDISOFT");
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить("EDISOFT", "EDISOFT", ПараметрыФормы, "Настройки внешней БД");
	ХранилищеОбщихНастроек.Сохранить("ПрофильНастрокEDI", "ПрофильНастрокEDI", Объект.эдиТекущийПрофиль, "Текущий профиль настроек");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыДокументов()
	
	ОбрабокаОбъект = РеквизитФормыВЗначение("Объект");
	ОбрабокаОбъект.ЗаполнитьВидыДокументов();
	ЗначениеВРеквизитФормы(ОбрабокаОбъект, "Объект");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиИзХранилища()
	
	СтруктураНастроек = ХранилищеОбщихНастроек.Загрузить("EDISOFT", "EDISOFT", "Настройки внешней БД");
	Если СтруктураНастроек = Неопределено Тогда
		СтруктураНастроек = ХранилищеОбщихНастроек.Загрузить("EDISOFT", "EDISOFT", "Настройки внешней БД", "EDISOFT");
	КонецЕсли;
	
	Если СтруктураНастроек <> Неопределено Тогда
		СтруктураНастроек.Вставить("эдиТекущийПрофиль", ХранилищеОбщихНастроек.Загрузить("ПрофильНастрокEDI", "ПрофильНастрокEDI", "Текущий профиль настроек"));
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ЗначениеВСтрокуВнутрСервер(Значение)
	
	Если Значение = Неопределено
		ИЛИ Значение = "" Тогда 
		
		Возврат "";
		
	КонецЕсли;
	
	Возврат ЗначениеВСтрокуВнутр(Значение);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеИзСтрокиВнутрСервер(Строка)
	
	Если Строка = "" Тогда 
		Возврат ""; 
	КонецЕсли;
	
	Возврат ЗначениеИзСтрокиВнутр(Строка);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивДокументовИнформационнойБазы(ОбъектМетаданных, ИмяСправочникаПартнеры, ДатаНачала, ДатаОкончания, МассивОрганизаций = Неопределено)
	
	МассивДокументов = Новый Массив;
	
	ИмяРеквизитаПартнер = "";
	Если Метаданные.Документы[ОбъектМетаданных].Реквизиты.Найти("Партнер") <> Неопределено Тогда
		ИмяРеквизитаПартнер = "Партнер";
	ИначеЕсли Метаданные.Документы[ОбъектМетаданных].Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
	    ИмяРеквизитаПартнер = "ДокументОснование.Партнер";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК СозданныйДокумент,
	|	Документ.Номер КАК НомерДокумента,
	|	Документ.Дата КАК ДатаДокумента,";
	
	Если Не ПустаяСтрока(ИмяРеквизитаПартнер) Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	Документ." + ИмяРеквизитаПартнер + " КАК Партнер,";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	Документ.Организация,	
	|	"""" КАК ГЛНПартнера
	|ИЗ
	|	Документ." + ОбъектМетаданных + " КАК Документ
	|ГДЕ
	|	Документ.Проведен 
	|	И Документ.Организация В (&Организации)
	|	И Документ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";

	Запрос.УстановитьПараметр("ДатаНачала"		, Мин(ДатаНачала, ДатаОкончания));
	Запрос.УстановитьПараметр("ДатаОкончания"	, Макс(ДатаНачала, ДатаОкончания));
	Запрос.УстановитьПараметр("Организации"		, МассивОрганизаций);
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		СтруктураДокумента = Новый Структура("НомерДокумента, ДатаДокумента, СозданныйДокумент, Партнер, Организация, ГЛНПартнера");
		ЗаполнитьЗначенияСвойств(СтруктураДокумента, ВыборкаДокументов);
		
		МассивДокументов.Добавить(СтруктураДокумента);
		
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

// Функция находит счета-фактуры заданного документа.
//
// Параметры:
//	Основание - ДокументСсылка - Документ, для которого необходимо найти счет-фактуру
//	ПараметрыОтбора - Структура - Отбор счетов-фактуры по реквизитам. Ключ структуры является именем реквизита.
//	РеквизитыСчетаФактуры - Структура - Возвращаемый. Данные счета-фактуры (Ссылка, Номер, Дата, Организация, Валюта и т.д.).
//	Проведен - Булево - Если признак установлен в значение Истина, то будет произведен поиск только проведенных.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица найденных счетов-фактур (Ссылка, Номер, Дата, Организация, Валюта)
//
&НаСервереБезКонтекста
Функция СчетаФактурыПоОснованию(Основание, ПараметрыОтбора = Неопределено, РеквизитыСчетаФактуры = Неопределено, Проведен = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СчетФактура.Ссылка                   КАК Ссылка,
	|	СчетФактура.Номер                    КАК Номер,
	|	СчетФактура.Дата                     КАК Дата,
	|	СчетФактура.Организация              КАК Организация,
	|	СчетФактура.Контрагент               КАК Контрагент,
	|	СчетФактура.КППКонтрагента           КАК КППКонтрагента,
	|	СчетФактура.Валюта                   КАК Валюта,
	|	СчетФактура.Корректировочный         КАК Корректировочный,
	|	СчетФактураДокументыОснования.НомерИсходногоДокумента            КАК НомерИсходногоДокумента,
	|	СчетФактураДокументыОснования.ДатаИсходногоДокумента             КАК ДатаИсходногоДокумента,
	|	СчетФактураДокументыОснования.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	СчетФактураДокументыОснования.ДатаИсправленияИсходногоДокумента  КАК ДатаИсправленияИсходногоДокумента
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактура
	|		ПО СчетФактураДокументыОснования.Ссылка = СчетФактура.Ссылка
	|ГДЕ
	|	СчетФактураДокументыОснования.ДокументОснование = &Основание
	|	И (НЕ СчетФактура.ПометкаУдаления)
	|	//УсловияОтбора
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактура.НомерИсправления УБЫВ
	|");
	
	Запрос.УстановитьПараметр("Основание",   Основание);
	
	Если ПараметрыОтбора <> Неопределено Тогда
		
		ТекстУсловий = "";
		
		Для Каждого ЭлементОтбора Из ПараметрыОтбора Цикл
			ТекстУсловий = ТекстУсловий + "
			|	И СчетФактура." + ЭлементОтбора.Ключ + " = &" + ЭлементОтбора.Ключ;
			Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
		КонецЦикла;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//УсловияОтбора", ТекстУсловий);
		
	КонецЕсли;
	
	Если Проведен Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"(НЕ СчетФактура.ПометкаУдаления)",
			"СчетФактура.Проведен");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыСчетаФактуры = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		РеквизитыСчетаФактуры.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ТаблицаСчетовФактур = Новый ТаблицаЗначений;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаСчетовФактур = РезультатЗапроса.Выгрузить();
		ЗаполнитьЗначенияСвойств(РеквизитыСчетаФактуры, ТаблицаСчетовФактур[0]);
	КонецЕсли;
	
	Возврат ТаблицаСчетовФактур;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьXMLВНотацию1С(Знач СтрокаСхема) Экспорт
	
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "Line-"			, "Line_");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "Document-"		, "Document_");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "Reference-"		, "Reference_");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "Package-"		, "Package_");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "OrderResponse-"	, "OrderResponse_");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "E-"				, "E_");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "File-"			, "File_");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "Order-"			, "Order_");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "ShipFrom-"		, "ShipFrom_");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "DespatchAdvice-", "DespatchAdvice_");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "Party-", "Party_");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "Packing-", "Packing_");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "ReceivingAdvice-", "ReceivingAdvice_");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "QuantityVariance-", "QuantityVariance_");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "ChangeReason-","ChangeReason_");
	Возврат СтрокаСхема;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьXMLИзНотации1С(Знач СтрокаСхема)
	
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "Line_"			, "Line-");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "Document_"		, "Document-");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "Reference_"		, "Reference-");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "Package_"		, "Package-");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "OrderResponse_"	, "OrderResponse-");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "E_"				, "E-");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "File_"			, "File-");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "Order_"			, "Order-");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "ShipFrom_"		, "ShipFrom-");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "DespatchAdvice_", "DespatchAdvice-");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "Party_", "Party-");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "Packing_", "Packing-");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "ReceivingAdvice_", "ReceivingAdvice-");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "QuantityVariance_", "QuantityVariance-");
	СтрокаСхема = СтрЗаменить(СтрокаСхема, "ChangeReason_","ChangeReason-");
	Возврат СтрокаСхема;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьШаблонСтруктурыНастроек(Знач ТолькоНастройкиБД = Ложь, Знач БезНастроекБД = Ложь)
	
	СтруктураНастроек = Новый Структура;
	
	Если Не БезНастроекБД Тогда
		
		СтруктураНастроек.Вставить("эдиТипСУБД");
		СтруктураНастроек.Вставить("эдиКаталогБД");
		СтруктураНастроек.Вставить("эдиСерверБД");
		СтруктураНастроек.Вставить("эдиПортБД");
		СтруктураНастроек.Вставить("эдиИмяБД");
		СтруктураНастроек.Вставить("эдиИмяТаблицыБД");
		СтруктураНастроек.Вставить("эдиПользовательБД");
		СтруктураНастроек.Вставить("эдиПарольБД");
		СтруктураНастроек.Вставить("эдиПутьВключаетБД");
		
	КонецЕсли;
	
	Если ТолькоНастройкиБД Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	СтруктураНастроек.Вставить("эдиАдресПодключения");
	СтруктураНастроек.Вставить("эдиЛогин");
	СтруктураНастроек.Вставить("эдиПароль");
	
	СтруктураНастроек.Вставить("эдиИспользоватьПрокси");
	СтруктураНастроек.Вставить("эдиПроксиСервер");
	СтруктураНастроек.Вставить("эдиПроксиПорт");
	СтруктураНастроек.Вставить("эдиПроксиЛогин");
	СтруктураНастроек.Вставить("эдиПроксиПароль");
	
	СтруктураНастроек.Вставить("эдиТекущийПрофиль");
	СтруктураНастроек.Вставить("эдиОбработкаДляСети");
	СтруктураНастроек.Вставить("эдиВыполнятьПопыткуПроведения");
	
	СтруктураНастроек.Вставить("эдиГЛНОрганизацииХранение");
	СтруктураНастроек.Вставить("эдиГЛНОрганизацииИмяРеквизита");
	
	СтруктураНастроек.Вставить("эдиПартнерИмяСправочника");
	СтруктураНастроек.Вставить("эдиГЛНПартнераХранение");
	СтруктураНастроек.Вставить("эдиИННПартнераХранение");
	СтруктураНастроек.Вставить("эдиFNSIDПартнераХранение");
	СтруктураНастроек.Вставить("эдиГЛНПартнераИмяРеквизита");
	СтруктураНастроек.Вставить("эдиИННПартнераИмяРеквизита");
	СтруктураНастроек.Вставить("эдиFNSIDПартнераИмяРеквизита");
	
	СтруктураНастроек.Вставить("эдиТочкаДоставкиИмяСправочника");
	СтруктураНастроек.Вставить("эдиГЛНТочкиДоставкиХранение");
	СтруктураНастроек.Вставить("эдиГЛНТочкиДоставкиИмяРеквизита");
	
	СтруктураНастроек.Вставить("эдиВидСопоставленияНоменклатуры");
	СтруктураНастроек.Вставить("эдиСпособПоискаНоменклатуры");
	СтруктураНастроек.Вставить("эдиРегистрСведенийДляПоиска");
	СтруктураНастроек.Вставить("эдиКодНоменклатурыИмяРеквизита");
	СтруктураНастроек.Вставить("эдиЗапросПоискаНоменклатуры");
	
	СтруктураНастроек.Вставить("эдиСписокВходящих");
	СтруктураНастроек.Вставить("эдиСписокИсходящих");
	СтруктураНастроек.Вставить("эдиОписаниеДокументов");
	
	СтруктураНастроек.Вставить("эдиИспользоватьПодписание");
	СтруктураНастроек.Вставить("эдиСертификат");
	СтруктураНастроек.Вставить("эдиКлючСертификата");
	СтруктураНастроек.Вставить("эдиФамилияПодписанта");
	СтруктураНастроек.Вставить("эдиИмяПодписанта");
	СтруктураНастроек.Вставить("эдиОтчествоПодписанта");
	СтруктураНастроек.Вставить("эдиОбластьПолномочий");
	
	СтруктураНастроек.Вставить("эдиКаталогРасширений");
	СтруктураНастроек.Вставить("эдиСписокПодключенныхРасширений");
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьДатуИзXML(ДатаСтрокой)
	
	Возврат Дата(Число(Лев(ДатаСтрокой, 4)), Число(Сред(ДатаСтрокой, 6, 2)), Число(Прав(ДатаСтрокой, 2))); 
	
КонецФункции

#КонецОбласти

#Область ВсякаяФигня

&НаКлиенте
Процедура ОчиститьХранилище(Команда)
	
	УдалитьХОН();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьХОН()
	
	ХранилищеОбщихНастроек.Удалить("EDISOFT", "EDISOFT", Неопределено);
	ХранилищеОбщихНастроек.Удалить("ПрофильНастрокEDI", "ПрофильНастрокEDI", Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКолонкиТабличнойЧасти(Данные, Таб)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	
	Попытка
		МассивТипов.Добавить(Тип("СправочникСсылка.НоменклатураПоставщиков"));
	Исключение
	КонецПопытки;
	
	ОписаниеТиповНом = Новый ОписаниеТипов(МассивТипов);
	Таб.Колонки.Добавить("Номенклатура", ОписаниеТиповНом);
	Таб.Колонки.Добавить("Описание");
	Таб.Колонки.Добавить("ЕдИзм");
	Таб.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	Для Каждого КлючИЗначение Из Данные Цикл
		
		Если КлючИЗначение.Значение.Свойство("РеквизитыТабличнойЧасти") Тогда
			
			Для Каждого РеквизитТабличнойЧасти Из КлючИЗначение.Значение.РеквизитыТабличнойЧасти Цикл
				
				Если РеквизитТабличнойЧасти.Значение.НеИспользовать Тогда
					Продолжить;
				КонецЕсли;
				
				Таб.Колонки.Добавить(РеквизитТабличнойЧасти.Значение.ИмяРеквизита);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедактированиеТаблицы(СтруктураДокумента) Экспорт
	
	ОткрытьФорму("ВнешняяОбработка.EDISOFT.Форма.ФормаРедактированияТабличныхЧастей", Новый Структура("СтруктураНастроек, Структ", ПолучитьСтруктуруНастроек(), СтруктураДокумента), ЭтаФорма, , , , );
	
КонецПроцедуры



#КонецОбласти