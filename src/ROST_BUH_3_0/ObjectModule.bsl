////&НаСервере
////Функция SendBinary(partner_iln,ТипОтп,ИмяФайла,Данные)
////	ВебСервис = ПодключитьВебСервис();
////	Ответ = ВебСервис.SendBinary(ВебСервис.Пользователь,ВебСервис.Пароль,partner_iln,ТипОтп,ИмяФайла,Данные);
////	СтруктураОтвета = Новый Структура;
////	Попытка
////		СтруктураОтвета.Вставить("Cnt",Ответ.Cnt);
////	Исключение
////	КонецПопытки;
////	Попытка
////		СтруктураОтвета.Вставить("FileData",Ответ.FileData);
////	Исключение
////	КонецПопытки;
////	Возврат СтруктураОтвета;
////КонецФункции

////&НаСервере
////Функция ChangeDocumentStatus(tracking_id)
//////	ВебСервис = ПодключитьВебСервис();
////	Ответ = ВебСервис.ChangeDocumentStatus(ВебСервис.Пользователь, ВебСервис.Пароль, tracking_id, "R"); 
////	СтруктураОтвета = Новый Структура;
////	Попытка
////		СтруктураОтвета.Вставить("Cnt",Ответ.Cnt);
////	Исключение
////	КонецПопытки;
////	Попытка
////		СтруктураОтвета.Вставить("FileData",Ответ.FileData);
////	Исключение
////	КонецПопытки;
////	Возврат СтруктураОтвета;
////КонецФункции


//Функция SendBinary(partner_iln,ТипОтп,ИмяФайла,Данные) Экспорт
//	Метод = "SendBinary";
//	ЗапросSOAP = "<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:urn=""urn:wsedi"">
//	|   <soapenv:Header/>
//	|   <soapenv:Body>
//	|	  <urn:sendBinary>
//	|		 <name>"+Логин+"</name>
//	|		 <password>"+Пароль+"</password>
//	|		 <partnerIln>"+partner_iln+"</partnerIln>
//	|		 <documentType>"+ТипОтп+"</documentType>
//	|		 <fileName>"+ИмяФайла+"</fileName>
//	|		 <data>"+Данные+"</data>
//	|	  </urn:sendBinary>
//	|   </soapenv:Body>
//	|</soapenv:Envelope>";
//	
//	Возврат ОтправитьЗапросSOAP(Метод,ЗапросSOAP);
//КонецФункции


//Функция ListMBAllEx(ПолучатьБинарные) Экспорт
//	Метод = "ListMBAllEx";
//	ЗапросSOAP = "<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:urn=""urn:wsedi"">
//	|   <soapenv:Header/>
//	|   <soapenv:Body>
//	|	  <urn:listMBAllEx>
//	|		 <name>"+Логин+"</name>
//	|		 <password>"+Пароль+"</password>
//	|		 <receiveBinary>False</receiveBinary>
//	|	  </urn:listMBAllEx>
//	|   </soapenv:Body>
//	|</soapenv:Envelope>";
//	
//	Возврат ОтправитьЗапросSOAP(Метод,ЗапросSOAP) ;	

//КонецФункции

//Функция ОтправитьЗапросSOAP(Метод,ЗапросSOAP)
//	ВыборСервераEDISOAP = "https://service.ediweb.ru/wsedi//services/EDIServiceSoap";
//	Попытка
//		xmlHttp = Новый COMОбъект("MSXML2.ServerXMLHTTP.6.0");//MSXML2.xmlHttp
//		xmlHttp.setTimeouts(10*1000, 10*1000, (ТаймаутВебСервиса)*1000, (ТаймаутВебСервиса)*1000);//resolveTimeout, connectTimeout, sendTimeout, receiveTimeout
//		
//		xmlHttp.setOption(2,13056);
//		
//		Если ПроксиВключен = Истина Тогда
//			xmlhttp.setProxy("2", ПроксиАдрес+?(ЗначениеЗаполнено(ПроксиПорт),":"+ПроксиПорт,""));    
//		КонецЕсли;  
//		
//		xmlHttp.OPEN("POST", ВыборСервераEDISOAP, 0);
//		
//		Если ПроксиЗащищенЛогиномИПаролем = Истина Тогда
//			xmlhttp.setProxyCredentials(ПроксиЛогин, ПроксиПароль);
//		КонецЕсли; 
//		
//		xmlHttp.setRequestHeader("SOAPAction", "urn:wsedi/"+Метод);
//		xmlHttp.setRequestHeader("Host", СтрокаМеждуПодстрокамиСтроки(ВыборСервераEDISOAP,"https://","/"));//"service.ediweb.ru"
//		xmlHttp.setRequestHeader("Content-type", "text/xml");
//		xmlHttp.SEND(ЗапросSOAP);
//		СтрокаXML=xmlHttp.responseText;
//	Исключение
//		ВыборСервераEDISOAP = "https://soap.ediweb.ru/wsedi/services/platform";
//		Попытка
//			xmlHttp = Новый COMОбъект("MSXML2.ServerXMLHTTP.6.0");//MSXML2.xmlHttp
//			xmlHttp.setTimeouts(10*1000, 10*1000, (ТаймаутВебСервиса)*1000, (ТаймаутВебСервиса)*1000);//resolveTimeout, connectTimeout, sendTimeout, receiveTimeout
//			
//			xmlHttp.setOption(2,13056);
//			
//			Если ПроксиВключен = Истина Тогда
//				xmlhttp.setProxy("2", ПроксиАдрес+?(ЗначениеЗаполнено(ПроксиПорт),":"+ПроксиПорт,""));    
//			КонецЕсли;  
//			
//			xmlHttp.OPEN("POST", ВыборСервераEDISOAP, 0);
//			
//			Если ПроксиЗащищенЛогиномИПаролем = Истина Тогда
//				xmlhttp.setProxyCredentials(ПроксиЛогин, ПроксиПароль);
//			КонецЕсли; 
//			
//			xmlHttp.setRequestHeader("SOAPAction", "urn:wsedi/"+Метод);
//			xmlHttp.setRequestHeader("Host", СтрокаМеждуПодстрокамиСтроки(ВыборСервераEDISOAP,"https://","/"));//"service.ediweb.ru"
//			xmlHttp.setRequestHeader("Content-type", "text/xml");
//			xmlHttp.SEND(ЗапросSOAP);
//			СтрокаXML=xmlHttp.responseText;

//		Исключение
//			ВызватьИсключение(ОписаниеОшибки());
//		КонецПопытки;
//		//Возврат Неопределено;
//	КонецПопытки;
//	
//	ЧтениеXML = Новый ЧтениеXML;//добавить обработку варианта с входящей html
//	ЧтениеXML.УстановитьСтроку(СтрокаXML);
//	Фабрика = Новый ФабрикаXDTO;
//	СтруктураXML = Фабрика.ПрочитатьXML(ЧтениеXML);
//	Попытка
//		Ответ = СтруктураXML.Body[Метод+"Response"].return;
//	Исключение
//		Ответ = СтруктураXML.Body[Метод+"Response"][Метод+"Result"];
//	КонецПопытки; 
//	
//	Попытка Cnt = Ответ.Cnt; Исключение Cnt = Неопределено; КонецПопытки; 
//	Попытка Res = Ответ.Res; Исключение Res = "-1"; КонецПопытки; 
//	Попытка FileData = Ответ.FileData; Исключение FileData = Неопределено; КонецПопытки; 
//	Попытка faultstring = СтруктураXML.Body.Fault.faultstring Исключение faultstring = Неопределено; КонецПопытки; 
//	
//	Если ЗначениеЗаполнено(faultstring) Тогда
//		ВызватьИсключение(faultstring);
//	КонецЕсли;
//	
//	Если Число(Res) <> 0 Тогда
//		Попытка 
//			Сообщить("Метод: "+Метод+Символы.ПС+"Код ошибки: "+Строка(Res)+Символы.ПС+"Текст ошибки: "+Символы.ПС+Строка(Cnt));
//			//ЗаписатьВЛогДанныеПоОшибке_EDI("Метод: "+Метод+Символы.ПС+"Код ошибки: "+Строка(Res)+Символы.ПС+"Текст ошибки: "+Символы.ПС+Строка(Cnt));
//		Исключение 
//		КонецПопытки;
//	КонецЕсли;
//	
//	Если Число(Res) = 1 Тогда
//		ВызватьИсключение("Ошибка аутентификации. Проверьте логин и пароль.");
//	ИначеЕсли Число(Res) = 2 Тогда
//		ВызватьИсключение("Внутренняя ошибка сервера.");
//	ИначеЕсли Число(Res) = 3 Тогда
//		Сообщить (cnt);
//		ВызватьИсключение("Внешняя ошибка.");		
//	ИначеЕсли Число(Res) = 4 Тогда
//		ВызватьИсключение("Ошибка во взаимосвязи.");
//	ИначеЕсли Число(Res) = 5 Тогда
//		ВызватьИсключение("Превышен таймаут на выполнение метода.");
//	ИначеЕсли Число(Res) = 6 Тогда
//		ВызватьИсключение("Ошибка Web.");
//	ИначеЕсли Число(Res) = 7 Тогда
//		ВызватьИсключение("Некорректные параметры.");
//	ИначеЕсли Число(Res) <> 0 Тогда
//		ВызватьИсключение("Неизвестная ошибка.");
//	КонецЕсли;
//	
//	Структура = Новый Структура;
//	Структура.Вставить("Cnt",Cnt);
//	Структура.Вставить("FileData",Base64Значение(FileData));
//	
//	Возврат Структура;
//КонецФункции

//Функция ReceiveBinary(partner_iln, document_type, tracking_id)  Экспорт
//	Метод = "ReceiveBinary";
//	ЗапросSOAP = "<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:urn=""urn:wsedi"">
//	|   <soapenv:Header/>
//	|   <soapenv:Body>
//	|	  <urn:receiveBinary>
//	|		 <name>"+Логин+"</name>
//	|		 <password>"+Пароль+"</password>
//	|		 <partnerILN>"+partner_iln+"</partnerILN>
//	|		 <documentType>"+document_type+"</documentType>
//	|		 <trackingId>"+tracking_id+"</trackingId>
//	|	  </urn:receiveBinary>
//	|   </soapenv:Body>
//	|</soapenv:Envelope>";
//	
//	Возврат ОтправитьЗапросSOAP(Метод,ЗапросSOAP);
//КонецФункции

//Функция ChangeDocumentStatus(tracking_id, status="R")  Экспорт
//	Метод = "ChangeDocumentStatus";
//	ЗапросSOAP = "<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:urn=""urn:wsedi"">
//	|   <soapenv:Header/>
//	|   <soapenv:Body>
//	|	  <urn:changeDocumentStatus>
//	|		 <name>"+Логин+"</name>
//	|		 <password>"+Пароль+"</password>
//	|		 <trackingId>"+tracking_id+"</trackingId>
//	|		 <status>"+status+"</status>
//	|	  </urn:changeDocumentStatus>
//	|   </soapenv:Body>
//	|</soapenv:Envelope>";
//	
//	Возврат ОтправитьЗапросSOAP(Метод,ЗапросSOAP);

//КонецФункции


//&НаСервере
//Функция СтрокаМеждуПодстрокамиСтроки(ИсходнаяСтрока,СтрокаОт="",СтрокаДо="") Экспорт
//	Строка = ИсходнаяСтрока;
//	Если ЗначениеЗаполнено(СтрокаОт) Тогда
//		Если Найти(Строка,СтрокаОт) = 0 Тогда
//			Возврат "";
//		КонецЕсли; 
//		Строка = Сред(Строка,Найти(Строка,СтрокаОт)+СтрДлина(СтрокаОт));
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(СтрокаДо) Тогда
//		Если Найти(Строка,СтрокаДо) = 0 Тогда
//			Возврат "";
//		КонецЕсли;
//		Строка = Лев(Строка,Найти(Строка,СтрокаДо)-1);
//	КонецЕсли;
//	
//	Возврат Строка;
//КонецФункции

//Функция ИнициализироватьСвойствоОбъекта(Наименование,ТипЗнач,МассивНаборов) Экспорт
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	ДополнительныеРеквизитыИСведения.Ссылка
//	               |ИЗ
//	               |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
//	               |ГДЕ
//	               |	ДополнительныеРеквизитыИСведения.Наименование = &Наименование";	
//	Запрос.УстановитьПараметр("Наименование",Наименование );	
//	Результат = Запрос.Выполнить();
//	Если Результат.Пустой() Тогда		
//		ПВХ=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();			
//		ПВХ.Наименование		= Наименование;
//		//ПВх.Заголовок 			= Наименование;
//		ПВХ.ТипЗначения			= ТипЗнач;
//		ПВХ.ЭтоДополнительноеСведение = Истина;
//		ПВХ.Записать();
//		Для каждого Элемент Из МассивНаборов Цикл
//			//Элемент = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_контрагенты.ПолучитьОбъект();
//			Элемент = Элемент.ПолучитьОбъект();
//			Стр = Элемент.ДополнительныеСведения.Добавить();
//			Стр.Свойство = ПВХ.Ссылка;
//			Элемент.Записать();
//		КонецЦикла; 
//		Сообщить("Создан элемент плана видов характеристик ""ДополнительныеРеквизитыИСведения"" с наименованием '"+Наименование);
//		возврат ПВХ.Ссылка;
//	Иначе
//		Выборка = Результат.Выбрать();
//		Выборка.Следующий(); 
//		возврат Выборка.Ссылка;
//	КонецЕсли;

//КонецФункции //

//Процедура ЗаписатьСвойствоОбъекта(Объект,ПСвойство, Значение) Экспорт
//	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ПСвойство,Истина);
//	Если НЕ ЗначениеЗаполнено(Свойство) Тогда
//		Сообщить("Не найдено свойство " + ПСвойство);
//		Возврат;
//	КонецЕсли;
//	
//	НаборД = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
//	
//	НаборД.Отбор.Объект.Установить(Объект.Ссылка);
//	НаборД.Отбор.Свойство.Установить(Свойство);
//	СтрокаДанных = НаборД.Добавить();
//	
//	СтрокаДанных.Объект = Объект.Ссылка;
//	СтрокаДанных.Свойство = Свойство;
//	СтрокаДанных.Значение = Значение;
//	НаборД.Записать(); 	
//Конецпроцедуры

//Функция ПолучитьЗначениеСвойстваОбъекта(ПСвойство,ВладелецСвойства, ВыводитьПредупреждение=Ложь) Экспорт 	
//	Запрос = Новый Запрос;
//	//Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(ПСвойство,Истина);
//	//Если НЕ ЗначениеЗаполнено(Свойство) Тогда
//	//	Сообщить("Не найдено свойство " + ПСвойство);
//	//	Возврат "";
//	//КонецЕсли;
//	Запрос.Текст = "
//	|ВЫБРАТЬ
//	|	ЗначенияСвойствОбъектов.Объект,
//	|	ЗначенияСвойствОбъектов.Свойство,
//	|	ЗначенияСвойствОбъектов.Значение
//	|ИЗ
//	|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
//	|ГДЕ
//	|	ЗначенияСвойствОбъектов.Свойство.Наименование = &Свойство
//	|	И ЗначенияСвойствОбъектов.Объект = &Объект";
//	Запрос.УстановитьПараметр("Свойство",	ПСвойство);
//	Попытка
//		Запрос.УстановитьПараметр("Объект",	ВладелецСвойства.ПолучитьОбъект);
//	Исключение
//		Запрос.УстановитьПараметр("Объект",	ВладелецСвойства);
//	КонецПопытки;
//	РезультатЗапроса = Запрос.Выполнить().Выбрать();
//	Если РезультатЗапроса.Следующий() Тогда
//		Попытка
//			Возврат РезультатЗапроса.Значение.Наименование;
//		Исключение
//			Возврат РезультатЗапроса.Значение;
//		КонецПопытки;
//	Иначе
//		Попытка	
//			Возврат ВладелецСвойства.ДополнительныеРеквизиты.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ПСвойство),"Свойство").Значение; 
//		Исключение 
//		КонецПопытки;
//	КОнецЕсли;
//	
//	Если ВыводитьПредупреждение Тогда
//		Сообщить("Не найдено значение свойства "+ПСвойство+" объекта " + ВладелецСвойства);
//	КОнецЕсли;
//	
//	Возврат Неопределено;
//КонецФункции

Функция СведенияОВнешнейОбработке() Экспорт
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Наименование", "Обмен электронными документами EDISoft");
	РегистрационныеДанные.Вставить("Версия", "0.05");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Информация", "Обмен электронными документами EDISoft");
	
	ТЗКоманды = Новый ТаблицаЗначений;
	ТЗКоманды.Колонки.Добавить("Идентификатор");
	ТЗКоманды.Колонки.Добавить("Представление");
	ТЗКоманды.Колонки.Добавить("Модификатор");
	ТЗКоманды.Колонки.Добавить("ПоказыватьОповещение");
	ТЗКоманды.Колонки.Добавить("Использование");    
	СтрокаКоманды = ТЗКоманды.Добавить();
	СтрокаКоманды.Представление = "Обмен электронными документами EDISoft";
	СтрокаКоманды.ПоказыватьОповещение = Ложь;
	СтрокаКоманды.Использование = "ОткрытиеФормы";
	СтрокаКоманды.Идентификатор = "Обмен электронными документами EDISoft";    
	РегистрационныеДанные.Вставить("Команды", ТЗКоманды);    
	
	Возврат РегистрационныеДанные;
КонецФункции

Функция ИнициализироватьСвойствоОбъекта(Наименование,ТипЗнач,НазначениеСвойства) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СвойстваОбъектов.Ссылка
	               |ИЗ
	               |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК СвойстваОбъектов
	               |ГДЕ
	               |	СвойстваОбъектов.Заголовок = &Наименование
	               |	И СвойстваОбъектов.НаборСвойств = &НазначениеСвойства";
	
	Запрос.УстановитьПараметр("Наименование",Наименование);
	Запрос.УстановитьПараметр("НазначениеСвойства",НазначениеСвойства );
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Набор = НазначениеСвойства.ПолучитьОбъект(); 
		НовПВХ=Набор.ДополнительныеСведения.Добавить();
		Попытка
			ПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
			ПВХ.НаборСвойств	= НазначениеСвойства;
			ПВХ.Наименование		= Наименование + "(" + НазначениеСвойства.Наименование + ")";
			ПВХ.ТипЗначения			= ТипЗнач;
			ПВХ.Заголовок    = Наименование;
			ПВХ.ЭтоДополнительноеСведение = Истина;
			ПВХ.Виден = Истина;
			ПВХ.Доступен = Истина;
			ПВХ.Записать();
			НовПВХ.Свойство = ПВХ.Ссылка;
			Набор.Записать();
			ПВХ.ДополнительныеСвойства.Вставить("ИзмененныйНабор", НазначениеСвойства);
			Сообщить("Создан элемент плана видов характеристик ""СвойстваОбъектов"" с наименованием '"+Наименование+"' назначение "+НазначениеСвойства);
			возврат ПВХ.Ссылка;
		Исключение
			Сообщить("Не удалось создать элемент плана видов характеристик ""СвойстваОбъектов"" с наименованием '"+Наименование+"' назначение "+НазначениеСвойства);
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий(); 
		возврат Выборка.Ссылка;
	КонецЕсли; 
КонецФункции //

Процедура ЗаписатьСвойствоОбъекта(Объект,ПСвойство, Значение) Экспорт
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ПСвойство,Истина);
	Если НЕ ЗначениеЗаполнено(Свойство) Тогда
		Сообщить("Не найдено свойство " + ПСвойство);
		Возврат;
	КонецЕсли;
	//Свойство.НазначениеСвойства.ТипЗначения
	
	НаборД = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	НаборД.Объект = Объект.Ссылка;
	НаборД.Свойство = Свойство;
	НаборД.Значение = Значение;
	НаборД.Записать();
Конецпроцедуры

Функция ПолучитьЗначениеСвойстваОбъекта(ПСвойство,Объект, ВыводитьПредупреждение=Ложь) Экспорт
	Запрос = Новый Запрос;
	Если ЭтотОбъект.Бухгалтерия Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЗначенияСвойствОбъектов.Объект,
		               |	ЗначенияСвойствОбъектов.Свойство,
		               |	ЗначенияСвойствОбъектов.Значение
		               |ИЗ
		               |	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
		               |ГДЕ
		               |	ЗначенияСвойствОбъектов.Свойство.Заголовок = &Свойство
		               |	И ЗначенияСвойствОбъектов.Объект = &Объект";
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияСвойствОбъектов.Объект,
		|	ЗначенияСвойствОбъектов.Свойство,
		|	ЗначенияСвойствОбъектов.Значение
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство.Наименование = &Свойство
		|	И ЗначенияСвойствОбъектов.Объект = &Объект";
	КонецЕсли;
	Запрос.УстановитьПараметр("Свойство",	ПСвойство);
	Запрос.УстановитьПараметр("Объект",	Объект);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Если Тип("СправочникСсылка.ЗначенияСвойствОбъектов") = ТипЗнч(РезультатЗапроса.Значение) Тогда
			Возврат РезультатЗапроса.Значение.Наименование;
		Иначе
			Возврат РезультатЗапроса.Значение;
		КонецЕсли; 
	ИначеЕсли ВыводитьПредупреждение Тогда
		Сообщить("Не найдено значение по объекту " + Объект);
	КОнецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьОбъектПоЗначениюСвойства(Свойство, Значение, Тип = Неопределено, Сообщать = Ложь) Экспорт
	Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияСвойствОбъектов.Объект
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство.Наименование = &Наименование
		|	И ЗначенияСвойствОбъектов.Значение = &Значение
		|   "+?(ЗначениеЗаполнено(Тип),"И ЗначенияСвойствОбъектов.Объект ССЫЛКА "+Тип,"");
		Запрос.УстановитьПараметр("Наименование",Свойство);
		Запрос.УстановитьПараметр("Значение",Значение);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Возврат Результат.Объект;
		КонецЕсли;
		
	
	Если Сообщать = Истина Тогда
		Сообщить("Не найден объект типа """+Тип+""" со значением свойства """+Свойство+""" равным """+Значение+"""",СтатусСообщения.Внимание);
	КонецЕсли; 
КонецФункции

