&НаКлиенте
Перем ЭДИ_ОбщиеИнструменты;
&НаКлиенте
Перем ЭДИ_РаботаСБазойДанных;
&НаКлиенте
Перем ПолучательБД_Подключен;
&НаКлиенте
Перем Тек_ОбъектЗаписи;
&НаКлиенте
Перем Тек_ГЛН_Записи;
&НаКлиенте
Перем Тек_КодРегиона_Записи;
&НаКлиенте
Перем Тек_ФНС_ИД_Записи;

&НаКлиенте
Процедура ДобавитьЗапись(Команда)
	ФормаДобавления = ПолучитьФорму("ВнешняяОбработка.EDISOFT.Форма.ДобавлениеGLNКонтрагента");
	ФормаДобавления.ОткрытьМОдально();
	ОбновитьТаблицу();
КонецПроцедуры
&НаСервереБезКонтекста
Функция ПолучитьЗначениеИзСтроки(СтрКонтрагент)
	Возврат ЗначениеИзСтрокиВнутр(СтрКонтрагент);
КонецФункции
&НаКлиенте
Процедура ОбновитьТаблицу()
	
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();
	Отбор.Тип = "GLN";
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСписокСвойств(Отбор);	
	Если Запрос.Результат=0 тогда
		//Сообщить(Запрос.Сообщение);
	Иначе
		СписокДанных = Запрос.Содержимое;
		ТаблицаКОнтрагентов.Очистить();
		Для Сч=0 По СписокДанных.Верхнийиндекс() Цикл
			Свойство = СписокДанных.Получить(Сч);			
			ОБъектЗаписи = ПолучитьЗначениеИзСтроки(Свойство.Объект);
			Если ЗначениеЗаполнено(ФильтрСторонОбмена) Тогда
				Если НЕ (Строка(ТипЗнч(ОбъектЗаписи)) = ФильтрСторонОбмена) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока = ТаблицаКонтрагентов.Добавить();
			НоваяСтрока.Контрагент = ОБъектЗаписи;
			НоваяСТрока.GLN = Свойство.ИндексированныйАтрибут1;
			НоваяСТрока.FNS_ID = Свойство.ИндексированныйАтрибут2;
			НоваяСТрока.КодРегиона = Свойство.ИндексированныйАтрибут3;
		КонецЦикла; 		
	КонецЕслИ; 	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВосстановитьНастройкиПодключения();
	ПолучитьОбщиеИнструменты();
	
КонецПроцедуры

Процедура ВосстановитьНастройкиПодключения()
	Объект.ЭДИ_ИмяТаблицы = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ИмяТаблицы", "КлючЭДИ_ИмяТаблицы", "ЭДИ_ИмяТаблицы");
	Объект.ЭДИ_КаталогВнешнейБазыДанных = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_КаталогВнешнейБазыДанных", "КлючЭДИ_КаталогВнешнейБазыДанных", "ЭДИ_КаталогВнешнейБазыДанных");
	Объект.ЭДИ_ПарольБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ПарольБД", "КлючЭДИ_ПарольБД", "ЭДИ_ПарольБД");
	Объект.ЭДИ_ПользовательБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ПользовательБД", "КлючЭДИ_ПользовательБД", "ЭДИ_ПользовательБД");
	Объект.ЭДИ_ПортБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ПортБД", "КлючЭДИ_ПортБД",  "ЭДИ_ПортБД");
	Объект.ЭДИ_РежимРаботыБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_РежимРаботыБД", "КлючЭДИ_РежимРаботыБД",  "ЭДИ_РежимРаботыБД");
	Объект.ЭДИ_СерверБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_СерверБД", "КлючЭДИ_СерверБД",  "ЭДИ_СерверБД");	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОбщиеИнструменты()
	ЭДИ_ОбщиеИнструменты = Новый COMОбъект("EsTools1C.ExtTools");
	ПодключитьсяКБДПриОткрытии();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьсяКБДПриОткрытии()
	ПолучательБД_Подключен=ложь;   
	ЭДИ_ПараметрSQLITE=0;
	
	Если Объект.ЭДИ_РежимРаботыБД = "sqlite" тогда 
		ЭДИ_ПараметрSQLITE = 0;
		ЭДИ_СтрокаПодключения = СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных);
	ИначеЕсли Объект.ЭДИ_РежимРаботыБД = "MY" тогда 
		ЭДИ_СтрокаПодключения = "DRIVER={MySQL ODBC 5.3 ANSI Driver};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Port="+СокрЛП(Объект.ЭДИ_ПортБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";User="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Password="+СокрЛП(Объект.ЭДИ_ПарольБД)+";";  //MySQL
	ИначеЕсли Объект.ЭДИ_РежимРаботыБД = "PG" тогда  
		ЭДИ_СтрокаПодключения = "DSN=PostgreSQL30;Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Port="+СокрЛП(Объект.ЭДИ_ПортБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";UID="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";";   //PostgreSQL
	иначеЕсли Объект.ЭДИ_РежимРаботыБД = "MSNC10" тогда  
		ЭДИ_СтрокаПодключения = "Driver={SQL Server Native Client 10.0};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";Uid="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";"
	иначеЕсли Объект.ЭДИ_РежимРаботыБД = "MSNC11" тогда  
		ЭДИ_СтрокаПодключения = "Driver={SQL Server Native Client 11.0};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";Uid="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";"
	иначеЕсли Объект.ЭДИ_РежимРаботыБД = "MSSSD" тогда  
		ЭДИ_СтрокаПодключения = "Driver={SQL Server};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";Uid="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";"
	КонецЕСлИ; 
	
	Если ЭДИ_СтрокаПодключения="" тогда
		Предупреждение("Нет настроек подключения к БД!");
		Возврат;
	КонецеСли;

	ИмяТаблицыПолучатель = СокрЛП(Объект.ЭДИ_ИмяТаблицы);
	
	Попытка
		ЭДИ_РаботаСБазойДанных = ЭДИ_ОбщиеИнструменты.ПолучитьВнешнююБазуДанных(ЭДИ_СтрокаПодключения, Объект.ЭДИ_РежимРаботыБД, ЭДИ_ПараметрSQLITE, ИмяТаблицыПолучатель);
		Если ЭДИ_РаботаСБазойДанных.ЕстьОшибка=1 тогда
			ПолучательБД_Подключен = Ложь;
			Сообщить("Ошибка подключение к базе данных по причине: " + ЭДИ_РаботаСБазойДанных.СообщениеОшибки + ". Проверьте параметры подключения на странице настройки.");
		иначе	
			ПолучательБД_Подключен = Истина;			
		КонецЕСЛИ;
	исключение
		ПолучательБД_Подключен = Ложь;
		Сообщить(Описаниеошибки());
	Конецпопытки;
КонецПроцедуры


Процедура ВосттановитьЗначениеНастроек()
	ПутьКБД = ХранилищеОбщихНастроек.Загрузить("ОбъектПутьКВнешнейБД", "КлючПутьКВнешнейБД","ПутьКВнешнейБД");
	Если ЗначениеЗаполнено(ПутьКБД) Тогда
		Объект.ПутьКВнешнейБД = ПутьКБД;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура УдалитьЗапись(Команда)
	
	КоличествоВыделенныхСтрок = ЭтаФорма.Элементы.ТаблицаКонтрагентов.ВыделенныеСтроки.Количество();
	Сч = 0;
	Если КоличествоВыделенныхСтрок>0 Тогда
		Для Сч = 0 По КоличествоВыделенныхСтрок-1 Цикл
			НомерТекущейСтроки = ЭтаФорма.Элементы.ТаблицаКонтрагентов.ВыделенныеСтроки.Получить(Сч);
			ТекущаяСтрока = ТаблицаКонтрагентов.НайтиПоИдентификатору(НомерТекущейСтроки);
			Контрагент = ТекущаяСТрока.КОнтрагент;
			ГЛН = ТекущаяСтрока.GLN;
			Попытка
				УдалитьСтроку(Контрагент, ГЛН);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;	
	КонецЕсли;
	ОбновитьТаблицу();

КонецПроцедуры
&НаСервереБезКонтекста
Функция ЗначениеВСтрокуВнутрСервер(Контрагент)
	Возврат ЗначениеВСтрокуВнутр(Контрагент);
КонецФункции
&НаКлиенте
Процедура УдалитьСтроку(Контрагент, ГЛН)
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();
	Отбор.Тип = "GLN";
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Контрагент);
	Отбор.ИндексированныйАТрибут1 = СокрЛП(ГЛН);
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
	Если Запрос.Результат=0 тогда
		Сообщить("В БД Не найдена запись для контрагента " + Контрагент + " с глн " + ГЛН);
	Иначе
		Свойство = Запрос.Содержимое;
		Результат = ЭДИ_РаботаСБазойДанных.УдалитьСвойство(Свойство.Индекс);
		Если Результат.Результат = 0 Тогда
			Сообщить("Не удалось удалить запись по причине: " + Результат.Сообщение);
		КонецЕсли;
	КонецЕслИ; 		
КонецПроцедуры

&НаКлиенте
Процедура ФильтрСторонОбменаПриИзменении(Элемент)
	ОбновитьТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентовПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтрокиТаблицы = Элемент.ВыделенныеСтроки;
	КоличествоВыделенныхСтрок = ВыделенныеСтрокиТаблицы.Количество();
	Сч = 0;
	Если КоличествоВыделенныхСтрок>0 Тогда
		Для Сч = 0 По КоличествоВыделенныхСтрок-1 Цикл
			НомерТекущейСтроки = ВыделенныеСтрокиТаблицы.Получить(Сч);
			ТекущаяСтрока = ТаблицаКонтрагентов.НайтиПоИдентификатору(НомерТекущейСтроки);
			Контрагент = ТекущаяСТрока.КОнтрагент;
			ГЛН = ТекущаяСтрока.GLN;
			Попытка
				УдалитьСтроку(Контрагент, ГЛН);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;	
	КонецЕсли;
	ОбновитьТаблицу();// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновленнаяЗапись = Новый СТруктура;
	ОбновленнаяЗапись.Вставить("Контрагент",Элемент.ТекущиеДанные.Контрагент);
	ОбновленнаяЗапись.Вставить("КодРегиона",СокрЛП(Элемент.ТекущиеДанные.КодРегиона));
	ОбновленнаяЗапись.Вставить("GLN",СокрЛП(Элемент.ТекущиеДанные.GLN));
	ОбновленнаяЗапись.Вставить("FNS_ID",СокрЛП(Элемент.ТекущиеДанные.FNS_ID));
	ПерезаписатьЗапись(ОбновленнаяЗапись);
КонецПроцедуры

&НаКлиенте
Процедура ПерезаписатьЗапись(ОбновленнаяЗапись)

	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();
	Отбор.Тип = "GLN";
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Тек_ОбъектЗаписи);
	Отбор.ИндексированныйАТрибут1 = СокрЛП(Тек_ГЛН_Записи);
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
	
	Если Запрос.Результат=0 тогда
		Сообщить("В БД Не найдена запись для контрагента " + Тек_ОбъектЗаписи + " с глн " + Тек_ГЛН_Записи);
	Иначе
		
		Свойство = Запрос.Содержимое;
		Свойство.Объект = ЗначениеВСтрокуВнутрСервер(ОбновленнаяЗапись.Контрагент);//Результат = ЭДИ_РаботаСБазойДанных.УдалитьСвойство(Свойство.Индекс);
		Свойство.ИндексированныйАтрибут1 = ОбновленнаяЗапись.GLN;
		Свойство.ИндексированныйАтрибут2 = ОбновленнаяЗапись.FNS_ID;
		Свойство.ИндексированныйАтрибут3 = ОбновленнаяЗапись.КодРегиона;

		Результат = ЭДИ_РаботаСБазойДанных.ПерезаписатьПоИндексу(Свойство);
		
		Если Результат.Результат = 0 Тогда
			Сообщить("Не удалось удалить запись по причине: " + Результат.Сообщение);
		КонецЕсли;
		
	КонецЕслИ; 				
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКонтрагентовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Тек_ОбъектЗаписи = Элемент.ТекущиеДанные.Контрагент;
	Тек_КодРегиона_Записи = СокрЛП(Элемент.ТекущиеДанные.КодРегиона);
	Тек_ГЛН_Записи = СокрЛП(Элемент.ТекущиеДанные.GLN);
	Тек_ФНС_ИД_Записи = СокрЛП(Элемент.ТекущиеДанные.FNS_ID);
КонецПроцедуры
