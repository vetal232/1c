Перем СсылкаНаДокумент Экспорт;

//Перем ТекущаяСтрокаТаблицыПаллет,ТекущееКоличествоВСтрокеПаллеты;

&НаКлиенте
Процедура Принять(Команда)
	GLN_Организации = ПолучитьGLNОрганизации(Объект.Организация);
	СгенерироватьИПоменятьКодыПаллет(GLN_Организации);
	ЗаписатьКодSSCC();
	Сохранить(Неопределено);
КонецПроцедуры


&НаСервере
Функция ПолучитьСтруктуруНаСохранение()
	Структ = НовыЙ Структура;
	Структ.Вставить("ТабНом",ЗначениеВСтрокуВнутр(Объект.ТаблицаНоменклатуры));
	Возврат Структ;
КонецФункции


&НаКлиенте
Процедура Отменить(Команда)
	ЭтаФорма.Закрыть(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура АдинТуда(Команда,МножественныВыбор = Ложь)
	КоличествоКРаспределению = Неопределено;
	ТекущаяСтрокаТаблицыПаллет = ЭтаФорма.Элементы.ТаблицаПаллет.ТекущиеДанные;
	//Для каждого НомСтр Из ЭтаФорма.Элементы.ТаблицаНоменклатуры.ВыделенныеСтроки Цикл
	Для каждого ТекущаяСтрока из Объект.ТаблицаНоменклатуры Цикл
		Если ТекущаяСтрока.Выгружать = Ложь Тогда
			Продолжить;
		КонецЕсли;
		ТекущаяСтрока.Выгружать = Ложь;
		//ЭтаФорма.Элементы.ТаблицаНоменклатуры.ВыделенныеСтроки[ТекущаяСтрока]
		//ТекущаяСтрока = Объект.ТаблицаНоменклатуры[НомСтр-1];
		КоличествоНераспределено = ТекущаяСтрока.Количество - ТекущаяСтрока.Упаковано;
		Если ТекущаяСтрокаТаблицыПаллет = Неопределено Тогда
			Сообщить("Не выбрана палета.",СтатусСообщения.Информация);
			Прервать;
		ИначеЕсли КоличествоНераспределено = 0 Тогда
			Сообщить("Позиция "+ТекущаяСтрока.номенклатура+" полностью распределена.",СтатусСообщения.Информация);
			Продолжить;
		КонецЕсли; 
		
		Если Команда.Имя = "КнопкаДобавитьЧасть" Тогда
			Если КоличествоКРаспределению = Неопределено Тогда
				Если ЭтаФорма.Элементы.ТаблицаНоменклатуры.ВыделенныеСтроки.Количество()>1 Тогда
					КоличествоКРаспределению = 0;
				Иначе
					КоличествоКРаспределению = КоличествоНераспределено;
				КонецЕсли; 
				
				Если Не ВвестиЧисло(КоличествоКРаспределению,"Максимум к распределению: "+Формат(КоличествоНераспределено,"ЧДЦ=3; ЧГ="),,3) Тогда
					//ПоказатьВводЧисла
					Прервать;
				КонецЕсли;
			КонецЕсли;
			Если (КоличествоКРаспределению<=0) Тогда
				Предупреждение("Неправильно указано количество к распределению.");
				Прервать;
			КонецЕсли;
		ИначеЕсли Команда.Имя = "КнопкаДобавитьВсе" Тогда
			КоличествоКРаспределению = КоличествоНераспределено;
		КонецЕсли;
		
		НоваяРаспределеннаяСтрока = ДобавитьТоварНаПаллету(ТекущаяСтрока.Номенклатура,ТекущаяСтрока.ХарактеристикаНоменклатуры,КоличествоКРаспределению,ТекущаяСтрокаТаблицыПаллет.SSCC);
		ТекущаяСтрокаТаблицыПаллет.Упаковано = ТекущаяСтрокаТаблицыПаллет.Упаковано + НоваяРаспределеннаяСтрока.Упаковано;
		Если МножественныВыбор = Ложь Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура АдинОбратно(Команда)
	МассивСтрок = Новый Массив;
	Для каждого ТекущаяСтрока Из Объект.ТаблицаРаспределения Цикл
		Если ТекущаяСтрока.Выгружать Тогда
			МассивСтрок.Добавить(ТекущаяСтрока);
			ТекущаяСтрока.Выгружать = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	КоличествоИзРаспределения = Неопределено;
	Для каждого ТекущаяСтрока Из МассивСтрок Цикл
		Если Команда.Имя = "КнопкаВернутьЧасть" Тогда
			Если КоличествоИзРаспределения = Неопределено Тогда
				КоличествоИзРаспределения = 1.000;
				Если Не ВвестиЧисло(КоличествоИзРаспределения,"Максимум к возврату: "+Формат(ТекущаяСтрока.Упаковано,"ЧДЦ=3; ЧГ="),,3) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли; 
			 
			Если (КоличествоИзРаспределения<=0) Тогда
				Предупреждение("Неправильно указано количество к возврату.");
				Прервать;
			КонецЕсли;
		ИначеЕсли (Команда.Имя = "КнопкаВернутьВсе") Тогда
			КоличествоИзРаспределения = ТекущаяСтрока.Упаковано;
		КонецЕсли;
		
		УбратьТоварСПаллеты(ТекущаяСтрока, КоличествоИзРаспределения);
		Попытка
			СтрокаТаблицыПаллет = Объект.ТаблицаПаллет.НайтиСтроки(Новый Структура("SSCC", ТекущаяСтрока.SSCC)).Получить(0);
			СтрокаТаблицыПаллет.Упаковано = СтрокаТаблицыПаллет.Упаковано - КоличествоИзРаспределения;
		Исключение
			КоличествоНераспределено = 0;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция УбратьТоварСПаллеты(РаспределеннаяСтрока, Количество)
	Если РаспределеннаяСтрока.Упаковано<Количество Тогда
		КоличествоИзменение = РаспределеннаяСтрока.Упаковано;
	Иначе
		КоличествоИзменение = Количество;
	КонецЕсли; 
	
	Попытка
		НеРаспределено = Объект.ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", РаспределеннаяСтрока.Номенклатура, РаспределеннаяСтрока.ХарактеристикаНоменклатуры)).Получить(0);
		НеРаспределено.Упаковано = НеРаспределено.Упаковано-КоличествоИзменение;
	Исключение
	КонецПопытки; 
	
	РаспределеннаяСтрока.Упаковано = РаспределеннаяСтрока.Упаковано-КоличествоИзменение;
	Если РаспределеннаяСтрока.Упаковано = 0 Тогда
		Объект.ТаблицаРаспределения.Удалить(РаспределеннаяСтрока);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ВсеТуда(Команда)
	АдинТуда(Команда,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВсеОбратно(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруСтрокДокумента(Док)
	Структура = Новый Структура;
	ВремТаб = Док.Товары.Выгрузить();
	Если Объект.Бухгалтерия=Ложь Тогда
		ВремТаб.Свернуть("Номенклатура,СтавкаНДС,Цена","Сумма,СуммаНДС,СуммаСНДС,Количество,КоличествоУпаковок");
	Иначе
		ВремТаб.Свернуть("Номенклатура,СтавкаНДС,Цена","Сумма,СуммаНДС,Количество");
	КонецЕсли;
	Для каждого СтрокаТаблицы Из ВремТаб Цикл
		СтрокаНоменклатуры = Объект.ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры,СтрокаТаблицы);
	КонецЦикла;
	Возврат 0;
КонецФункции

&НаСервере
Функция СколькоУпаковано(Ном)
	Возврат Объект.ТаблицаРаспределения.Выгрузить(Новый Структура("Номенклатура", Ном)).Итог("Упаковано");
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Объект.ТаблицаНоменклатуры.Очистить();
	СтрТов = ПолучитьСтруктуруСтрокДокумента(Объект.ДокументДляПаллет);

	Для каждого СтрокаНоменклатуры Из Объект.ТаблицаНоменклатуры Цикл
		//СтрокаНоменклатуры = Объект.ТаблицаНоменклатуры.Добавить();
		//ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры,СтрокаТаблицы);
		СтрокаНоменклатуры.Штрихкод = ЭтаФорма.ВладелецФормы.ПолучитьКодТовара("EAN", СтрокаНоменклатуры.Номенклатура);
		//ПолучитьКодТовара
		СтрокаНоменклатуры.КодПокупателя = ЭтаФорма.ВладелецФормы.ПолучитьКодТовара("BuyerItemCode", СтрокаНоменклатуры.Номенклатура);;
		СтрокаНоменклатуры.КодПродавца = ЭтаФорма.ВладелецФормы.ПолучитьКодТовара("SupplierItemCode", СтрокаНоменклатуры.Номенклатура);
		СтрокаНоменклатуры.Упаковано = СколькоУпаковано(СтрокаНоменклатуры.Номенклатура);
		
		Если СтрокаНоменклатуры.Упаковано>СтрокаНоменклатуры.Количество Тогда
			МассивУдаляемыхСтрок = Новый Массив;
			РаспределенныеСтрокиНоменклатуры = Объект.ТаблицаРаспределения.НайтиСтроки(Новый Структура("Номенклатура", СтрокаНоменклатуры.Номенклатура));
			Разница = СтрокаНоменклатуры.Упаковано-СтрокаНоменклатуры.Количество;
			
			Для N = 1 По РаспределенныеСтрокиНоменклатуры.Количество() Цикл
				РаспределеннаяНоменклатура = РаспределенныеСтрокиНоменклатуры.Получить(РаспределенныеСтрокиНоменклатуры.Количество()-N);
				МассивУдаляемыхСтрок.Добавить(РаспределеннаяНоменклатура);
				Разница = Разница-РаспределеннаяНоменклатура.Упаковано;
				Если Разница<=0 Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
				Объект.ТаблицаРаспределения.Удалить(УдаляемаяСтрока);
			КонецЦикла; 
			
			СтрокаНоменклатуры.Упаковано = Объект.ТаблицаРаспределения.Выгрузить(Новый Структура("Номенклатура", СтрокаНоменклатуры.Номенклатура)).Итог("Упаковано");
		КонецЕсли; 
	КонецЦикла;
	//ПриОткрытииНаСервере();
	ЗагрузитьКодSSCC();
	//ТекущаяСтрокаТаблицыПаллет = Неопределено;
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	ПутьКБД = ХранилищеОбщихНастроек.Загрузить("ОбъектПутьКВнешнейБД", "КлючПутьКВнешнейБД","ПутьКВнешнейБД");
	Если ЗначениеЗаполнено(ПутьКБД) Тогда
		Объект.ПутьКВнешнейБД = ПутьКБД;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Параметры.Документ) тогда
		Объект.ДокументДляПаллет = Параметры.Документ;
		Объект.Организация = Параметры.Документ.Организация;
		Объект.ПутьКВнешнейБД = Параметры.ПутьКВнешнейБД;
		Объект.Бухгалтерия = Параметры.Бухгалтерия;
	Иначе
		Сообщить("Не заполне параметр документ");
		Отказ = истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПаллетТипПаллетыПриИзменении(Элемент)
	ТекущаяСтрока = ЭтаФорма.Элементы.ТаблицаПаллет.ТекущиеДанные;
	Если ТекущаяСтрока.ТипПаллеты = "201" Тогда
		Если ЕдиницаИзмеренияРазмеров = "CMT" Тогда
			ТекущаяСтрока.Длина = 120;
			ТекущаяСтрока.Ширина = 80;
		ИначеЕсли ЕдиницаИзмеренияРазмеров = "MMT" Тогда
			ТекущаяСтрока.Длина = 1200;
			ТекущаяСтрока.Ширина = 800;
		ИначеЕсли ЕдиницаИзмеренияРазмеров = "MTR" Тогда
			ТекущаяСтрока.Длина = 1.20;
			ТекущаяСтрока.Ширина = 0.80;
		КонецЕсли; 
	ИначеЕсли ТекущаяСтрока.ТипПаллеты = "202" Тогда
		Если ЕдиницаИзмеренияРазмеров = "CMT" Тогда
			ТекущаяСтрока.Длина = 120;
			ТекущаяСтрока.Ширина = 100;
		ИначеЕсли ЕдиницаИзмеренияРазмеров = "MMT" Тогда
			ТекущаяСтрока.Длина = 1200;
			ТекущаяСтрока.Ширина = 1000;
		ИначеЕсли ЕдиницаИзмеренияРазмеров = "MTR" Тогда
			ТекущаяСтрока.Длина = 1.20;
			ТекущаяСтрока.Ширина = 1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПаллетТипПаллетыПриДобавлении(ТекущаяСтрока)
	//ТекущаяСтрока = ЭтаФорма.Элементы.ТаблицаПаллет.ТекущиеДанные;
	Если ТекущаяСтрока.ТипПаллеты = "201" Тогда
		Если ЕдиницаИзмеренияРазмеров = "CMT" Тогда
			ТекущаяСтрока.Длина = 120;
			ТекущаяСтрока.Ширина = 80;
		ИначеЕсли ЕдиницаИзмеренияРазмеров = "MMT" Тогда
			ТекущаяСтрока.Длина = 1200;
			ТекущаяСтрока.Ширина = 800;
		ИначеЕсли ЕдиницаИзмеренияРазмеров = "MTR" Тогда
			ТекущаяСтрока.Длина = 1.20;
			ТекущаяСтрока.Ширина = 0.80;
		КонецЕсли; 
	ИначеЕсли ТекущаяСтрока.ТипПаллеты = "202" Тогда
		Если ЕдиницаИзмеренияРазмеров = "CMT" Тогда
			ТекущаяСтрока.Длина = 120;
			ТекущаяСтрока.Ширина = 100;
		ИначеЕсли ЕдиницаИзмеренияРазмеров = "MMT" Тогда
			ТекущаяСтрока.Длина = 1200;
			ТекущаяСтрока.Ширина = 1000;
		ИначеЕсли ЕдиницаИзмеренияРазмеров = "MTR" Тогда
			ТекущаяСтрока.Длина = 1.20;
			ТекущаяСтрока.Ширина = 1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПаллетВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	//ЭтаФорма.Элементы.ТаблицаРаспределения.ОтборСтрок.Свойство(
	//ЭтаФорма.Элементы.ТаблицаРаспределения.ОтборСтрок.SSCC.Значение = ВыбраннаяСтрока.SSCC;
	//ЭтаФорма.Элементы.ТаблицаРаспределения.ОтборСтрок.SSCC.Использование = Истина;
	//ТекущаяСтрокаТаблицыПаллет = ВыбраннаяСтрока;
	//ЭтаФорма.Элементы.ТаблицаПаллет.ТекущаяСтрока = ВыбраннаяСтрока;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПаллетПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	ТекущаяСтрока = ЭтаФорма.Элементы.ТаблицаПаллет.ТекущиеДанные;
	Если Копирование = Ложь Тогда
		НоваяПаллета = Объект.ТаблицаПаллет.Добавить();
		НоваяПаллета.SSCC = Формат(ТекущаяДата(),"ДФ=yyyyMMddhhmmss_")+Формат(ГСЧ.СлучайноеЧисло(999999999),"ЧЦ=10; ЧВН=; ЧГ=");
		//НоваяПаллета.SSCC = ПолучитьКодПал();
		НоваяПаллета.ТипПаллеты = "201";
		ТаблицаПаллетВыбор(,НоваяПаллета,,);
		ТаблицаПаллетТипПаллетыПриДобавлении(НоваяПаллета);
	Иначе
		НоваяПаллета = Объект.ТаблицаПаллет.Добавить();
		НоваяПаллета.SSCC = Формат(ТекущаяДата(),"ДФ=yyyyMMddhhmmss_")+Формат(ГСЧ.СлучайноеЧисло(999999999),"ЧЦ=10; ЧВН=; ЧГ=");
		//НоваяПаллета.SSCC = ПолучитьКодПал();
		НоваяПаллета.ТипПаллеты = ТекущаяСтрока.ТипПаллеты;
		НоваяПаллета.Вес = ТекущаяСтрока.Вес;
		НоваяПаллета.Высота = ТекущаяСтрока.Высота;
		НоваяПаллета.Длина = ТекущаяСтрока.Длина;
		НоваяПаллета.Ширина = ТекущаяСтрока.Ширина;
		ТаблицаПаллетВыбор(,НоваяПаллета,,);
		
		КопируемыеСтрокиРаспределенные = Объект.ТаблицаРаспределения.НайтиСтроки(Новый Структура("SSCC", ТекущаяСтрока.SSCC));
		Если КопируемыеСтрокиРаспределенные.Количество()>0 Тогда
			Если Вопрос("Скопировать содержимое текущей палеты?", РежимДиалогаВопрос.ДаНет,,,"Копирование палеты") = КодВозвратаДиалога.Да Тогда
				Для каждого РаспределеннаяСтрока Из КопируемыеСтрокиРаспределенные Цикл
					НоваяРаспределеннаяСтрока = ДобавитьТоварНаПаллету(РаспределеннаяСтрока.Номенклатура,РаспределеннаяСтрока.ХарактеристикаНоменклатуры,РаспределеннаяСтрока.Упаковано,НоваяПаллета.SSCC);
					Если НоваяРаспределеннаяСтрока = Неопределено Тогда
						Сообщить("На копию палеты не удалось добавить номенклатуру "+РаспределеннаяСтрока.Номенклатура,СтатусСообщения.ОченьВажное);
					ИначеЕсли НоваяРаспределеннаяСтрока.Упаковано = РаспределеннаяСтрока.Упаковано Тогда
						Сообщить("На копию палеты добавлена номенклатура "+РаспределеннаяСтрока.Номенклатура+" в полном количестве ("+РаспределеннаяСтрока.Упаковано+")",СтатусСообщения.Информация);
					Иначе
						Сообщить("На копию палеты добавлена номенклатура "+РаспределеннаяСтрока.Номенклатура+" не в полном количестве ("+НоваяРаспределеннаяСтрока.Упаковано+" из "+РаспределеннаяСтрока.Упаковано+")",СтатусСообщения.Внимание);
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;  
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ДобавитьТоварНаПаллету(Номенклатура, ХарактеристикаНоменклатуры, Количество, SSCC)
	Попытка
		НеРаспределено = Объект.ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", Номенклатура, ХарактеристикаНоменклатуры)).Получить(0);
		КоличествоНераспределено = НеРаспределено.Количество - НеРаспределено.Упаковано;
	Исключение
		КоличествоНераспределено = 0;
	КонецПопытки; 
	
	Если КоличествоНераспределено = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	НоваяРаспределеннаяСтрока = Объект.ТаблицаРаспределения.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяРаспределеннаяСтрока,НеРаспределено);
	НоваяРаспределеннаяСтрока.SSCC = SSCC;
	
	Если (Количество = -1) Тогда//переносим все что есть на позиции
		НоваяРаспределеннаяСтрока.Упаковано = КоличествоНераспределено;
		НеРаспределено.Упаковано = НеРаспределено.Упаковано+КоличествоНераспределено;
	ИначеЕсли (КоличествоНераспределено>=Количество) тогда//пеерносим столько сколько нужно
		НоваяРаспределеннаяСтрока.Упаковано = Количество;
		НеРаспределено.Упаковано = НеРаспределено.Упаковано+Количество;
	ИначеЕсли (КоличествоНераспределено<Количество) тогда//переносим все что осталось
		НоваяРаспределеннаяСтрока.Упаковано = КоличествоНераспределено;
		НеРаспределено.Упаковано = НеРаспределено.Упаковано+КоличествоНераспределено;
	КонецЕсли; 
	
	Возврат НоваяРаспределеннаяСтрока;
КонецФункции

&НаКлиенте
Процедура ЕдиницаИзмеренияРазмеровПриИзменении(Элемент)
	Для Каждого Стр из Объект.ТаблицаПаллет Цикл
		ТаблицаПаллетТипПаллетыПриДобавлении(Стр);
	КонецЦикла;
	
	//ТаблицаПаллетТипПаллетыПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПаллетПриАктивизацииСтроки(Элемент)
	//ТекущаяСтрокаТаблицыПаллет  = ЭтаФорма.Элементы.ТаблицаПаллет.ТекущиеДанные;
КонецПроцедуры


&НаСервере
Функция ПреобразоватьТаблицуЗначенийВМассив(тзДанные,Реквизиты) Экспорт
    
    мсДанные = Новый Массив;
    Об = РеквизитФормыВЗначение("Объект");    
    // Запишем в массив
    Для Каждого СтрокаТЗ Из тзДанные Цикл
        стСтрокаТаблицы = Новый Структура;
        Для Каждого ИмяКолонки Из Реквизиты Цикл
            стСтрокаТаблицы.Вставить(ИмяКолонки.Имя, СтрокаТЗ[ИмяКолонки.Имя]);
        КонецЦикла;
        
        мсДанные.Добавить(стСтрокаТаблицы);
        
    КонецЦикла;
    
    Возврат мсДанные;
    
КонецФункции // ПреобразоватьТаблицуЗначенийВМассив()

// Функция преобразует Массив из структур в ТаблицуЗначений.
//
&НаСервере
Функция ПреобразоватьМассивВТаблицуЗначений(мсДанные) Экспорт
    
    тзДанные = Новый ТаблицаЗначений;
	Если мсДанные.Количество() > 0 Тогда
		ЭлементМассива = мсДанные[0];
	    Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
			        тзДанные.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
		КонецЦикла;
	КонецЕсли;		
    Для Каждого ЭлементМассива Из мсДанные Цикл
        // Рисуем колонки для таблицы
		//Если тзДанные.Колонки.Количество() = 0 Тогда
			//Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
			//    тзДанные.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
			//КонецЦикла;
		//КонецЕсли;
        
        // Добавляем данные в таблицу
        НоваяСтрока = тзДанные.Добавить();
        Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
            НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
        КонецЦикла;
    КонецЦикла;
    
    Возврат тзДанные;
    
КонецФункции // ПреобразоватьМассивВТаблицуЗначений()

&НаСервере
Функция ПреобразоватьТаблицы(БоковаяРазгрузка,ЕдиницаИзмеренияРазмеров,ТемпературныйРежим)
	Структура = Новый Структура;
	Структура.Вставить("Документ",Объект.ДокументДляПаллет);
	Документ = РеквизитФормыВЗначение("Объект");
	Структура.Вставить("БоковаяРазгрузка",БоковаяРазгрузка);
	Структура.Вставить("ЕдиницаИзмеренияРазмеров",ЕдиницаИзмеренияРазмеров);
	Структура.Вставить("ТемпературныйРежим",ТемпературныйРежим);
	
	Структура.Вставить("Водитель",Водитель);
	Структура.Вставить("Марка",Марка);
	Структура.Вставить("НомерМашины",НомерМашины);
		
	Структура.Вставить("ТаблицаНоменклатуры",Документ.ТаблицаНоменклатуры.Выгрузить());
	Структура.Вставить("ТаблицаПаллет",Документ.ТаблицаПаллет.Выгрузить());
	Структура.Вставить("ТаблицаРаспределения",Документ.ТаблицаРаспределения.Выгрузить());
	//Реквизиты = Документ.метаданные().ТабличныеЧасти.ТаблицаБД.Реквизиты;
	//Реквизиты = Документ.метаданные().ТабличныеЧасти.ТаблицаНоменклатуры.Реквизиты;	
	//Структура.Вставить("ТаблицаНоменклатуры",ПреобразоватьТаблицуЗначенийВМассив(Документ.ТаблицаНоменклатуры,Реквизиты));
	//Реквизиты = Документ.метаданные().ТабличныеЧасти.ТаблицаПаллет.Реквизиты;	
	//Структура.Вставить("ТаблицаПаллет",ПреобразоватьТаблицуЗначенийВМассив(Документ.ТаблицаПаллет,Реквизиты));
	//Реквизиты = Документ.метаданные().ТабличныеЧасти.ТаблицаРаспределения.Реквизиты;	
	//Структура.Вставить("ТаблицаРаспределения",ПреобразоватьТаблицуЗначенийВМассив(Документ.ТаблицаРаспределения,Реквизиты));
	Возврат ЗначениеВСтрокуВнутр(Структура);
КонецФункции

&НаСервере
Функция ЗначениеВСтрокуВнутрСервер(ОбъектСвойства)
	Возврат ЗначениеВСтрокуВнутр(ОбъектСвойства);	
КонецФункции

&НаКлиенте
Процедура Сохранить(Команда)
	//ОбщегоНазначения.ТаблицаЗначенийВМассив(
	
	Структ = ПреобразоватьТаблицы(ЭтаФорма.БоковаяРазгрузка,ЭтаФорма.ЕдиницаИзмеренияРазмеров,ЭтаФорма.ТемпературныйРежим);
	РаботаСБиблиотекой = Новый COMОбъект("EsTools1C.ExtTools");
	СтрокаПодключения = Объект.ПутьКВнешнейБД;
	ТипБД = "sqlite";
	РаботаСБД = РаботаСБиблиотекой.ПолучитьВнешнююБазуДанных(СтрокаПодключения, ТипБД);

	СтрДатаСвойства = ПреобразоватьДатуВЧисло(ТекущаяДата());
	НоваяЗапись = РаботаСБД.ПолучитьПустуюЗапись(); 
	НоваяЗапись.Объект = ЗначениеВСтрокуВнутрСервер(Объект.ДокументДляПаллет);	
	НоваяЗапись.Тип = "DISTR_SSCC";
	НоваяЗапись.Дата = СтрДатаСвойства;
	НоваяЗапись.Данные = Структ; 
	//НоваяЗапись.ИндексированныйАтрибут1 = GLN;
	//НоваяЗапись.ИндексированныйАтрибут2 = FNS_ID;
	//НоваяЗапись.ИндексированныйАтрибут3 = КодРегиона;
	Результат = РаботаСБД.ЗаписатьСвойство(НоваяЗапись);
	ЗаписатьКодSSCC();
	//Возврат Результат.Результат();
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	РаботаСБиблиотекой = Новый COMОбъект("EsTools1C.ExtTools");
	СтрокаПодключения = Объект.ПутьКВнешнейБД;
	ТипБД = "sqlite";
	РаботаСБД = РаботаСБиблиотекой.ПолучитьВнешнююБазуДанных(СтрокаПодключения, ТипБД);
	Отбор = РаботаСБД.ПолучитьПустуюЗапись();
	Отбор.Тип = "DISTR_SSCC";
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Объект.ДокументДляПаллет);
	Запрос = РаботаСБД.ПолучитьСписокСвойств(Отбор);	
	Если Запрос.Результат=0 тогда
		//Сообщить(Запрос.Сообщение);
	Иначе
		СписокДанных = Запрос.Содержимое;
		Для Сч=0 По СписокДанных.Верхнийиндекс() Цикл
			Свойство = СписокДанных.Получить(Сч);
			Структ= Свойство.Данные;
			ЗагрузитьНаСервере(Структ);
			//ЭтаФорма.БоковаяРазгрузка = Структ.БоковаяРазгрузка;
			//ЭтаФорма.ЕдиницаИзмеренияРазмеров = Структ.ЕдиницаИзмеренияРазмеров;
			//ЭтаФорма.ТемпературныйРежим = Структ.ТемпературныйРежим;
		КонецЦикла; 		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНаСервере(Структ)
	СтруктураСервер = ЗначениеИзСтрокиВнутр(Структ);
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ТаблицаНоменклатуры.Загрузить(СтруктураСервер.ТаблицаНоменклатуры);
	Документ.ТаблицаПаллет.Загрузить(СтруктураСервер.ТаблицаПаллет);
	Документ.ТаблицаРаспределения.Загрузить(СтруктураСервер.ТаблицаРаспределения);
	БоковаяРазгрузка = СтруктураСервер.БоковаяРазгрузка;
	ЕдиницаИзмеренияРазмеров = СтруктураСервер.ЕдиницаИзмеренияРазмеров;
	ТемпературныйРежим = СтруктураСервер.ТемпературныйРежим;
	
	Водитель = СтруктураСервер.Водитель;
	Марка = СтруктураСервер.Марка;
	НомерМашины = СтруктураСервер.НомерМашины;
	
	ЗначениеВРеквизитФормы(Документ, "Объект");
	//Структ = ЗначениеИзСтрокиВнутр(Структ);
	//Таб = ПреобразоватьМассивВТаблицуЗначений(Структ.ТаблицаНоменклатуры);
	//Объект.ТаблицаНоменклатуры.Загрузить(Таб);
	//
	//Объект.ТаблицаНоменклатуры.Загрузить(Структ.ТаблицаНоменклатуры1);
	//
	//Таб = ПреобразоватьМассивВТаблицуЗначений(Структ.ТаблицаПаллет);
	//Объект.ТаблицаПаллет.Загрузить(Таб);
	//
	//Таб = ПреобразоватьМассивВТаблицуЗначений(Структ.ТаблицаРаспределения);
	//Объект.ТаблицаРаспределения.Загрузить(Таб);
КонецФункции



Функция ПреобразоватьДатуВЧисло(ДатаДляПреобразования)
	СтрокаДата = Строка(Год(ДатаДляПреобразования)) + Строка(Месяц(ДатаДляПреобразования)) + Строка(День(ДатаДляПреобразования));
	Возврат Число(СтрокаДата);
КонецФункции

&НаКлиенте
Процедура ЗагрузитьКодSSCC()
	РаботаСБиблиотекой = Новый COMОбъект("EsTools1C.ExtTools");
	СтрокаПодключения = Объект.ПутьКВнешнейБД;
	ТипБД = "sqlite";
	РаботаСБД = РаботаСБиблиотекой.ПолучитьВнешнююБазуДанных(СтрокаПодключения, ТипБД);
	Отбор = РаботаСБД.ПолучитьПустуюЗапись();
	Отбор.Тип = "SSCC";
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Объект.Организация);
	Запрос = РаботаСБД.ПолучитьСписокСвойств(Отбор);	
	Если Запрос.Результат=0 тогда
		Объект.ТекущийSSCC = "";
	Иначе
		СписокДанных = Запрос.Содержимое;
		Для Сч=0 По СписокДанных.Верхнийиндекс() Цикл
			Свойство = СписокДанных.Получить(Сч);
			объект.ТекущийSSCC = Число(Свойство.ИндексированныйАтрибут2);
		КонецЦикла; 		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКодSSCC()
	Структ = ПреобразоватьТаблицы(ЭтаФорма.БоковаяРазгрузка,ЭтаФорма.ЕдиницаИзмеренияРазмеров,ЭтаФорма.ТемпературныйРежим);
	РаботаСБиблиотекой = Новый COMОбъект("EsTools1C.ExtTools");
	СтрокаПодключения = Объект.ПутьКВнешнейБД;
	ТипБД = "sqlite";
	РаботаСБД = РаботаСБиблиотекой.ПолучитьВнешнююБазуДанных(СтрокаПодключения, ТипБД);

	СтрДатаСвойства = ПреобразоватьДатуВЧисло(ТекущаяДата());
	НоваяЗапись = РаботаСБД.ПолучитьПустуюЗапись(); 
	НоваяЗапись.Объект = ЗначениеВСтрокуВнутрСервер(Объект.Организация);	
	НоваяЗапись.Тип = "SSCC";
	НоваяЗапись.Дата = СтрДатаСвойства;
	//НоваяЗапись.Данные = Структ; 
	//НоваяЗапись.ИндексированныйАтрибут1 = GLN;
	НоваяЗапись.ИндексированныйАтрибут2 = Строка(Объект.ТекущийSSCC);
	//НоваяЗапись.ИндексированныйАтрибут3 = КодРегиона;
	Результат = РаботаСБД.ЗаписатьСвойство(НоваяЗапись);
КонецПроцедуры

&НаСервере
Функция ПолучитьОрганизациюИзДокумента(Док)
	Объект.Организация = Объект.ДокументДляПаллет.Организация;
КонецФункции


Функция ПолучитьКодПал(ГЛН)
	Если (Объект.ТекущийSSCC = Неопределено) или Объект.ТекущийSSCC >= 9999999 Тогда
		Объект.ТекущийSSCC = 0;
		//ДатаСбросаSSCC = НачалоТекущегоДня;
	Иначе
		Объект.ТекущийSSCC = Объект.ТекущийSSCC+1;
	КонецЕсли;
	//КонецЕсли; 
	//Объект.ТекущийSSCC = Объект.ТекущийSSCC+1;
	//Если Объект.ТекущийSSCC + Объект.ТаблицаПаллет.Количество() >= 9999999 Тогда
	//	НовыйПорядковыйНомер = Макс(Объект.ТаблицаПаллет.Количество() - (9999999 - Объект.ТекущийSSCC), 0);	
	//Иначе 
	//	Объект.ТекущийSSCC = Объект.ТекущийSSCC+Объект.ТаблицаПаллет.Количество();
	//КонецЕсли;
	//ГЛНОрг = ПолучитьGLNОрганизации(Объект.Организация);
	Если ЗначениеЗаполнено(ГЛН) Тогда 
		Возврат СгенерироватьSSCC(ГЛН,Объект.ТекущийSSCC);
	Иначе
		Сообщить("");
		Возврат Неопределено;
	Конецесли;
	//Возврат Объект.ТекущийSSCC; 
КонецФункции

&НаКлиенте
Функция ПолучитьGLNОрганизации(Организация)
	РаботаСБиблиотекой = Новый COMОбъект("EsTools1C.ExtTools");
	СтрокаПодключения = Объект.ПутьКВнешнейБД;
	ТипБД = "sqlite";
	РаботаСБД = РаботаСБиблиотекой.ПолучитьВнешнююБазуДанных(СтрокаПодключения, ТипБД);
	
	Отбор = РаботаСБД.ПолучитьПустуюЗапись();	
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Организация);
	Отбор.Тип = "GLN";
	Запрос = РаботаСБД.ПолучитьСвойство(Отбор);	
	
	Если Запрос.Результат=0 тогда
		Сообщить("Не удалось получить GLN Организации! Документ не выгружен!");
		Возврат Неопределено;
	Иначе
		Свойство = Запрос.Содержимое;		
		GLN = Свойство.ИндексированныйАтрибут1;//gln
		Возврат GLN;
	КонецЕсли;

	Если Объект.ПолучатьОрганизациюИзНастроек Тогда
		Возврат ПолучитьЗначениеСвойстваОбъектаДФормы("GLN", Организация);
	Иначе
		ВОзврат Объект.GLNОрганизацииПОУмолчанию;
	КонецЕсли;
КонецФункции

Функция ПолучитьЗначениеСвойстваОбъектаДФормы(ПСвойство, ВладелецСвойства, ВыводитьСообщение=Ложь)
	//ОбъектОбработка.ИнициализироватьСвойствоОбъекта(ПСвойство,ВладелецСвойства,ВыводитьСообщение);
	//Результат = Неопределено;	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Результат = ОбъектОбработка.ПолучитьЗначениеСвойстваОбъекта(ПСвойство, ВладелецСвойства, ВыводитьСообщение=Ложь);
	Возврат результат;
	
КонецФункции


Функция СгенерироватьSSCC(GLN_Организации,ПорядковыйНомерПалеты,SKU = 1)
	П_GLN = Формат(GLN_Организации,"ЧЦ=13; ЧДЦ=0; ЧВН=; ЧГ=0");
	П_ПорядковыйНомерПалеты = Формат(ПорядковыйНомерПалеты,"ЧЦ=7; ЧДЦ=0; ЧВН=; ЧГ=0");
	П_SKU = Строка(SKU);
	
	П_НомерПалеты = П_SKU+Лев(П_GLN,9)+П_ПорядковыйНомерПалеты;
	КонтрольнаяСумма = 0;
	Для Счетчик=1 По 17 Цикл
		Коэфф = ?((Счетчик%2)=0,1,3);
		КонтрольнаяСумма = КонтрольнаяСумма + Число(Сред(П_НомерПалеты,Счетчик,1))*Коэфф;
	КонецЦикла;
	КонтрольноеЧисло = (10-КонтрольнаяСумма%10)%10;
	НомерПалеты = П_НомерПалеты + КонтрольноеЧисло;
	
	Возврат НомерПалеты;
КонецФункции

&НаСервере
Функция ПолучитьМасс(ИмяКолонки)
	//Документ = РеквизитФормыВЗначение("Объект");
	Возврат РеквизитФормыВЗначение("Объект").ТаблицаПаллет.ВыгрузитьКолонку("SSCC");
КонецФункции

&НаСервере
Процедура СгенерироватьИПоменятьКодыПаллет(GLN_Организации,УдалятьПустые = Истина)
	Документ = РеквизитФормыВЗначение("Объект");
	Если Объект.ТаблицаНоменклатуры.Итог("Количество") <> Объект.ТаблицаНоменклатуры.Итог("Упаковано") Тогда
		Сообщить("Не все товары распределены по палетам!");
		Возврат;
	КонецЕсли; 
	
	КодыПаллет = Документ.ТаблицаПаллет.ВыгрузитьКолонку("SSCC");
	ОтветПриНаличииПустых = Неопределено;
	МассивПустыхПаллет = Новый Массив;
	Для каждого Паллета Из Документ.ТаблицаПаллет Цикл
		Если Документ.ТаблицаРаспределения.Найти(Паллета.SSCC,"SSCC") = Неопределено Тогда
			//Если ОтветПриНаличииПустых = Неопределено Тогда
			//	ОтветПриНаличииПустых = Вопрос("Обнаружены пустые палеты!"+Символы.ПС+"Удалить их из распределения и продолжить выгрузку?", РежимДиалогаВопрос.ДаНет); 
			//КонецЕсли; 
			
			Если УдалятьПустые Тогда
				МассивПустыхПаллет.Добавить(Паллета);
			//Иначе
			//	Отказ = Истина;
			//	Возврат;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого ПустаяПаллета Из МассивПустыхПаллет Цикл
		Документ.ТаблицаПаллет.Удалить(ПустаяПаллета);
	КонецЦикла;
	
	Если Объект.ТаблицаПаллет.Количество() = 0 Тогда
		Сообщить("Нет ни одной распределенной палеты!");
		Возврат;
	КонецЕсли;
	
	//GLN_Организации = ПолучитьGLNОрганизации(Объект.Организация);
	Если Не ЗначениеЗаполнено(GLN_Организации) Тогда
		Сообщить("Не удалось получить GLN организации ");
		Возврат;
	КонецЕсли;
	
	//ГЛНОрг = ПолучитьGLNОрганизации(Объект.Организация);
	Для каждого Паллета Из Документ.ТаблицаПаллет Цикл
		
		//ПорядковыйНомер = ?(ПорядковыйНомер = 9999999, 1, ПорядковыйНомер + 1); 
		
		РаспределенныеСтроки = Документ.ТаблицаРаспределения.НайтиСтроки(Новый Структура("SSCC", Паллета.SSCC));
		//Если РаспределенныеСтроки.Количество() > 0 Тогда
		//	Продолжить;
		//КонецЕСли;
		Если СтрДлина(Паллета.SSCC) <> 18 Тогда 
			Паллета.SSCC = ПолучитьКодПал(GLN_Организации);
		КонецЕсли;
		Для каждого РаспределеннаяСтрока Из РаспределенныеСтроки Цикл
			РаспределеннаяСтрока.SSCC = Паллета.SSCC;
		КонецЦикла;
		
	КонецЦикла;
	Документ.ТекущийSSCC = Объект.ТекущийSSCC;
	ЗначениеВРеквизитФормы(Документ,"Объект");
КонецПроцедуры
