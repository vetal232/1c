&НаКлиенте
Перем ЭДИ_ОбщиеИнструменты;
&НаКлиенте
Перем ЭДИ_РаботаСБазойДанных;
&НаКлиенте
Перем ПолучательБД_Подключен;

&НаКлиенте
Процедура ОбновитьТаблицу(Команда)
	ОбновитьТаблицуКлиент();
КонецПроцедуры 
&НаКлиенте
Процедура ОбновитьТаблицуКлиент()
	
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();
	Если ТипЗаписи<>"ALL" Тогда
		Отбор.Тип = ТипЗаписи;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектЗаписи) Тогда
		Отбор.Объект = ЗначениеВСтрокуВнутрСервер(ОбъектЗаписи);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВладелецСвойства) Тогда
		Отбор.Владелец = ЗначениеВСтрокуВнутрСервер(ВладелецСвойства);
	КонецЕсли;
	Если ЗначениеЗаполнено(Атрибут1) Тогда
		Отбор.ИндексированныйАтрибут1 = СокрЛП(Атрибут1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Атрибут2) Тогда
		Отбор.ИндексированныйАтрибут2 = СокрЛП(Атрибут2);
	КонецЕсли;
	Если ЗначениеЗаполнено(Атрибут3) Тогда
		Отбор.ИндексированныйАтрибут3 = СокрЛП(Атрибут3);
	КонецЕсли;
	Если ЗначениеЗаполнено(Атрибут4) Тогда
		Отбор.ИндексированныйАтрибут4 = СокрЛП(Атрибут4);
	КонецЕсли;
	Если ЗначениеЗаполнено(Атрибут5) Тогда
		Отбор.ИндексированныйАтрибут5 = СокрЛП(Атрибут5);
	КонецЕсли;
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСписокСвойств(Отбор,?(ЗначениеЗаполнено(НачалоПериода),ПреобразоватьДатуВСтроку(НачалоПериода),0),?(ЗначениеЗаполнено(КонецПериода),ПреобразоватьДатуВСтроку(КонецПериода),0),1,1,1);	
	Если Запрос.Результат=0 тогда
		//Сообщить(Запрос.Сообщение);
	Иначе
		СписокДанных = Запрос.Содержимое;
		ТаблицаБД.Очистить();
		Для Сч=0 По СписокДанных.Верхнийиндекс() Цикл
			Свойство = СписокДанных.Получить(Сч);
			НоваяСТрока = ТаблицаБД.Добавить();
			НоваяСТрока.Тип = Свойство.Тип;
			НоваяСТрока.ИдЗаписи = Свойство.Индекс;
			ДатаСвойства = Свойство.Дата;
			НоваяСТрока.ДатаСвойства = ПреобразоватьСтрокуВДату(ДатаСвойства);
			НоваяСТрока.Атрибут1 = СокрЛП(Свойство.ИндексированныйАтрибут1);
			НоваяСТрока.Атрибут2 = СокрЛП(Свойство.ИндексированныйАтрибут2);
			НоваяСТрока.Атрибут3 = СокрЛП(Свойство.ИндексированныйАтрибут3);
			НоваяСТрока.Атрибут4 = СокрЛП(Свойство.ИндексированныйАтрибут4);
			НоваяСТрока.Атрибут5 = СокрЛП(Свойство.ИндексированныйАтрибут5);
			НоваяСТрока.Объект = ПолучитьЗначениеИзСтроки(Свойство.Объект);			
			НоваяСТрока.Владелец = ПолучитьЗначениеИзСтроки(Свойство.Владелец);			
		КонецЦикла; 		
	КонецЕслИ;

КонецПроцедуры
&НаКлиенте
Функция ПреобразоватьСтрокуВДату(Значение) Экспорт 
	Если СтрДлина(Значение)<8 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	Значение = СтрЗаменить(Строка(Значение),",","");
	Значение = СтрЗаменить(Строка(Значение)," ","");
	Значение = Лев(Значение,4) +"-"+ Сред(Значение,5,2) +"-"+  Прав(Значение,2);
	ВыхДата = Дата(1,1,1);
	Раз = Разложить(Значение, "T");
	Если Раз.Количество() > 1 тогда
		Два = Разложить(СокрЛП(Раз[0]),"-");
		Если Два.Количество()>1 тогда
			Попытка
				ВыхДата = Дата(Число(СокрЛП(Два[0])), Число(СокрЛП(Два[1])), Число(СокрЛП(Два[2])));
			исключение					
			КонецПопытки;
		иначе  Возврат ВыхДата;
		КонецЕсли;
		Два = Разложить(СокрЛП(Раз[1]),":");
		Если Два.Количество()>1 тогда
			Попытка
				ВыхДата = ВыхДата + (Число(СокрЛП(Два[0])) * 3600 + Число(СокрЛП(Два[1])) * 60 + Число(СокрЛП(Два[2])));
			исключение
			КонецПопытки;
		КонецЕсли;
	иначе
		Два = Разложить(СокрЛП(Раз[0]),"-");
		Если Два.Количество()>1 тогда
			Попытка
				ВыхДата = Дата(Число(СокрЛП(Два[0])), Число(СокрЛП(Два[1])), Число(СокрЛП(Два[2])));
			исключение
			КонецПопытки;
		иначе  Возврат ВыхДата;
		КонецЕсли;
	КонецЕсли;
		
	Возврат ВыхДата;
КонецФункции

Функция Разложить(Знач Стр, Разделитель = ",") Экспорт
	СЗ = Новый СписокЗначений;
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				СЗ.Добавить(Стр);
				Возврат СЗ;
			КонецЕсли;
			СЗ.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				СЗ.Добавить(Стр);
				Возврат СЗ;
			КонецЕсли;
			СЗ.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
КонецФункции

Функция ПолучитьЗначениеИзСтроки(Значение)
	Если СокрЛП(Значение) = "" Тогда
		Возврат "";
	КонецЕсли;
	Попытка
		ТекЗнач1с = ЗначениеИзСтрокиВнутр(Значение);                      
	Исключение
		ТекЗнач1с = СокрЛП(Значение);
	КонецПопытки;;	
	Возврат ТекЗнач1с;	
КонецФункции

Функция ПолучитьПутьКБД()
	Возврат ХранилищеОбщихНастроек.Загрузить("ОбъектПутьКВнешнейБД", "КлючПутьКВнешнейБД","ПутьКВнешнейБД");	
КонецФункции

Функция ПреобразоватьДатуВСтроку(ДатаДляПреобразования)
	Результат = Формат(Год(ДатаДляПреобразования),"ЧГ=0") + ?(СтрДлина(Строка(Месяц(ДатаДляПреобразования))) < 2,"0" + Строка(Месяц(ДатаДляПреобразования)) , Строка(Месяц(ДатаДляПреобразования)))
                + ?(СтрДлина(Строка(День(ДатаДляПреобразования))) < 2, "0" + Строка(День(ДатаДляПреобразования)), Строка(День(ДатаДляПреобразования)));
    Возврат Результат;	
КонецФункции
&НаКлиенте
Процедура ИспользоватьПериодПриИзменении(Элемент)
	Если ИспользоватьПериод Тогда
		ЭтаФорма.Элементы.НачалоПериода.Доступность = Истина;
		ЭтаФорма.Элементы.КонецПериода.Доступность = Истина;
	Иначе
		ЭтаФорма.Элементы.НачалоПериода.Доступность = Ложь;
		ЭтаФорма.Элементы.КонецПериода.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

Функция ЗначениеВСтрокуВнутрСервер(Значение)
	Возврат ЗначениеВСтрокуВнутр(Значение);
КонецФункции
&НаКлиенте
Процедура ПриОткрытии(Отказ)    
	ВосстановитьНастройкиПодключения();
	ПолучитьОбщиеИнструменты();
	
	ИспользоватьПериод = Ложь;
	ЭтаФорма.Элементы.НачалоПериода.Доступность = Ложь;
	ЭтаФорма.Элементы.КонецПериода.Доступность = Ложь;	
КонецПроцедуры

Процедура ВосстановитьНастройкиПодключения()
	Объект.ЭДИ_ИмяТаблицы = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ИмяТаблицы", "КлючЭДИ_ИмяТаблицы", "ЭДИ_ИмяТаблицы");
	Объект.ЭДИ_КаталогВнешнейБазыДанных = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_КаталогВнешнейБазыДанных", "КлючЭДИ_КаталогВнешнейБазыДанных", "ЭДИ_КаталогВнешнейБазыДанных");
	Объект.ЭДИ_ПарольБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ПарольБД", "КлючЭДИ_ПарольБД", "ЭДИ_ПарольБД");
	Объект.ЭДИ_ПользовательБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ПользовательБД", "КлючЭДИ_ПользовательБД", "ЭДИ_ПользовательБД");
	Объект.ЭДИ_ПортБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ПортБД", "КлючЭДИ_ПортБД",  "ЭДИ_ПортБД");
	Объект.ЭДИ_РежимРаботыБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_РежимРаботыБД", "КлючЭДИ_РежимРаботыБД",  "ЭДИ_РежимРаботыБД");
	Объект.ЭДИ_СерверБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_СерверБД", "КлючЭДИ_СерверБД",  "ЭДИ_СерверБД");	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОбщиеИнструменты()
	ЭДИ_ОбщиеИнструменты = Новый COMОбъект("EsTools1C.ExtTools");
	ПодключитьсяКБДПриОткрытии();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьсяКБДПриОткрытии()
	ПолучательБД_Подключен=ложь;   
	ЭДИ_ПараметрSQLITE=0;
	
	Если Объект.ЭДИ_РежимРаботыБД = "sqlite" тогда 
		ЭДИ_ПараметрSQLITE = 0;
		ЭДИ_СтрокаПодключения = СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных);
	ИначеЕсли Объект.ЭДИ_РежимРаботыБД = "MY" тогда 
		ЭДИ_СтрокаПодключения = "DRIVER={MySQL ODBC 5.3 ANSI Driver};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Port="+СокрЛП(Объект.ЭДИ_ПортБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";User="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Password="+СокрЛП(Объект.ЭДИ_ПарольБД)+";";  //MySQL
	ИначеЕсли Объект.ЭДИ_РежимРаботыБД = "PG" тогда  
		ЭДИ_СтрокаПодключения = "DSN=PostgreSQL30;Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Port="+СокрЛП(Объект.ЭДИ_ПортБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";UID="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";";   //PostgreSQL
	иначеЕсли Объект.ЭДИ_РежимРаботыБД = "MSNC10" тогда  
		ЭДИ_СтрокаПодключения = "Driver={SQL Server Native Client 10.0};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";Uid="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";"
	иначеЕсли Объект.ЭДИ_РежимРаботыБД = "MSNC11" тогда  
		ЭДИ_СтрокаПодключения = "Driver={SQL Server Native Client 11.0};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";Uid="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";"
	иначеЕсли Объект.ЭДИ_РежимРаботыБД = "MSSSD" тогда  
		ЭДИ_СтрокаПодключения = "Driver={SQL Server};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";Uid="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";"
	КонецЕСлИ; 
	
	Если ЭДИ_СтрокаПодключения="" тогда
		Предупреждение("Нет настроек подключения к БД!");
		Возврат;
	КонецеСли;

	ИмяТаблицыПолучатель = СокрЛП(Объект.ЭДИ_ИмяТаблицы);
	
	Попытка
		ЭДИ_РаботаСБазойДанных = ЭДИ_ОбщиеИнструменты.ПолучитьВнешнююБазуДанных(ЭДИ_СтрокаПодключения, Объект.ЭДИ_РежимРаботыБД, ЭДИ_ПараметрSQLITE, ИмяТаблицыПолучатель);
		Если ЭДИ_РаботаСБазойДанных.ЕстьОшибка=1 тогда
			ПолучательБД_Подключен = Ложь;
			Сообщить("Ошибка подключение к базе данных по причине: " + ЭДИ_РаботаСБазойДанных.СообщениеОшибки + ". Проверьте параметры подключения на странице настройки.");
		иначе	
			ПолучательБД_Подключен = Истина;			
		КонецЕСЛИ;
	исключение
		ПолучательБД_Подключен = Ложь;
		Сообщить(Описаниеошибки());
	Конецпопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОсновнаяФорма = ПолучитьФорму("ВнешняяОбработка.EDISOFT.Форма.ОсновнаяФорма");
	ОсновнаяФорма.Открыть();	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗапись(Команда)
	
	КоличествоВыделенныхСтрок = ЭтаФорма.Элементы.ТаблицаБД.ВыделенныеСтроки.Количество();
	Сч = 0;
	Если КоличествоВыделенныхСтрок>0 Тогда
		Для Сч = 0 По КоличествоВыделенныхСтрок-1 Цикл
			НомерТекущейСтроки = ЭтаФорма.Элементы.ТаблицаБД.ВыделенныеСтроки.Получить(Сч);
			ТекущаяСтрока = ТаблицаБД.НайтиПоИдентификатору(НомерТекущейСтроки);
			Индекс = ТекущаяСтрока.ИдЗаписи;
			//Контрагент = ТекущаяСТрока.Объект;
			//ГЛН = ТекущаяСтрока.GLN;
			Попытка
				УдалитьСтроку(Индекс);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;	
	КонецЕсли;
	ОбновитьТаблицуКлиент();	

КонецПроцедуры
&НаКлиенте
Процедура УдалитьСтроку(Индекс)
	
	Если Не ЗначениеЗаполнено(ИНдекс) Тогда
		Возврат;
	КонецЕсли;
	Результат = ЭДИ_РаботаСБазойДанных.УдалитьСвойство(Индекс);
	Если Результат.Результат = 0 Тогда
		Сообщить("Не удалось удалить запись по причине: " + Результат.Сообщение);
	КонецЕсли;
	 	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаБДПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтрокиТаблицы = Элемент.ВыделенныеСтроки;
	КоличествоВыделенныхСтрок = ВыделенныеСтрокиТаблицы.Количество();
	Сч = 0;
	Если КоличествоВыделенныхСтрок>0 Тогда
		Для Сч = 0 По КоличествоВыделенныхСтрок-1 Цикл
			НомерТекущейСтроки = ВыделенныеСтрокиТаблицы.Получить(Сч);
			ТекущаяСтрока = ТаблицаБД.НайтиПоИдентификатору(НомерТекущейСтроки);
			Индекс = ТекущаяСтрока.ИдЗаписи;
			//Контрагент = ТекущаяСТрока.Объект;
			//ГЛН = ТекущаяСтрока.GLN;
			Попытка
				УдалитьСтроку(Индекс);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;	
	КонецЕсли;
	ОбновитьТаблицуКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаБДПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновленнаяЗапись = Новый СТруктура;
	ОбновленнаяЗапись.Вставить("Индекс1",СокрЛП(Элемент.ТекущиеДанные.Атрибут1));
	ОбновленнаяЗапись.Вставить("Индекс2",СокрЛП(Элемент.ТекущиеДанные.Атрибут2));
	ОбновленнаяЗапись.Вставить("Индекс3",СокрЛП(Элемент.ТекущиеДанные.Атрибут3));
	ОбновленнаяЗапись.Вставить("Индекс4",СокрЛП(Элемент.ТекущиеДанные.Атрибут4));
	ОбновленнаяЗапись.Вставить("Индекс5",СокрЛП(Элемент.ТекущиеДанные.Атрибут5));
	ОбновленнаяЗапись.Вставить("ДопАтр",СокрЛП(Элемент.ТекущиеДанные.ДопАтрибуты));
	ОбновленнаяЗапись.Вставить("Тип",СокрЛП(Элемент.ТекущиеДанные.Тип));
	ОбновленнаяЗапись.Вставить("Объект",Элемент.ТекущиеДанные.Объект);
	ПерезаписатьЗапись(ОбновленнаяЗапись);

КонецПроцедуры

&НаКлиенте
Процедура ПерезаписатьЗапись(ОбновленнаяЗапись)

	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();
	Отбор.Тип = ОбновленнаяЗапись.Тип;
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(ОбновленнаяЗапись.Объект);	
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
	
	Если Запрос.Результат=0 тогда
		Сообщить("В БД Не найдена запись для " + ОбновленнаяЗапись.Объект);
	Иначе
		
		Свойство = Запрос.Содержимое;		
		Свойство.ИндексированныйАтрибут1 = ОбновленнаяЗапись.Индекс1;
		Свойство.ИндексированныйАтрибут2 = ОбновленнаяЗапись.Индекс2;
		Свойство.ИндексированныйАтрибут3 = ОбновленнаяЗапись.Индекс3;
		Свойство.ИндексированныйАтрибут4 = ОбновленнаяЗапись.Индекс4;
		Свойство.ИндексированныйАтрибут5 = ОбновленнаяЗапись.Индекс5;
		Свойство.ДопАтрибуты = ОбновленнаяЗапись.ДопАтр;

		Результат = ЭДИ_РаботаСБазойДанных.ПерезаписатьПоИндексу(Свойство);
		
		Если Результат.Результат = 0 Тогда
			Сообщить("Не удалось удалить запись по причине: " + Результат.Сообщение);
		КонецЕсли;
		
	КонецЕслИ; 				
	
КонецПроцедуры


