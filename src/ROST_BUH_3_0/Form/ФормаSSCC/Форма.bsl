&НаКлиенте
Перем ЭДИ_ОбщиеИнструменты;
&НаКлиенте
Перем ЭДИ_РаботаСБазойДанных;
&НаКлиенте
Перем ПолучательБД_Подключен;

Процедура ВосттановитьЗначениеНастроек()
	ПутьКБД = ХранилищеОбщихНастроек.Загрузить("ОбъектПутьКВнешнейБД", "КлючПутьКВнешнейБД", ,"ПутьКВнешнейБД");
	Если ЗначениеЗаполнено(ПутьКБД) Тогда
		Объект.ПутьКВнешнейБД = ПутьКБД;
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКодПаллета()
	
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();	
	ОрганизацияДляОТбора = ПолучитьОрганизацию(Объект.ИсправляемыйДокументRECADV);
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(ОрганизацияДляОТбора);
	Отбор.Тип = "GLN"; 
	
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
	
	СТруктураВОзврата = Новый СТруктура;
	
	Если Запрос.Результат=0 тогда
		
		Сообщить("Не найдена организация" + ОрганизацияДляОТбора + "в базе данных");
		Возврат Неопределено;
		
	Иначе
		ТекСвойствоОрганизации = Запрос.Содержимое;
		
		ЗапросКода = ЭДИ_РаботаСБазойДанных.ПолучитьКодПаллеты(ТекСвойствоОрганизации, 0);
	
		Если ЗапросКода.Результат=0 Тогда
			
			Сообщить(ЗапросКода.Сообщение);
			SSCC = "";
			
		Иначе			
			SSCC = ЗапросКода.Содержимое;			
		КонецЕСлИ;			
		
	КонецЕсли;
	
	Возврат SSCC;		

КонецФункции

Функция ЗначениеВСтрокуВнутрСервер(Значение)
	Возврат ЗначениеВСтрокуВнутр(Значение);
КонецФункции

Функция ПолучитьОрганизацию(Документ)		
	ДокументОбъект = Документ.ПолучитьОбъект();
	Возврат ДокументОбъект.Организация;
КонецФункции
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВосстановитьНастройкиПодключения();
	ПолучитьОбщиеИнструменты();
	ВосстановитьНастройкиПриОткрытии();
	//ЭтаФорма.Элементы.ТаблицаSSCCНоменклатура.СписокВыбора.Очистить();
	//ЭтаФорма.Элементы.ТаблицаSSCCНоменклатура.СписокВыбора.ЗагрузитьЗначения(МассивНоменклатур);
	Объект.КоличествоКоробокНаПалете = 70;
	ПолучитьПалетныйЛист();
КонецПроцедуры


Процедура ВосстановитьНастройкиПодключения()
	Объект.ЭДИ_ИмяТаблицы = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ИмяТаблицы", "КлючЭДИ_ИмяТаблицы", "ЭДИ_ИмяТаблицы");
	Объект.ЭДИ_КаталогВнешнейБазыДанных = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_КаталогВнешнейБазыДанных", "КлючЭДИ_КаталогВнешнейБазыДанных", "ЭДИ_КаталогВнешнейБазыДанных");
	Объект.ЭДИ_ПарольБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ПарольБД", "КлючЭДИ_ПарольБД", "ЭДИ_ПарольБД");
	Объект.ЭДИ_ПользовательБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ПользовательБД", "КлючЭДИ_ПользовательБД", "ЭДИ_ПользовательБД");
	Объект.ЭДИ_ПортБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ПортБД", "КлючЭДИ_ПортБД",  "ЭДИ_ПортБД");
	Объект.ЭДИ_РежимРаботыБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_РежимРаботыБД", "КлючЭДИ_РежимРаботыБД",  "ЭДИ_РежимРаботыБД");
	Объект.ЭДИ_СерверБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_СерверБД", "КлючЭДИ_СерверБД",  "ЭДИ_СерверБД");	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОбщиеИнструменты()
	ЭДИ_ОбщиеИнструменты = Новый COMОбъект("EsTools1C.ExtTools");
	ПодключитьсяКБДПриОткрытии();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьсяКБДПриОткрытии()
	ПолучательБД_Подключен=ложь;   
	ЭДИ_ПараметрSQLITE=0;
	
	Если Объект.ЭДИ_РежимРаботыБД = "sqlite" тогда 
		ЭДИ_ПараметрSQLITE = 0;
		ЭДИ_СтрокаПодключения = СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных);
	ИначеЕсли Объект.ЭДИ_РежимРаботыБД = "MY" тогда 
		ЭДИ_СтрокаПодключения = "DRIVER={MySQL ODBC 5.3 ANSI Driver};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Port="+СокрЛП(Объект.ЭДИ_ПортБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";User="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Password="+СокрЛП(Объект.ЭДИ_ПарольБД)+";";  //MySQL
	ИначеЕсли Объект.ЭДИ_РежимРаботыБД = "PG" тогда  
		ЭДИ_СтрокаПодключения = "DSN=PostgreSQL30;Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Port="+СокрЛП(Объект.ЭДИ_ПортБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";UID="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";";   //PostgreSQL
	иначеЕсли Объект.ЭДИ_РежимРаботыБД = "MSNC10" тогда  
		ЭДИ_СтрокаПодключения = "Driver={SQL Server Native Client 10.0};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";Uid="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";"
	иначеЕсли Объект.ЭДИ_РежимРаботыБД = "MSNC11" тогда  
		ЭДИ_СтрокаПодключения = "Driver={SQL Server Native Client 11.0};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";Uid="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";"
	иначеЕсли Объект.ЭДИ_РежимРаботыБД = "MSSSD" тогда  
		ЭДИ_СтрокаПодключения = "Driver={SQL Server};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";Uid="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";"
	КонецЕСлИ; 
	
	Если ЭДИ_СтрокаПодключения="" тогда
		Предупреждение("Нет настроек подключения к БД!");
		Возврат;
	КонецеСли;

	ИмяТаблицыПолучатель = СокрЛП(Объект.ЭДИ_ИмяТаблицы);
	
	Попытка
		ЭДИ_РаботаСБазойДанных = ЭДИ_ОбщиеИнструменты.ПолучитьВнешнююБазуДанных(ЭДИ_СтрокаПодключения, Объект.ЭДИ_РежимРаботыБД, ЭДИ_ПараметрSQLITE, ИмяТаблицыПолучатель);
		Если ЭДИ_РаботаСБазойДанных.ЕстьОшибка=1 тогда
			ПолучательБД_Подключен = Ложь;
			Сообщить("Ошибка подключение к базе данных по причине: " + ЭДИ_РаботаСБазойДанных.СообщениеОшибки + ". Проверьте параметры подключения на странице настройки.");
		иначе	
			ПолучательБД_Подключен = Истина;			
		КонецЕСЛИ;
	исключение
		ПолучательБД_Подключен = Ложь;
		Сообщить(Описаниеошибки());
	Конецпопытки;
КонецПроцедуры


Функция ПолучитьТекущегоПользователя()
	Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции

Функция ПолучитьТекущуюОрганизацию()
	Попытка
		Возврат ХранилищеОбщихНастроек.Загрузить("ОбъектОрганизация", "КлючОрганизация","Организация");	
	Исключение
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ВосстановитьНастройкиПриОткрытии()
			
	Организация = ПолучитьТекущуюОрганизацию();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Объект.Организация = Организация;
	Иначе
		Сообщить("Не удалось получить текущую орагнизацию");
		Возврат;
	КонецЕсли;

	
	ТекущийПользователь = ПолучитьТекущегоПользователя();
	ПользовательСтрока = ЗначениеВСтрокуВнутрСервер(ТекущийПользователь);
	Сообщить("Получаем настройки для пользователя " + ТекущийПользователь);
	
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();	
	Отбор.Объект = ПользовательСтрока;			
	Отбор.Владелец = ЗначениеВСтрокуВнутрСервер(Объект.Организация);
	Отбор.Тип = "SETTINGS";
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСписокСвойств(Отбор);	
	
	Если Запрос.Результат=0 тогда
		
		Сообщить("Не удалось получить настройки для данного пользователя. Возможно, это первый случай использования данного модуля текущим пользователем. Ошибка 01");//нет записей по заданному отбору
		Возврат;
		
	Иначе
		
		СписокДанных = Запрос.Содержимое;
		
		Для Сч=0 По СписокДанных.Верхнийиндекс() Цикл
			
			Свойство = СписокДанных.Получить(Сч);
			
			Попытка
				ВосстановитьНастройкиПриОткрытииСервер(Свойство.ДопАтрибуты);	
			Исключение
				СОобщить(ОписаниеОшибки());
			КонецПопытки;
			
			Продолжить;
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьНастройкиПриОткрытииСервер(СтруктураСтрока)
	СтруктураНастроек = ЗначениеИзСтрокиВнутрСервер(СтруктураСтрока);	
	Объект.EDI_Номенклатура_ЦенаИзФайла = СтруктураНастроек.EDI_Номенклатура_ЦенаИзФайла;
	Попытка		
		Объект.СпособыПоискаНоменклатуры.Загрузить(СтруктураНастроек.СпособыПоискаНоменклатуры);
	Исключение
		СОобщить(ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		Объект.ОтпечатокСеритфиката = СтруктураНастроек.ОтпечатокСеритфиката;
	Исключение
	КонецПопытки;	
	Попытка
	Объект.СертификатПоле = ЗначениеИзСтрокиВнутрСервер(СтруктураНастроек.СертификатПоле);
	Исключение
	КонецПопытки;		
	Объект.ИспользоватьSSCC = СтруктураНастроек.ИспользоватьSSCC;	
	Объект.Бухгалтерия = СтруктураНастроек.Бухгалтерия;
	Объект.УТАП = СтруктураНастроек.УТАП;
	Объект.УТ11 = СтруктураНастроек.УТ11;	
	Попытка	
		Объект.ВидКонтактнойИнформацииПоУмолчанию = СтруктураНастроек.ВидКонтактнойИнформацииПоУмолчанию;		
		Объект.СоглашениеПоУмолчанию = СтруктураНастроек.СоглашениеПоУмолчанию;
	Исключение		
	КонецПопытки;
	Объект.РежимОтладки = СтруктураНастроек.РежимОтладки;
	Объект.ВыгружатьDESADV = СтруктураНастроек.ВыгружатьDESADV;
	Объект.ВыборСервераEDISOAP = СтруктураНастроек.ВыборСервераEDISOAP;
	Объект.ВыгружатьFNS_ARCHIVE = СтруктураНастроек.ВыгружатьFNS_ARCHIVE;
	Объект.ВыгружатьINVOICE = СтруктураНастроек.ВыгружатьINVOICE;
	Объект.ВыгружатьINVOICEКОР = СтруктураНастроек.ВыгружатьINVOICEКОР;
	 Объект.ВыгружатьORDER = СтруктураНастроек.ВыгружатьORDER;
	Объект.ВыгружатьORDRSP = СтруктураНастроек.ВыгружатьORDRSP;
	Объект.ВыгружатьRECADV = СтруктураНастроек.ВыгружатьRECADV;
	Объект.ВыгружатьALCDES = СтруктураНастроек.ВыгружатьALCDES;
	Попытка
		Объект.ВыгружатьTORG12_SELLER = СтруктураНастроек.ВыгружатьTORG12_SELLER;
	Исключение
	КонецПопытки;
	Объект.ВыгружатьТолькоEDISoft = СтруктураНастроек.ВыгружатьТолькоEDISoft;
	Объект.RECADVИсправляетЦены = СтруктураНастроек.RECADVИсправляетЦены;	
	Объект.temp = СтруктураНастроек.temp;
	Объект.Должность = СтруктураНастроек.Должность;
	Объект.ЗагружатьDESADV = СтруктураНастроек.ЗагружатьDESADV;
	Объект.ЗагружатьFNS_ARCHIVE = СтруктураНастроек.ЗагружатьFNS_ARCHIVE;
	Объект.ЗагружатьINVOICE = 	СтруктураНастроек.ЗагружатьINVOICE;
	Объект.ЗагружатьINVOICEКОР = СтруктураНастроек.ЗагружатьINVOICEКОР;
	Объект.ЗагружатьORDER = СтруктураНастроек.ЗагружатьORDER;
	Объект.ЗагружатьORDRSP = СтруктураНастроек.ЗагружатьORDRSP;
	Объект.ЗагружатьRECADV = СтруктураНастроек.ЗагружатьRECADV;	
	Объект.Имя = СтруктураНастроек.Имя;
	Объект.Логин = СтруктураНастроек.Логин;
	Объект.Отчество = СтруктураНастроек.Отчество;
	Объект.Пароль = СтруктураНастроек.Пароль;
	Объект.ПарольККлючуСертификата = СтруктураНастроек.ПарольККлючуСертификата;
	Объект.ПроксиАдрес = СтруктураНастроек.ПроксиАдрес;
	Объект.ПроксиВключен = СтруктураНастроек.ПроксиВключен;
	Объект.ПроксиЗащищенЛогиномИПаролем = СтруктураНастроек.ПроксиЗащищенЛогиномИПаролем;
	Объект.ПроксиЛогин = СтруктураНастроек.ПроксиЛогин;
	Объект.ПроксиПароль = СтруктураНастроек.ПроксиПароль;
	Объект.ПроксиПорт = СтруктураНастроек.ПроксиПорт;
	Объект.СертификатПоле = СтруктураНастроек.СертификатПоле;	
	Объект.Фамилия = СтруктураНастроек.Фамилия;
	Объект.ТаймаутВебСервиса= СтруктураНастроек.ТаймаутВебСервиса;

КонецПроцедуры


&НаКлиенте
Процедура ПолучитьПалетныйЛист()
		
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();
	Отбор.Тип = "DESADV_SSCC";
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Объект.ИсправляемыйДокументRECADV);	
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
	Если Запрос.Результат=0 тогда
		Возврат;
	Иначе
		Свойство = Запрос.Содержимое;				
		СтруктураТаблицы = ЗначениеИзСтрокиВнутрСервер(Свойство.ДопАтрибуты);
		ЗаполнитьПаллетныйЛист(СтруктураТаблицы);
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьПаллетныйЛист(структураТаблицы)
	КоличествоНоменклатур = структураТаблицы.Количество();
	Для Сч = 0 По КоличествоНоменклатур - 1 Цикл		
		КлючНоменклатуры = "Стр" + Строка(сч);
		Номенклатура = структураТаблицы[КлючНоменклатуры].Номенклатура;
		СтруктураSSCC = структураТаблицы[КлючНоменклатуры].СтруктураSSCC;
		КоличествоПаллет = СтруктураSSCC.Количество();
		Для СчПаллет = 0 По КоличествоПаллет - 1 Цикл
			КлючПаллет = "Стр" + Строка(СчПаллет);
			Паллет = СтруктураSSCC[КлючПаллет];
			НоваяСтрокаSSCC = ТаблицаSSCC.Добавить();
			НоваяСтрокаSSCC.КодSSCC = Паллет.КодSSCC;
			НоваяСтрокаSSCC.КоличествоНаПалете = Паллет.Количество;
			НоваяСтрокаSSCC.Номенклатура = Номенклатура;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьСписокНоменклатурДокумента()
	
	ДокументОбъект = Объект.ИсправляемыйДокументRECADV;
	СтруктураНоменклатур = Новый Структура;		
	Сч = 0;
	
	Для Каждого СтрокаТ Из ДокументОбъект.Товары Цикл
		
		Ключ = "Стр" + Строка(Сч);
		СтруктураНоменклатура = Новый СТруктура;
		СтруктураНоменклатура.Вставить("Номенклатура",СтрокаТ.Номенклатура);
		КоличествоКоробок = ПересчитатьВКоличествоКоробок(СтрокаТ.Количество, СтрокаТ.Номенклатура);
		СтруктураНоменклатура.Вставить("Количество",КоличествоКоробок);
		СтруктураНоменклатур.Вставить(Ключ, СтруктураНоменклатура);
		Сч = Сч+1;
		
	КонецЦикла;
	
	Возврат СтруктураНоменклатур;
	
КонецФункции

Функция ПересчитатьВКоличествоКоробок(КоличествоШтук, Номенклатура)
	
	КоличествоВКоробке = Номенклатура.КоэффициентЕдиницыДляОтчетов;
	КоличествоКоробок = КоличествоШтук/КоличествоВКоробке;
	
	Возврат КоличествоКоробок;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	Если Параметры.Свойство("Документ") И Параметры.Свойство("ДопАтрибуты") Тогда
		
		Объект.ИсправляемыйДокументRECADV = Параметры.Документ;		
		Объект.ДопАтрибутыЗаказа = Параметры.ДопАтрибуты;
		
	Иначе 
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	НоваяСтрока = ТаблицаSSCC.Добавить();
	КодSSCC = ПолучитьКодПаллета();
	НоваяСтрока.КодSSCC = КодSSCC;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	КоличествоВыделенныхСтрок = ЭтаФорма.Элементы.ТаблицаSSCC.ВыделенныеСтроки.Количество();
	Сч = 0;
	Если КоличествоВыделенныхСтрок>0 Тогда
		Для Сч = 0 По КоличествоВыделенныхСтрок-1 Цикл
			НомерТекущейСтроки = ЭтаФорма.Элементы.ТаблицаSSCC.ВыделенныеСтроки.Получить(Сч);
			ЭтаФорма.Элементы.ТаблицаSSCC.ВыделенныеСтроки.Удалить(НомерТекущейСтроки);
		КонецЦикла;	
	КонецЕсли;				

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокумент(Команда)
	СохранитьПалетныйЛист();
	ЭтаФорма.Закрыть(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Сохранить палетный лист?";
	Ответ = Вопрос(Текст, Режим,0,КодВозвратаДиалога.Да,"Сохранить?", КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьПалетныйЛист();				
	КонецЕсли;	
	ЭтаФорма.Закрыть(Ложь);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПаллетногоЛиста()
	СтруктураВозврата = Новый Структура;
	ИтоговаяСтруктура = Новый Структура;
	ТаблицаSSCC.Сортировать("Номенклатура");
	ПредНоменклатура = "";
	СтруктураSSCC = Новый Структура;
	СтруктураСтроки = Новый Структура;
	Сч = 0;
	СчSSCC = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаSSCC Цикл
				
		Если СтрокаТаблицы.Номенклатура = ПредНоменклатура Тогда			
			Ключ = "Стр" + Строка(Сч);
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("КодSSCC",СтрокаТаблицы.КодSSCC);					
			СтруктураСтроки.Вставить("Количество", СтрокаТаблицы.КоличествоНаПалете);
			СтруктураSSCC.Вставить(Ключ,СтруктураСтроки);
			Сч = Сч + 1;
		Иначе
			Если ЗначениеЗаполнено(СтруктураSSCC) Тогда
				КлючSSCc = "Стр" + Строка(СчSSCC);
				СтруктураВозврата = Новый Структура;
				СтруктураВозврата.Вставить("Номенклатура", ПредНоменклатура);
				СтруктураВозврата.Вставить("СтруктураSSCC", СтруктураSSCC);
				ИтоговаяСтруктура.Вставить(КлючSSCc,СтруктураВозврата);
				СчSSCC = СчSSCC + 1;
			КонецЕсли;
			Сч = 0;
			СтруктураSSCC = Новый Структура;
			СтруктураСтроки = Новый Структура;
			Ключ = "Стр" + Строка(Сч);
			СтруктураСтроки.Вставить("КодSSCC",СтрокаТаблицы.КодSSCC);					
			СтруктураСтроки.Вставить("Количество", СтрокаТаблицы.КоличествоНаПалете);
			СтруктураSSCC.Вставить(Ключ,СтруктураСтроки);
			Сч = Сч + 1;
		КонецЕсли;
		ПредНоменклатура = СтрокаТаблицы.Номенклатура;	                               
	КонецЦикла;
	Если ЗначениеЗаполнено(СтруктураSSCC) Тогда
		КлючSSCc = "Стр" + Строка(СчSSCC);
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Номенклатура", ПредНоменклатура);
		СтруктураВозврата.Вставить("СтруктураSSCC", СтруктураSSCC);
		ИтоговаяСтруктура.Вставить(КлючSSCc,СтруктураВозврата);
		СчSSCC = СчSSCC + 1;
	КонецЕсли;

	Возврат ИтоговаяСтруктура;
КонецФункции

&НаКлиенте
Процедура СохранитьПалетныйЛист()
			
	Тип = "DESADV_SSCC";
	
	СтруктураSSCC = ПолучитьСТруктуруПаллетногоЛиста();
	СтруктураСтрока = ЗначениеВСтрокуВнутрСервер(СтруктураSSCC);
		
	НоваяЗапись = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();
	НоваяЗапись.Объект = ЗначениеВСтрокуВнутрСервер(Объект.ИсправляемыйДокументRECADV);
	НоваяЗапись.Владелец = ЗначениеВСтрокуВнутрСервер(ПолучитьОрганизацию(Объект.ИсправляемыйДокументRECADV));;
	НоваяЗапись.ДопАтрибуты = СтруктураСтрока;
	НоваяЗапись.Дата = Формат(Число(ПреобразоватьДатуВСтроку(ТекущаяДата())),"ЧГ=");
	НоваяЗапись.Тип = Тип;
	Результат = ЭДИ_РаботаСБазойДанных.ЗаписатьСвойство(НоваяЗапись);
	
	Если Результат.Результат = 0 Тогда 
		Сообщить ("Не удалось записать палетный лист в бд по причине: " + Символы.ПС + Результат.Сообщение);
	Иначе 		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеИзСтрокиВнутрСервер(Строка)
	Возврат ЗначениеИзСтрокиВнутр(Строка);
КонецФункции

Функция ПреобразоватьДатуВСтроку(ДатаДляПреобразования)
	Результат = Формат(Год(ДатаДляПреобразования),"ЧГ=0") + ?(СтрДлина(Строка(Месяц(ДатаДляПреобразования))) < 2,"0" + Строка(Месяц(ДатаДляПреобразования)) , Строка(Месяц(ДатаДляПреобразования)))
                + ?(СтрДлина(Строка(День(ДатаДляПреобразования))) < 2, "0" + Строка(День(ДатаДляПреобразования)), Строка(День(ДатаДляПреобразования)));
    Возврат Результат;	
КонецФункции

&НаКлиенте
Процедура ОчиститьТаблицу(Команда)
	ТаблицаSSCC.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьТоварыПоПаллетам(Команда)
	СтруктураНоменклатур = ПолучитьСписокНоменклатурДокумента();
	РезультатРАспределенияСтруктура = РаспределитьТоварыПоПалетам(СтруктураНоменклатур, Объект.КоличествоКоробокНаПалете);
	ЗаполнитьТаблицуРаспределеннымиТоварами(РезультатРАспределенияСтруктура);
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьТаблицуРаспределеннымиТоварами(РезультатРАспределенияСтруктура)
	
	ТаблицаSSCC.Очистить();
	
	КоличествоПалет = РезультатРАспределенияСтруктура.Количество();
	ВсегоПаллет = КоличествоПалет;
	Для Сч = 0 По КоличествоПалет-1 Цикл
		Ключ = "Стр" + Строка(сч);
		СтрокаР = РезультатРАспределенияСтруктура[Ключ];
		ТекSSCC = ПолучитьКодПаллета();
		Для СчSSCC = 0 По СтрокаР.Количество()-1 ЦИкл
			ТекКлюч = "Стр" + Строка(СчSSCC);			
			ТекСтрока = СтрокаР[ТекКлюч];
			НоваяСтрока = ТаблицаSSCC.Добавить();
			НоваяСтрока.КодSSCC = ТекSSCC;
			НоваяСтрока.КоличествоНаПалете = ТекСтрока.Количество;
			НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПеренестиСтруктуруВТаблицу(СтруктураНоменклатур)
	
	ТаблицаНоменклатур = Новый ТаблицаЗначений;
	ТаблицаНоменклатур.Колонки.Добавить("Номенклатура");
	ТаблицаНоменклатур.Колонки.Добавить("Количество");
	
	Для Сч = 0 По СтруктураНоменклатур.Количество()-1 Цикл
		НоваяСтрока = ТаблицаНоменклатур.Добавить();
		Ключ = "Стр" + Строка(Сч);
		СтруктураСтрока = СтруктураНоменклатур[Ключ];
		НоваяСтрока.Номенклатура = СтруктураСтрока.Номенклатура;
		НоваяСтрока.Количество = СтруктураСтрока.Количество;
	КонецЦикла;
	
	возврат ТаблицаНоменклатур;
	
КонецФункции

Функция РаспределитьТоварыПоПалетам(СтруктураНоменклатур, КоличНаПалете)
	
	ТаблицаНоменклатур = ПеренестиСтруктуруВТаблицу(СтруктураНоменклатур);	
	
	СтруктураПалет = Новый Структура;
	РаспределениеНеЗавершено = Истина;
	Сч = 0;	
	
	Пока РаспределениеНеЗавершено Цикл		
		
		ТаблицаНоменклатур.Сортировать("Количество Убыв");
		
		Для Каждого ТекСтрока Из ТаблицаНоменклатур Цикл
						
								
			Если ТекСтрока.Количество = КоличНаПалете Тогда
				
				СтрокаПалета = Новый Структура;
				НовКлюч = "Стр" + Строка(Сч);
				СтрокаМест = Новый Структура;
				СтрокаМест.Вставить("Номенклатура", ТекСтрока.Номенклатура);
				СтрокаМест.Вставить("Количество", ТекСтрока.Количество);
				СтрокаПалета.Вставить("Стр0", СтрокаМест);
				СтруктураПалет.Вставить(НовКлюч,СтрокаПалета);
				Сч = Сч+1;
				ТекСтрока.Количество = 0;
				Прервать;
				
			ИначеЕсли ТекСтрока.КОличество > КоличНаПалете Тогда
				
				СтрокаПалета = Новый Структура;
				НовКлюч = "Стр" + Строка(Сч);
				СтрокаМест = Новый Структура;
				СтрокаМест.Вставить("Номенклатура", ТекСтрока.Номенклатура);
				СтрокаМест.Вставить("Количество", КоличНаПалете);
				СтрокаПалета.Вставить("Стр0", СтрокаМест);
				СтруктураПалет.Вставить(НовКлюч,СтрокаПалета);
				Сч = Сч+1;
				ТекСтрока.Количество = ТекСтрока.Количество-КоличНаПалете;
				Прервать;
				
			ИначеЕсли (ТекСтрока.Количество < КоличНаПалете) И (ТекСтрока.Количество>0) Тогда				
				
				ТекКоличество = ТекСтрока.Количество;
				СтрокаПалета = Новый Структура;
				НовКлюч = "Стр" + Строка(Сч);
				Сч = Сч+1;
				СтрокаМест = Новый Структура;
				СтрокаМест.Вставить("Номенклатура", ТекСтрока.Номенклатура);
				СтрокаМест.Вставить("Количество", ТекСтрока.Количество);
				СтрокаПалета.Вставить("Стр0", СтрокаМест);								
				ТекСтрока.Количество = 0;
				НеХватает = КоличНаПалете - ТекКоличество;
				СтруктураОстатокРаспределения = ДобратьТовары(ТаблицаНоменклатур, НеХватает);
				СчТекДоб = 1;
				
				Для СчОст = 0 По СтруктураОстатокРаспределения.Количество() - 1 Цикл
					
					КлючТекДоб = "Стр" + Строка(счОст);
					СтруктураДоб = СтруктураОстатокРаспределения[КлючТекДоб];
					СтрокаМест = Новый Структура;
					СтрокаМест.Вставить("Номенклатура", СтруктураДоб.Номенклатура);
					СтрокаМест.Вставить("Количество", СтруктураДоб.Количество);
					НовКлючДоб = "Стр" + Строка(СчТекДоб);
					СтрокаПалета.Вставить(НовКлючДоб, СтрокаМест);
					СчТекДоб = СчТекДоб + 1;
					
				КонецЦикла;
				
				СтруктураПалет.Вставить(НовКлюч, СтрокаПалета);				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;	
			
		ОстатковНет = ПроверитьОстатокКоробок(ТаблицаНоменклатур);
		
		Если ОстатковНет Тогда
			РаспределениеНеЗавершено = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураПалет;
	
КонецФункции

Функция ДобратьТовары(ТаблицаТоваров, Нехватает)
	
	ТаблицаТоваров.Сортировать("Количество Возр");
	
	СтруктураВозврата = Новый Структура;
	
	ПодборОкончен = Ложь;
	
	Для Каждого СтрокаТ Из ТаблицаТоваров ЦИкл
		Если ПодборОкончен Тогда
			Продолжить
		КонецЕсли;
		Если СТрокаТ.Количество = Нехватает Тогда
			СтруктураДобор = Новый Структура;
			СтруктураДобор.Вставить("Номенклатура", СтрокаТ.Номенклатура);
			СтруктураДобор.Вставить("Количество", Нехватает);
			СтрокаТ.Количество = 0;
			ПодборОкончен = Истина;
			Ключ = "Стр0";
			СтруктураВозврата.Вставить(Ключ, СтруктураДобор);
		КонецЕсли;
		Если СтрокаТ.Количество > Нехватает Тогда
			СтруктураДобор = Новый Структура;
			СтруктураДобор.Вставить("Номенклатура", СтрокаТ.Номенклатура);
			СтруктураДобор.Вставить("Количество", Нехватает);
			ПодборОкончен = Истина;
			СтрокаТ.Количество = СтрокаТ.Количество - Нехватает;
			Ключ = "Стр0";
			СтруктураВозврата.Вставить(Ключ, СтруктураДобор);
		КонецЕсли;
		Если (СтрокаТ.Количество < НеХватает) И (СтрокаТ.Количество >0 ) Тогда
			Сч = 0;
			СтруктураДобор = Новый Структура;
			СтруктураДобор.Вставить("Номенклатура", СтрокаТ.Номенклатура);
			СтруктураДобор.Вставить("Количество", СтрокаТ.Количество);
			НеХватает = Нехватает - СтрокаТ.Количество;
			СтрокаТ.Количество = 0;			
			Ключ = "Стр" + Строка(Сч);
			СтруктураВозврата.Вставить(Ключ, СтруктураДобор);
			Если НеХватает <=0 Тогда
			Иначе
				СтруктураДоборЕщё = ДобратьТовары(ТаблицаТоваров, НеХватает);			
				Для СчДоб = 0 По СтруктураДоборЕщё.Количество()-1 Цикл
					ТекКлюч = "Стр" + Строка(СчДоб);
					ТекСтрДоб = СтруктураДоборЕщё[ТекКлюч];
					СтруктураДобор = Новый Структура;
					СтруктураДобор.Вставить("Номенклатура", ТекСтрДоб.Номенклатура);
					СтруктураДобор.Вставить("Количество", ТекСтрДоб.Количество);
					Сч = Сч+1;
					Ключ = "Стр" + Строка(Сч);
					СтруктураВозврата.Вставить(Ключ, СтруктураДобор);
				КонецЦикла;
			КонецЕсли;
			ПодборОкончен = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПроверитьОстатокКоробок(ТаблицаТоваров)
	
	ОстатковНет = Истина;
	
	Для Каждого СтрокаТ Из ТаблицаТоваров ЦИкл		
		Если СтрокаТ.Количество > 0 Тогда
			ОстатковНет = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОстатковНет;
КонецФункции

&НаКлиенте
Процедура ПриЗакрытии()
	Режим = РежимДиалогаВопрос.ДаНет;
	Текст = "Сохранить палетный лист?";
	Ответ = Вопрос(Текст, Режим,0,КодВозвратаДиалога.Да,"Сохранить?", КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьПалетныйЛист();				
	КонецЕсли;
	Оповестить(,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьSSCC(Команда)
	СтруктураПалет = СформироватьСтруктуруПалетДляПечати();
	ДанныеЗаказа = ПолучитьНомерЗаказа(Объект.ИсправляемыйДокументRECADV);
	ОрганизацияДокумента = ПолучитьОрганизацию(Объект.ИсправляемыйДокументRECADV);
	GLNОрганизации = ПолучитьGLNОрганизации(ОрганизацияДокумента, Ложь);	
	ТабДок = ПолучитьМакетПечать("ПечатнаяФормаШтрихкод", Объект.ИсправляемыйДокументRECADV,СтруктураПалет, ДанныеЗаказа,GLNОрганизации);
	ТабДок.Показать("Палетный лист документа " + Объект.ИсправляемыйДокументRECADV);
	
КонецПроцедуры

Функция ПолучитьМакет(ИмяМакета)
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакета);
КонецФункции

Функция ПолучитьКоэффициентИВес(НоменклатураСС)
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("КоличествоВКоробке",НоменклатураСС.КоэффициентЕдиницыДляОтчетов);
	Если НоменклатураСС.ВесИспользовать Тогда
		СтруктураВозврата.Вставить("Вес1Шт",НоменклатураСС.ВесЧИслитель);
	Иначе
		СтруктураВозврата.Вставить("Вес1Шт",1);
	КонецЕсли;
	Возврат СтруктураВозврата;
КонецФункции

&НаКлиенте
Функция СформироватьСтруктуруПалетДляПечати()
	ТаблицаSSCC.Сортировать("КодSSCC");
	СтруктураВозврата = Новый Структура;
	ПредКод = "";
	Сч = 0;	
	СтруктураТЧ = Неопределено;
	СтруктураПалет = Неопределено;
	СчСтр = 0;
	
	ПредПалета = Неопределено;
	ВесПалеты = 0;
	
	
	Для Каждого СтрокаТ Из ТаблицаSSCC ЦИкл		
		Если ПредКод = СТрокаТ.КодSSCC Тогда
			КлючСтроки = "Стр" + Строка(счСтр);
			СтруктураСтрока = Новый Структура;
			//
			КоэффициентИВес = ПолучитьКоэффициентИВес(СТрокаТ.Номенклатура);
			КоличествоВКоробке = КоэффициентИВес.КоличествоВКоробке;//СТрокаТ.Номенклатура.КоэффициентЕдиницыДляОтчетов;
			Коробок =  СТрокаТ.КоличествоНаПалете;
			КоличествоШтук = КоличествоВКоробке*Коробок;
			Вес1Шт = КоэффициентИВес.Вес1Шт;
			ВесНаПалете = КоличествоШтук*Вес1Шт;
			ВесПалеты = ВесПалеты+ВесНаПалете;
			//
			КодСап = ПолучитьКодТовара("SupplierItemCode",СТрокаТ.Номенклатура);
			СтруктураСтрока.Вставить("Номенклатура", СТрокаТ.Номенклатура);
			СтруктураСтрока.Вставить("КодСап", КодСап);
			СтруктураСтрока.Вставить("Количество", СТрокаТ.КоличествоНаПалете);
			СтруктураТЧ.Вставить(КлючСтроки, СТруктураСтрока);
			СчСтр = СчСтр +1;
		Иначе
			
			Если НЕ СтруктураПалет = Неопределено Тогда
				КлючПалет = "Стр" + Строка(сч);
				сч = сч +1;
				СтруктураПалет = Новый СТруктура;
				СтруктураПалет.Вставить("КодSSCC", ПредКод);
				СтруктураПалет.Вставить("Товары", СтруктураТЧ);
				СтруктураПалет.Вставить("ВесПалеты", ВесПалеты);
				СтруктураВозврата.Вставить(КлючПалет, СтруктураПалет);
			КонецЕсли;
			
			СтруктураПалет = Новый СТруктура;
			СчСтр = 0;
			ПредКод = СТрокаТ.КодSSCC;			
			СтруктураСтрока = Новый Структура;
			//
			ВесПалеты = 0;	
			КоэффициентИВес = ПолучитьКоэффициентИВес(СТрокаТ.Номенклатура);
			КоличествоВКоробке = КоэффициентИВес.КоличествоВКоробке;
			Коробок =  СТрокаТ.КоличествоНаПалете;
			КоличествоШтук = КоличествоВКоробке*Коробок;
			Вес1Шт = КоэффициентИВес.Вес1Шт;
			ВесНаПалете = КоличествоШтук*Вес1Шт;
			ВесПалеты = ВесПалеты+ВесНаПалете;
			//
			КодСап = ПолучитьКодТовара("SupplierItemCode",СТрокаТ.Номенклатура);
			СтруктураСтрока.Вставить("Номенклатура", СТрокаТ.Номенклатура);
			СтруктураСтрока.Вставить("КодСап", КодСап);
			СтруктураСтрока.Вставить("Количество", СТрокаТ.КоличествоНаПалете);
			СтруктураТЧ = Новый Структура;
			КлючСтроки = "Стр" + Строка(счСтр);
			СтруктураТЧ.Вставить(КлючСтроки, СтруктураСтрока);
			СчСтр = СчСтр + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	КлючПалет = "Стр" + Строка(сч);
	сч = сч +1;
	СтруктураПалет = Новый СТруктура;
	СтруктураПалет.Вставить("КодSSCC", ПредКод);
	СтруктураПалет.Вставить("Товары", СтруктураТЧ);
	СтруктураПалет.Вставить("ВесПалеты", ВесПалеты);
	СтруктураВозврата.Вставить(КлючПалет, СтруктураПалет);
	
	Возврат СтруктураВозврата;
КонецФункции

&НаКлиенте
Функция ПолучитьКодТовара(НаимКод, Номенклатура)
	СтрокиСпособовПоиска = Объект.СпособыПоискаНоменклатуры.НайтиСтроки(Новый СТруктура("ТегДляПоиска", НаимКод));
	Для Каждого СТрокаПоискаНоменклатуры Из СтрокиСпособовПоиска Цикл
		МестоПОискаКонтрагента = СТрокаПоискаНоменклатуры.МестоПОиска;
		Если МестоПОискаКонтрагента = "По реквизиту" Тогда
			ЗначениеКода =  СокрЛП(ПолучитьДанныеИзРеквизитаОбъекта(Номенклатура,СТрокаПоискаНоменклатуры.ПолеДляПОиска));
			Если ЗначениеЗаполнено(ЗначениеКода) Тогда
				Возврат ЗначениеКода;
			КонецЕсли;
		ИначеЕсли МестоПОискаКонтрагента = "По РС Дополнительные сведения" Тогда
			ЗначениеКода =  СокрЛП(ПолучитьЗначениеСвойстваОбъектаДФормы(СТрокаПоискаНоменклатуры.ПолеДляПОиска,Номенклатура));
			Если ЗначениеЗаполнено(ЗначениеКода) Тогда
				Возврат ЗначениеКода;
			КонецЕсли;
		ИначеЕсли МестоПОискаКонтрагента = "По РС Штрихкоды" Тогда
			Штрихкод = ПолучитьШтрихкодНоменклатуры(Номенклатура,СТрокаПоискаНоменклатуры.ПолеДляПОиска);
			Если ЗначениеЗаполнено(Штрихкод) Тогда 
				Возврат Штрихкод
			КонецЕсли;
		ИначеЕсли МестоПОискаКонтрагента = "Во внешней бд" Тогда
			Возврат ПолучитьКодИзБД(Номенклатура, СТрокаПоискаНоменклатуры.ПолеДляПОиска);
		КонецЕсли;			
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКодИзБД(Номенклатура, Поле)
		
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();	
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Номенклатура);
	Отбор.Тип = "GOODSCODE";
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
	
	Если Запрос.Результат=0 тогда
		Сообщить("Не удалось получить код " + Поле + " номенклатуры "+Номенклатура+"! Документ не выгружен!");
		Возврат Неопределено;
	Иначе
		Свойство = Запрос.Содержимое;
		Если Поле = "КодПокупателя" Тогда
			Код = Свойство.ИндексированныйАтрибут1;
		ИначеЕсли Поле = "КодПоставщика" Тогда
			Код = Свойство.ИндексированныйАтрибут2;
		ИначеЕсли Поле = "Штрихкод" Тогда
			Код = Свойство.ИндексированныйАтрибут3;
		КонецЕсли;
		
		Возврат Код;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьШтрихкодНоменклатуры(Номенклатура, ПолеДляПоиска)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
			       |	ШтрихкодыНоменклатуры."+СокрЛП(ПолеДляПоиска)+" КАК Штрихкод
			       |ИЗ
			       |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
			       |ГДЕ
			       |	ШтрихкодыНоменклатуры.Номенклатура.Ссылка = &Владелец";
	Запрос.УстановитьПараметр("Владелец",Номенклатура);
	результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ВОзврат Результат.Штрихкод;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция ПолучитьЗначениеСвойстваОбъектаДФормы(ПСвойство, ВладелецСвойства, ВыводитьСообщение=Ложь)
	//ОбъектОбработка.ИнициализироватьСвойствоОбъекта(ПСвойство,ВладелецСвойства,ВыводитьСообщение);
	//Результат = Неопределено;	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Результат = ОбъектОбработка.ПолучитьЗначениеСвойстваОбъекта(ПСвойство, ВладелецСвойства, ВыводитьСообщение=Ложь);
	Возврат результат;
	
КонецФункции

Функция ПолучитьДанныеИзРеквизитаОбъекта(Объект,Путь) Экспорт
	ОбъектСсылка = Объект.Ссылка;
	Массив = Новый Массив;
	
	Номер = Найти(Путь,".");
	Если Номер = 0 Тогда
		Массив.Добавить(Путь);
	КонецЕсли; 
	
	Пока Номер <> 0 Цикл
		Массив.Добавить(Лев(Путь,Номер-1));
		Путь = Сред(Путь,Номер+1);
		Номер = Найти(Путь,".");
		Если Номер = 0 Тогда
			Массив.Добавить(Путь);
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого Реквизит Из Массив Цикл
		ОбъектСсылка = ОбъектСсылка[Реквизит];
	КонецЦикла;  
	
	Возврат ОбъектСсылка;
КонецФункции

&НаКлиенте
Функция ПолучитьНомерЗаказа(Документ)
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НомерЗаказа");
	СтруктураВозврата.Вставить("ЛогПоток");
		
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();
	Отбор.Тип = "DOC_ORDER";
	ДокЗаказ = ПолучитьЗаказ(Документ);
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(ДокЗаказ);
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
	
	Если Запрос.Результат=0 тогда
		Сообщить("Не удалось получить номер входящего заказа: " + ДокЗаказ);
		Возврат Неопределено;
	Иначе
		Свойство = Запрос.Содержимое;
		СтруктураВозврата.НомерЗаказа = Свойство.ИндексированныйАтрибут1;
		СтруктураФайла = ЗначениеИзСтрокиВнутрСервер(Свойство.ДопАтрибуты);
		Попытка
			ЛогПоток = СтруктураФайла.ЛогПоток;
		Исключение
			ЛогПоток = "";
		КонецПопытки;
		СтруктураВозврата.ЛогПоток = ЛогПоток;
		ВОзврат СтруктураВозврата;
	КонецЕсли;
КонецФункции

Функция ПолучитьЗаказ(Документ)
	Попытка
		Если Не ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
			ВызватьИсключение("Отсутствует ссылка на исходный заказ.");
		Иначе
			Заказ = Документ.ДокументОснование;
		КонецЕсли;		
	Исключение
		Попытка
			Если Не ЗначениеЗаполнено(Документ.ЗаказПокупателя) Тогда
				ВызватьИсключение("Отсутствует ссылка на исходный заказ.");
			Иначе
				Заказ = Документ.ЗаказПокупателя;
			КонецЕсли;
		Исключение
			Если Не ЗначениеЗаполнено(Документ.ЗаказКлиента) Тогда
				ВызватьИсключение("Отсутствует ссылка на исходный заказ.");
			Иначе
				Заказ = Документ.ЗаказКлиента;
			КонецЕсли;
		КонецПопытки;
	КонецПопытки;
	Возврат Заказ;
КонецФункции

Функция ПолучитьМакетПечать(ИмяМакета, Документ, СтруктураПалет,ДанныеЗаказа,GLNОрганизации)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ПолеСверху=5;
 	ТабДок.ПолеСнизу=5;
 	ТабДок.ПолеСлева=10;
 	ТабДок.ПолеСправа=5;
 	ТабДок.ОриентацияСтраницы=ОриентацияСтраницы.Портрет;
 	ТабДок.ОтображатьСетку = ложь;
	ТабДок.АвтоМасштаб=Истина;
 	ТабДок.ОтображатьЗаголовки = ложь;
	ПечатьСодержимого = ПолучитьМакет(ИмяМакета);
	
	Для сч = 0 По СтруктураПалет.Количество()-1 Цикл		
		ТекПалетКлюч = "Стр" + Строка(сч);
		ТекПалет = СтруктураПалет[ТекПалетКлюч];
		
		ПараметрыШтрихкода = Новый Структура("Ширина, Высота, ТипКода, ОтображатьТекст, РазмерШрифта, Штрихкод", 350, 70, 4, Истина, 12, ТекПалет.КодSSCC);
		КартинкаШК = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);

		ОбластьШтрихкода = ПечатьСодержимого.ПолучитьОбласть("ОбластьШтрихкода");
		ОбластьШтрихкода.Рисунки.EDI_ШК.Картинка = КартинкаШК;
		
		ТабДок.Вывести(ОбластьШтрихкода);
		
		///
		
		ОбластьИнфОбОтпр = ПечатьСодержимого.ПолучитьОбласть("ИнформацияОбОтправлении");
		ОбластьИнфОбОтпр.Параметры.КодSSCC = ТекПалет.КодSSCC;
		ОбластьИнфОбОтпр.Параметры.Вес = ТекПалет.ВесПалеты;
		ОбластьИнфОбОтпр.Параметры.ДатаПоставки = Формат(Документ.Дата+86400,"ДФ=dd.MM.yyyy");
		ОбластьИнфОбОтпр.Параметры.ДатаОтгрузки = Формат(Документ.Дата,"ДФ=dd.MM.yyyy");
		ТабДок.Вывести(ОбластьИнфОбОтпр);
		
		ОбластьМестоПоставки = ПечатьСодержимого.ПолучитьОбласть("МестоПоставки");
		ОбластьМестоПоставки.Параметры.НомерЗаказа = ДанныеЗаказа.НомерЗаказа;//"НомерЗаказа";
		ОбластьМестоПоставки.Параметры.НомерМагазина = ПолучитьНомерМагазинаКонтрагента(Документ);
		Если Не ЗначениеЗаполнено(Документ.Грузополучатель) Тогда
			ОбластьМестоПоставки.Параметры.НазваниеМагазина = Документ.Контрагент.Наименование;//Документ.АдресДоставки;
		Иначе
			ОбластьМестоПоставки.Параметры.НазваниеМагазина = Документ.Грузополучатель.Наименование;//Документ.АдресДоставки;
		КонецЕсли;
		Попытка
			ОбластьМестоПоставки.Параметры.ЛогистическийПоток = ДанныеЗаказа.ЛогПоток;// "ЛогПотог";//ДанныеЗаказа.ЛогПоток;//Документ.Контрагент.КонтактнаяИнформация[0].Представление;
		Исключение
			Сообщить("Не удалось получить логистический поток.");
			Возврат Неопределено;
		КонецПопытки;
		ОбластьМестоПоставки.Параметры.АдресПоставки = Документ.Контрагент.КонтактнаяИнформация[0].Представление;//АдресДоставки;//Документ.Номер;
		СтруктураЗаказа = ЗначениеИзСтрокиВнутрСервер(Объект.ДопАтрибутыЗаказа);
		ОбластьМестоПоставки.Параметры.РаспредЦентр = СтруктураЗаказа.ТочкаДоставкиИмя;//Документ.Контрагент.КонтактнаяИнформация[0].Представление;
		
		ТабДок.Вывести(ОбластьМестоПоставки);
						
		ОбластьИнформацияОПоставщике = ПечатьСодержимого.ПолучитьОбласть("ИнформацияОПоставщике");
		ОбластьИнформацияОПоставщике.Параметры.GLN = GLNОрганизации;//
		ОбластьИнформацияОПоставщике.Параметры.НазваниеПоставщика = Документ.Организация.НаименованиеПолное;
		ТабДок.Вывести(ОбластьИнформацияОПоставщике);
	//	ОбластьШапкаТаблицы = ПечатьСодержимого.ПолучитьОбласть("ШапкаТаблицы");
	//	ТабДок.Вывести(ОбластьШапкаТаблицы);
	//
	//	Для СчТов = 0 По ТекПалет.Товары.Количество()-1 Цикл
	//		КлючСтрока = "Стр" + Строка(СчТов);
	//		ТекСтрока = ТекПалет.Товары[КлючСтрока];
	//		ОбластьСтрока = ПечатьСодержимого.ПолучитьОбласть("Строка");
	//		ОбластьСтрока.Параметры.НомСтр = СчТов+1;
	//		ОбластьСтрока.Параметры.КодСап = ТекСтрока.КодСап;
	//		ОбластьСтрока.Параметры.НаимТов = ТекСтрока.Номенклатура.НаименованиеПолное;
	//		ОбластьСтрока.Параметры.ЕдИзм = ТекСтрока.Номенклатура.ЕдиницаДляОтчетов.Наименование;
	//		ОбластьСтрока.Параметры.КолВоТов = ТекСтрока.Количество;
	//		ТабДок.Вывести(ОбластьСтрока);
	//	КонецЦикла;
	//	
	//	ОбластьПодвал = ПечатьСодержимого.ПолучитьОбласть("Подвал");
	//	ТабДок.Вывести(ОбластьПодвал);
	//	Если Сч<СтруктураПалет.Количество()-1 Тогда
	//		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();	
	//	КонецЕсли;
	КонецЦикла;	
	
	Возврат ТабДок;
КонецФункции

&НаКлиенте
Функция ПолучитьGLNОрганизации(Организация, ИзБД = Истина)
	
	Если ИзБД Тогда
				
		Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();	
		Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Организация);
		Отбор.Тип = "GLN";
		Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
		
		Если Запрос.Результат=0 тогда
			
			Сообщить("Не удалось получить GLN Организации! Документ не выгружен!");
			Возврат Неопределено;
			
		Иначе
			
			Свойство = Запрос.Содержимое;		
			GLN = Свойство.ИндексированныйАтрибут1;//gln
			Возврат GLN;
			
		КонецЕсли;

		Если Объект.ПолучатьОрганизациюИзНастроек Тогда
			Возврат ПолучитьЗначениеСвойстваОбъектаДФормы("GLN", Организация);
		Иначе
			ВОзврат Объект.GLNОрганизацииПОУмолчанию;
		КонецЕсли;
		
	Иначе
		Возврат ПолучитьЗначениеСвойстваОбъекта("GLN", Организация);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеСвойстваОбъекта(ПСвойство,ВладелецСвойства, ВыводитьПредупреждение=Ложь)
	Запрос = Новый Запрос;
	//Свойство = ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию(ПСвойство,Истина);
	//Если НЕ ЗначениеЗаполнено(Свойство) Тогда
	//	Сообщить("Не найдено свойство " + ПСвойство);
	//	Возврат "";
	//КонецЕсли;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Свойство,
	|	ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство.Наименование = &Свойство
	|	И ЗначенияСвойствОбъектов.Объект = &Объект";
	Запрос.УстановитьПараметр("Свойство",	ПСвойство);
	Попытка
		Запрос.УстановитьПараметр("Объект",	ВладелецСвойства.ПолучитьОбъект);
	Исключение
		Запрос.УстановитьПараметр("Объект",	ВладелецСвойства);
	КонецПопытки;
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Попытка
			Возврат РезультатЗапроса.Значение.Наименование;
		Исключение
			Возврат РезультатЗапроса.Значение;
		КонецПопытки;
	Иначе
		Попытка	
			Возврат ВладелецСвойства.ДополнительныеРеквизиты.Найти(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ПСвойство),"Свойство").Значение; 
		Исключение 
		КонецПопытки;
	КОнецЕсли;
	
	Если ВыводитьПредупреждение Тогда
		Сообщить("Не найдено значение свойства "+ПСвойство+" объекта " + ВладелецСвойства);
	КОнецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьСписокНаименованийСвойств(Документ)
	ДокументОбъект = Документ.ПолучитьОбъект();
	КонтрагентСсылка = ДокументОбъект.Грузополучатель;
	ДопРеквизиты = КонтрагентСсылка.Партнер.ДополнительныеРеквизиты.ВыгрузитьКолонку("Свойство");
	СвойствоНомерМагазина = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Номер магазина");
	ПоискНомерМагазина = ДопРеквизиты.Найти(СвойствоНомерМагазина, "Свойство");
	МассивСвойств = Новый Массив;
	Для Каждого ДопРеквизит Из ДопРеквизиты ЦИкл
		МассивСвойств.Добавить(ДопРеквизит.Заголовок);
	КонецЦикла;
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("КОличествоСтрок", КонтрагентСсылка.ДополнительныеРеквизиты.Количество());
	СтруктураВозврата.Вставить("МассивСвойств", МассивСвойств);
	СтруктураВозврата.Вставить("Контрагент", КонтрагентСсылка);
	Возврат СтруктураВозврата;
КонецФункции

Функция ПолучитьНомерМагазинаКонтрагента(Документ)
	ДокументОбъект = Документ.ПолучитьОбъект();
	КонтрагентСсылка = ДокументОбъект.Грузополучатель;
	Если КОнтрагентСсылка.Пустая() Тогда
		КонтрагентСсылка = ДокументОбъект.Контрагент;
	КонецЕсли;
	ДопРеквизиты = УправлениеСвойствами.ПолучитьЗначенияСвойств(КонтрагентСсылка.Партнер, Истина, Ложь);//ДопРеквизиты = КонтрагентСсылка.Партнер.ДополнительныеРеквизиты.ВыгрузитьКолонку("Свойство");
	СвойствоНомерМагазина = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Номер магазина");
	ПоискНомерМагазина = ДопРеквизиты.Найти(СвойствоНомерМагазина, "Свойство");
	НомерМагазина = "";
	Если ПоискНомерМагазина <> Неопределено Тогда
		НомерМагазина = СокрЛП(ПоискНомерМагазина.Значение);
	КонецЕсли;	
	Возврат НомерМагазина;
КонецФункции

&НаСервере
Функция ПолучитьСписокНоменклатуры()
	СЗ = Новый СписокЗначений;
	Для каждого Стр Из Объект.ИсправляемыйДокументRECADV.Товары Цикл
		СЗ.Добавить(Стр.Номенклатура);
	КонецЦикла;		
	Возврат СЗ;
КонецФункции

//++ззз                   
&НаКлиенте
Процедура ТаблицаSSCCНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
   	СтандартнаяОбработка=Ложь;
	СписокНоменклатурыИзДокумента = ПолучитьСписокНоменклатуры();
	МассивНоменклатурИзДокумена = СписокНоменклатурыИзДокумента.ВыгрузитьЗначения();
	ЭтаФорма.Элементы.ТаблицаSSCCНоменклатура.СписокВыбора.ЗагрузитьЗначения(МассивНоменклатурИзДокумена);
	//ФормаВыбора = ПолучитьФорму("Справочник.Номенклатура.ФормаВыбора",,Элемент);
	//ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	//ЭлементОтбора.ПравоеЗначение = СписокНоменклатурыИзДокумента;
	//ЭлементОтбора.Использование = Истина;
	//ФормаВыбора.ОткрытьМодально();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаSSCCКоличествоНаПалетеПриИзменении(Элемент)
	ОчиститьСообщения();
	ПолучитьКоличестваНаФорме();
КонецПроцедуры

Процедура ПолучитьКоличестваНаФорме()	
	ДокументОбъект = Объект.ИсправляемыйДокументRECADV;
	
	ТЧСв = ДокументОбъект.Товары.Выгрузить();
	ТЧСв.Свернуть("Номенклатура", "Количество");	
	
	ТЗ = РеквизитФормыВЗначение("ТаблицаSSCC");
	ТЗ.Свернуть("Номенклатура", "КоличествоНаПалете");
	Для каждого Строка Из ТЧСв Цикл
		Стр = ТЗ.Найти(Строка.Номенклатура);
		Если Стр <> Неопределено Тогда
			Сообщить(Строка(Строка.Номенклатура) + ": " + Строка(Стр.КоличествоНаПалете) + " из " + Строка(Строка.Количество) + ". Осталось распределить: " + Строка(Строка.Количество - Стр.КоличествоНаПалете));
		Иначе
			Сообщить(Строка(Строка.Номенклатура) + ": 0 из " + Строка(Строка.Количество) + ". Осталось распределить: " + Строка(Строка.Количество));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличество(Команда)
	ОчиститьСообщения();
	ПолучитьКоличестваНаФорме();
КонецПроцедуры
//--
