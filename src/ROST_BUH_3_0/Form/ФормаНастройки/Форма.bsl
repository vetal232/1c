&НаКлиенте
Перем ЭДИ_ОбщиеИнструменты;
&НаКлиенте
Перем ЭДИ_РаботаСБазойДанных;
&НаКлиенте
Перем ПолучательБД_Подключен;
&НаКлиенте
Перем МодульКриптографии;
&НаКлиенте
Перем ПутьКМодулюНаСервереLinux;
&НаКлиенте
Перем ТипМодуляКриптографии;

&НаКлиенте
Процедура tempНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	TempНачалоВыбора1();
КонецПроцедуры
&НаКлиенте
Процедура TempНачалоВыбора1()
	ДиалогВыбораTemp = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораTemp.МножественныйВыбор = Ложь;
	ДиалогВыбораTemp.Заголовок = "Выберите каталог для хранения файлов";
	Если ДиалогВыбораTemp.Выбрать() Тогда
		Объект.Temp = ДиалогВыбораTemp.Каталог;
	КонецЕсли;
	Если (Найти(Объект.Temp, "\")>0) и (Прав(Объект.Temp,1)<>"\") Тогда
		Объект.Temp = Объект.Temp + "\";
		Слеш = "\";
	ИначеЕсли (Найти(Объект.Temp, "/")>0) и (Прав(Объект.Temp,1)<>"/") Тогда
		Объект.Temp = Объект.Temp + "/";
		Слеш = "/";
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура tempПриИзменении(Элемент)
	Если (Найти(Объект.Temp, "\")>0) и (Прав(Объект.Temp,1)<>"\") Тогда
		Объект.Temp = Объект.Temp + "\";
		Слеш = "\";
	ИначеЕсли (Найти(Объект.Temp, "/")>0) и (Прав(Объект.Temp,1)<>"/") Тогда
		Объект.Temp = Объект.Temp + "/";
		Слеш = "/";
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура tempОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	WshShell = Новый COMОбъект("Wscript.Shell"); 
   	WshShell.Run("Explorer "+Объект.Temp);
КонецПроцедуры
&НаКлиенте
Процедура ПриЗакрытии()
	ОсновнаяФорма = ПолучитьФорму("ВнешняяОбработка.EDISOFT.Форма.ОсновнаяФорма");
	ОсновнаяФорма.Открыть();
	//ЭтаФорма.Закрыть();
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	
	ВосстановитьНастройкиПодключения();
	ПолучитьОбщиеИнструменты();
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	МодульКриптографии = "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider";
	ТипМодуляКриптографии = 75;
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		ПутьКМодулюНаСервереLinux = "c:\...";//если сервер под Linux, то путь
	Иначе
		ПутьКМодулюНаСервереLinux = "";//иначе пустая строка
	КонецЕсли;
	
	ВосстановитьНастройкиПриОткрытии();
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗаполнитьСписокВыбораПользователей();
	КонецЕсли;

	Объект.Период = Истина;
	ОбработатьИзменение_выгружатьFNS();
	ОбработатьНеобхИспДопИнфПоИнв();
	
	Попытка
		УстановитьНомерПоследнегоКода();
	Исключение
	КонецПопытки;
	Если Объект.ИспользоватьДопСведения Тогда
		СоздатьДопСведенияНаСервере();
	КонецЕсли;
КонецПроцедуры

Процедура ВосстановитьНастройкиПодключения()
	Объект.ЭДИ_ИмяТаблицы = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ИмяТаблицы", "КлючЭДИ_ИмяТаблицы", "ЭДИ_ИмяТаблицы");
	Объект.ЭДИ_КаталогВнешнейБазыДанных = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_КаталогВнешнейБазыДанных", "КлючЭДИ_КаталогВнешнейБазыДанных", "ЭДИ_КаталогВнешнейБазыДанных");
	Объект.ЭДИ_ПарольБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ПарольБД", "КлючЭДИ_ПарольБД", "ЭДИ_ПарольБД");
	Объект.ЭДИ_ПользовательБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ПользовательБД", "КлючЭДИ_ПользовательБД", "ЭДИ_ПользовательБД");
	Объект.ЭДИ_ПортБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ПортБД", "КлючЭДИ_ПортБД",  "ЭДИ_ПортБД");
	Объект.ЭДИ_РежимРаботыБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_РежимРаботыБД", "КлючЭДИ_РежимРаботыБД",  "ЭДИ_РежимРаботыБД");
	Объект.ЭДИ_СерверБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_СерверБД", "КлючЭДИ_СерверБД",  "ЭДИ_СерверБД");	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьСуществованиеКаталога(ИмяКаталога,ЗадаватьВопрос = Ложь) Экспорт
    КаталогНаДиске = Новый Файл(ИмяКаталога);
    Если КаталогНаДиске.Существует() Тогда
        Возврат Истина;
	Иначе
		Если ЗадаватьВопрос Тогда
			Ответ = Вопрос("Каталог бызы данных не существует. Создать?", 
			                РежимДиалогаВопрос.ОКОтмена);
			Если Ответ = КодВозвратаДиалога.ОК Тогда
			    СоздатьКаталог(ИмяКаталога);
			    Возврат Истина;
			Иначе
			    Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
    КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПодключитьсяКБДПриОткрытии()
	ПолучательБД_Подключен=ложь;   
	ЭДИ_ПараметрSQLITE=0;
	Если ПроверитьСуществованиеКаталога(Объект.ЭДИ_КаталогВнешнейБазыДанных)=Ложь тогда
		Возврат;
	КонецЕсли;	
	Если Объект.ЭДИ_РежимРаботыБД = "sqlite" тогда 
		ЭДИ_ПараметрSQLITE = 0;
		ЭДИ_СтрокаПодключения = СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных);
	ИначеЕсли Объект.ЭДИ_РежимРаботыБД = "MY" тогда 
		ЭДИ_СтрокаПодключения = "DRIVER={MySQL ODBC 5.3 ANSI Driver};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Port="+СокрЛП(Объект.ЭДИ_ПортБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";User="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Password="+СокрЛП(Объект.ЭДИ_ПарольБД)+";";  //MySQL
	ИначеЕсли Объект.ЭДИ_РежимРаботыБД = "PG" тогда  
		ЭДИ_СтрокаПодключения = "DSN=PostgreSQL30;Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Port="+СокрЛП(Объект.ЭДИ_ПортБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";UID="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";";   //PostgreSQL
	иначеЕсли Объект.ЭДИ_РежимРаботыБД = "MSNC10" тогда  
		ЭДИ_СтрокаПодключения = "Driver={SQL Server Native Client 10.0};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";Uid="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";"
	иначеЕсли Объект.ЭДИ_РежимРаботыБД = "MSNC11" тогда  
		ЭДИ_СтрокаПодключения = "Driver={SQL Server Native Client 11.0};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";Uid="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";"
	иначеЕсли Объект.ЭДИ_РежимРаботыБД = "MSSSD" тогда  
		ЭДИ_СтрокаПодключения = "Driver={SQL Server};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";Uid="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";"
	КонецЕСлИ; 
	
	Если ЭДИ_СтрокаПодключения="" тогда
		Предупреждение("Нет настроек подключения к БД!");
		Возврат;
	КонецеСли;

	ИмяТаблицыПолучатель = СокрЛП(Объект.ЭДИ_ИмяТаблицы);
		
	Попытка
		ЭДИ_РаботаСБазойДанных = ЭДИ_ОбщиеИнструменты.ПолучитьВнешнююБазуДанных(ЭДИ_СтрокаПодключения, Объект.ЭДИ_РежимРаботыБД, ЭДИ_ПараметрSQLITE, ИмяТаблицыПолучатель);
		Если ЭДИ_РаботаСБазойДанных.ЕстьОшибка=1 тогда
			ПолучательБД_Подключен = Ложь;
			Сообщить("Ошибка подключение к базе данных по причине: " + ЭДИ_РаботаСБазойДанных.СообщениеОшибки + ". Проверьте параметры подключения на странице настройки.");
			Элементы.ПодключитьсяКБД.ЦветФона = WebЦвета.Коралловый;
		иначе	
			ПолучательБД_Подключен = Истина;
			Элементы.ПодключитьсяКБД.ЦветФона = WebЦвета.ЗеленоЖелтый;
		КонецЕСЛИ;					
	исключение
		ПолучательБД_Подключен = Ложь;
		Сообщить(Описаниеошибки());
	Конецпопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОбщиеИнструменты()
	ЭДИ_ОбщиеИнструменты = Новый COMОбъект("EsTools1C.ExtTools");
	ПодключитьсяКБДПриОткрытии();
КонецПроцедуры

Функция ЗначениеВСтрокуВнутрСервер(Значение)
	Возврат ЗначениеВСтрокуВнутр(Значение);
КонецФункции

Функция ЗначениеИзСтрокиВнутрСервер(Строка)
	Возврат ЗначениеИзСтрокиВнутр(Строка);
КонецФункции

Функция ПолучитьТекущегоПользователя()
	Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции

Функция ПолучитьПутьКБД()
	Возврат ХранилищеОбщихНастроек.Загрузить("ОбъектПутьКВнешнейБД", "КлючПутьКВнешнейБД","ПутьКВнешнейБД");	
КонецФункции

Процедура ВосстановитьНастройкиПриОткрытииСервер(СтруктураСтрока)
	СтруктураНастроек = ЗначениеИзСтрокиВнутрСервер(СтруктураСтрока);	
	Объект.EDI_Номенклатура_ЦенаИзФайла = СтруктураНастроек.EDI_Номенклатура_ЦенаИзФайла;
	Попытка		
		Объект.СпособыПоискаНоменклатуры.Загрузить(СтруктураНастроек.СпособыПоискаНоменклатуры);
	Исключение
		СОобщить(ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		Объект.ОтпечатокСеритфиката = СтруктураНастроек.ОтпечатокСеритфиката;
	Исключение
	КонецПопытки;	
	Попытка
	Объект.СертификатПоле = ЗначениеИзСтрокиВнутрСервер(СтруктураНастроек.СертификатПоле);
	Исключение
	КонецПопытки;
	//ВФ(*)
	Попытка
	Объект.СчётВместоРеализацииБУХ = СтруктураНастроек.СчётВместоРеализацииБУХ;
	Исключение
	КонецПопытки;
	Попытка
	Объект.ИспользоватьДопСведения = СтруктураНастроек.ИспользоватьДопСведения;
	Исключение
	КонецПопытки;
	Попытка
	Объект.CхемыПартнеровКонтрагентов = СтруктураНастроек.CхемыПартнеровКонтрагентов;
	Исключение
	КонецПопытки;
	Попытка
	Объект.ЗаписатьЛогВФайл = СтруктураНастроек.ЗаписатьЛогВФайл;
	Исключение
	КонецПопытки;
	Попытка
	Объект.КороткийНомер = СтруктураНастроек.КороткийНомер;
	Исключение
	КонецПопытки;
	//ВФ(**)БУХ
	Попытка
		
		СтруктураНастройкиАдреса = ЗначениеИзСтрокиВнутр(СтруктураНастроек.СтруктураНастройкиАдреса);
		СтруктураНастройкиАдресаПок = СтруктураНастройкиАдреса.СтруктураНастройкиАдресаПок;
		СтруктураНастройкиАдресаОрг = СтруктураНастройкиАдреса.СтруктураНастройкиАдресаОрг;
		СтруктураНастройкиАдресаГп = СтруктураНастройкиАдреса.СтруктураНастройкиАдресаГп;
		
		Объект.Пок_Город = СтруктураНастройкиАдресаПок.Пок_Город;
		Объект.Пок_индекс = СтруктураНастройкиАдресаПок.Пок_индекс;
		Объект.Пок_Улица = СтруктураНастройкиАдресаПок.Пок_Улица;
		Объект.Пок_Дом = СтруктураНастройкиАдресаПок.Пок_Дом;
		
		Объект.Орг_Индекс = СтруктураНастройкиАдресаОрг.Орг_Индекс;
		Объект.Орг_Город = СтруктураНастройкиАдресаОрг.Орг_Город;
		Объект.Орг_Улица = СтруктураНастройкиАдресаОрг.Орг_Улица;
		Объект.Орг_Дом = СтруктураНастройкиАдресаОрг.Орг_Дом;
		
		Объект.ГП_Город = СтруктураНастройкиАдресаГп.ГП_Город;
		Объект.Гп_Улица = СтруктураНастройкиАдресаГп.Гп_Улица;
		Объект.Гп_дом = СтруктураНастройкиАдресаГп.Гп_дом;
		Объект.ГП_Город = СтруктураНастройкиАдресаГп.ГП_Город;
			
	Исключение
	КонецПопытки;
	
	Попытка
		Объект.ИспользоватьSSCC = СтруктураНастроек.ИспользоватьSSCC;
	Исключение
	КонецПопытки;
	
	Попытка
		Объект.серверСОАП = СтруктураНастроек.серверСОАП;
	Исключение
	КонецПопытки;
	
	//УПД
	Попытка
		ОБъект.ВыгружатьУПД = СтруктураНастроек.ВыгружатьУПД;
		Объект.ВыгружатьУКД = СтруктураНастроек.ВыгружатьУКД;
		Объект.Подписант_ОбластьПолномочий = СтруктураНастроек.Подписант_ОбластьПолномочий;
		Объект.Подписант_Статус = СтруктураНастроек.Подписант_Статус;
	Исключение
	КонецПопытки;
	//УПД
	
	Объект.НеобхДопИнфПоИнв = СтруктураНастроек.НеобхДопИнфПоИнв;
	
	Объект.Версия_5_01 = СтруктураНастроек.Версия_5_01;
	Объект.Бухгалтерия = СтруктураНастроек.Бухгалтерия;
	Объект.УТАП = СтруктураНастроек.УТАП;
	Объект.УТ11 = СтруктураНастроек.УТ11;	
	Объект.Период = СтруктураНастроек.Период;
	Объект.ФИОГенДир = СтруктураНастроек.ФИОГенДир;
	Объект.ФИОГлБух = СтруктураНастроек.ФИОГлБух;
	Объект.РежимОтладки = СтруктураНастроек.РежимОтладки;
	Объект.ВыгружатьDESADV = СтруктураНастроек.ВыгружатьDESADV;
	Объект.ВыборСервераEDISOAP = СтруктураНастроек.ВыборСервераEDISOAP;
	Объект.ВыгружатьFNS_ARCHIVE = СтруктураНастроек.ВыгружатьFNS_ARCHIVE;
	Объект.ВыгружатьINVOICE = СтруктураНастроек.ВыгружатьINVOICE;
	Объект.ВыгружатьINVOICEКОР = СтруктураНастроек.ВыгружатьINVOICEКОР;
	 Объект.ВыгружатьORDER = СтруктураНастроек.ВыгружатьORDER;
	Объект.ВыгружатьORDRSP = СтруктураНастроек.ВыгружатьORDRSP;
	Объект.ВыгружатьRECADV = СтруктураНастроек.ВыгружатьRECADV;
	Объект.ВыгружатьALCDES = СтруктураНастроек.ВыгружатьALCDES;
	Объект.ВыгружатьTORG12_SELLER = СтруктураНастроек.ВыгружатьTORG12_SELLER;
	Объект.ВыгружатьТолькоEDISoft = СтруктураНастроек.ВыгружатьТолькоEDISoft;
	Объект.RECADVИсправляетЦены = СтруктураНастроек.RECADVИсправляетЦены;	
	Объект.temp = СтруктураНастроек.temp;
	Объект.Должность = СтруктураНастроек.Должность;
	Объект.ЗагружатьDESADV = СтруктураНастроек.ЗагружатьDESADV;
	Объект.ЗагружатьFNS_ARCHIVE = СтруктураНастроек.ЗагружатьFNS_ARCHIVE;
	Объект.ЗагружатьINVOICE = 	СтруктураНастроек.ЗагружатьINVOICE;
	Объект.ЗагружатьINVOICEКОР = СтруктураНастроек.ЗагружатьINVOICEКОР;
	Объект.ЗагружатьORDER = СтруктураНастроек.ЗагружатьORDER;
	Объект.ЗагружатьORDRSP = СтруктураНастроек.ЗагружатьORDRSP;
	Объект.ЗагружатьRECADV = СтруктураНастроек.ЗагружатьRECADV;	
	Объект.Имя = СтруктураНастроек.Имя;
	Объект.Логин = СтруктураНастроек.Логин;
	Объект.Отчество = СтруктураНастроек.Отчество;
	Объект.Пароль = СтруктураНастроек.Пароль;
	Объект.ПарольККлючуСертификата = СтруктураНастроек.ПарольККлючуСертификата;
	Объект.ПроксиАдрес = СтруктураНастроек.ПроксиАдрес;
	Объект.ПроксиВключен = СтруктураНастроек.ПроксиВключен;
	Объект.ПроксиЗащищенЛогиномИПаролем = СтруктураНастроек.ПроксиЗащищенЛогиномИПаролем;
	Объект.ПроксиЛогин = СтруктураНастроек.ПроксиЛогин;
	Объект.ПроксиПароль = СтруктураНастроек.ПроксиПароль;
	Объект.ПроксиПорт = СтруктураНастроек.ПроксиПорт;
	Объект.СертификатПоле = СтруктураНастроек.СертификатПоле;	
	Объект.Фамилия = СтруктураНастроек.Фамилия;
	Объект.ТаймаутВебСервиса= СтруктураНастроек.ТаймаутВебСервиса;

КонецПроцедуры

Функция ПолучитьТекущуюОрганизацию()
	Попытка
		Возврат ХранилищеОбщихНастроек.Загрузить("ОбъектОрганизация", "КлючОрганизация","Организация");	
	Исключение
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецПопытки;
КонецФункции
&НаКлиенте
Процедура ВосстановитьНастройкиПриОткрытии(Организация = Неопределено)
	Если ЭДИ_РаботаСБазойДанных=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКБД = ПолучитьПутьКБД();
	Если ЗначениеЗаполнено(ПутьКБД) Тогда
		Объект.ПутьКВнешнейБД = ПутьКБД;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
	Иначе
		Организация = ПолучитьТекущуюОрганизацию();
		Если ЗначениеЗаполнено(Организация) Тогда
			Объект.Организация = Организация;
		Иначе
			Сообщить("Выберите организацию для загрузки профиля настроек или создания нового");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораСертификатов();
	
	Если ЗначениеЗаполнено(EDI_ПользовательНастроек) Тогда	
		Пользователь = EDI_ПользовательНастроек; 
	Иначе
		Пользователь = ПолучитьТекущегоПользователя();
	КонецЕсли;
	ПользовательСтрока = ЗначениеВСтрокуВнутрСервер(Пользователь);
	ОрганизацияСтрока = ЗначениеВСтрокуВнутрСервер(Объект.Организация);
	Сообщить("Получаем настройки для пользователя " + Пользователь + " и организации " + Объект.Организация);
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();	
	Отбор.Объект = ПользовательСтрока;
	Отбор.Владелец = ОрганизацияСТрока;			
	Отбор.Тип = "SETTINGS";
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСписокСвойств(Отбор);	
	Если Запрос.Результат=0 тогда
		Сообщить("Не удалось получить настройки для данного пользователя и выбранной организации. Ошибка 01");//нет записей по заданному отбору
		Возврат;
	Иначе
		СписокДанных = Запрос.Содержимое;
		Для Сч=0 По СписокДанных.Верхнийиндекс() Цикл
			Свойство = СписокДанных.Получить(Сч);
			Попытка
				ВосстановитьНастройкиПриОткрытииСервер(Свойство.ДопАтрибуты);	
			Исключение
				СОобщить(ОписаниеОшибки());
			КонецПопытки;
			Продолжить
		КонецЦикла; 
		//Возврат (Сч);
	КонецЕсли;
		
	КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораСертификатов()
	
	СтруктураСертификаты = ВыборСертификатаИзЛичногоХранилища();	
	
	ЭтаФорма.Элементы.СертификатПоле.СписокВыбора.Очистить();
	
	для сч = 0 По СтруктураСертификаты.КОличество()-1 Цикл
		
		Ключ = "Серт" + Строка(сч);
		Сертификат = СтруктураСертификаты[ключ];	
		ЭтаФорма.Элементы.СертификатПоле.СписокВыбора.Добавить(Сертификат.СерийныйНомер, Сертификат.Наименование);
						
	КонецЦикла;
	
КонецПроцедуры
	
Функция СОхранитьНастройкиПриЗакрытииСервер()
	ХранилищеОбщихНастроек.Сохранить("ОбъектЭДИ_ИмяТаблицы", "КлючЭДИ_ИмяТаблицы", Объект.ЭДИ_ИмяТаблицы, "ЭДИ_ИмяТаблицы");
	ХранилищеОбщихНастроек.Сохранить("ОбъектЭДИ_КаталогВнешнейБазыДанных", "КлючЭДИ_КаталогВнешнейБазыДанных", Объект.ЭДИ_КаталогВнешнейБазыДанных, "ЭДИ_КаталогВнешнейБазыДанных");
	ХранилищеОбщихНастроек.Сохранить("ОбъектЭДИ_ПарольБД", "КлючЭДИ_ПарольБД", Объект.ЭДИ_ПарольБД, "ЭДИ_ПарольБД");
	ХранилищеОбщихНастроек.Сохранить("ОбъектЭДИ_ПользовательБД", "КлючЭДИ_ПользовательБД", Объект.ЭДИ_ПользовательБД, "ЭДИ_ПользовательБД");
	ХранилищеОбщихНастроек.Сохранить("ОбъектЭДИ_ПортБД", "КлючЭДИ_ПортБД", Объект.ЭДИ_ПортБД, "ЭДИ_ПортБД");
	ХранилищеОбщихНастроек.Сохранить("ОбъектЭДИ_РежимРаботыБД", "КлючЭДИ_РежимРаботыБД", Объект.ЭДИ_РежимРаботыБД, "ЭДИ_РежимРаботыБД");
	ХранилищеОбщихНастроек.Сохранить("ОбъектЭДИ_СерверБД", "КлючЭДИ_СерверБД", Объект.ЭДИ_СерверБД, "ЭДИ_СерверБД");
	
	ХранилищеОбщихНастроек.Сохранить("ОбъектОрганизация", "КлючОрганизация", Объект.Организация,"Организация");		
	СТруктура = Новый Структура;
	Структура.Вставить("Версия_5_01", Объект.Версия_5_01);
	Структура.Вставить("ИспользоватьSSCC", Объект.ИспользоватьSSCC);
	Структура.Вставить("ФИОГенДир", Объект.ФИОГенДир);
	Структура.Вставить("ФИОГлБух", Объект.ФИОГлБух);
	СТруктура.Вставить("УТАП", Объект.УТАП);
	СТруктура.Вставить("УТ11", Объект.УТ11);
	СТруктура.Вставить("Бухгалтерия", Объект.Бухгалтерия);
	СТруктура.Вставить("ОтпечатокСеритфиката", Объект.ОтпечатокСеритфиката);	
	Структура.Вставить("СертификатПоле",ЗначениеВСтрокуВнутрСервер(Объект.СертификатПоле));
	Структура.Вставить("ПутьКВнешнейБД",Объект.ПутьКВнешнейБД);
	Структура.Вставить("СпособыПоискаНоменклатуры",Объект.СпособыПоискаНоменклатуры.Выгрузить());
	Структура.Вставить("EDI_Номенклатура_ЦенаИзФайла",Объект.EDI_Номенклатура_ЦенаИзФайла);
	Структура.Вставить("ВыгружатьDESADV",Объект.ВыгружатьDESADV);
	Структура.Вставить("ВыборСервераEDISOAP",Объект.ВыборСервераEDISOAP);
	Структура.Вставить("серверСОАП",Объект.серверСОАП);
	Структура.Вставить("ВыгружатьFNS_ARCHIVE",Объект.ВыгружатьFNS_ARCHIVE);
	
	//
	
	//УПД
	Структура.Вставить("ВыгружатьУПД",Объект.ВыгружатьУПД);
	Структура.Вставить("ВыгружатьУКД",Объект.ВыгружатьУКД);
	Структура.Вставить("Подписант_ОбластьПолномочий",Объект.Подписант_ОбластьПолномочий);
	Структура.Вставить("Подписант_Статус",Объект.Подписант_Статус);
	//УПД
	
	СтруктураНастройкиАдреса = Новый Структура;
	СтруктураНастройкиАдресаПок = Новый Структура;
	СтруктураНастройкиАдресаПок.Вставить("Пок_Город",Объект.Пок_Город);
	СтруктураНастройкиАдресаПок.Вставить("Пок_индекс",Объект.Пок_индекс);
	СтруктураНастройкиАдресаПок.Вставить("Пок_Улица",Объект.Пок_Улица);
	СтруктураНастройкиАдресаПок.Вставить("Пок_Дом",Объект.Пок_Дом);
	СтруктураНастройкиАдресаОрг = Новый Структура;
	СтруктураНастройкиАдресаОрг.Вставить("Орг_Индекс",Объект.Орг_Индекс);
	СтруктураНастройкиАдресаОрг.Вставить("Орг_Город",Объект.Орг_Город);
	СтруктураНастройкиАдресаОрг.Вставить("Орг_Улица",Объект.Орг_Улица);
	СтруктураНастройкиАдресаОрг.Вставить("Орг_Дом",Объект.Орг_Дом);
	СтруктураНастройкиАдресаГп = Новый Структура;
	СтруктураНастройкиАдресаГп.Вставить("Орг_Дом",Объект.ГП_Город);
	СтруктураНастройкиАдресаГп.Вставить("Орг_Дом",Объект.Гп_Улица);
	СтруктураНастройкиАдресаГп.Вставить("Орг_Дом",Объект.Гп_дом);
	СтруктураНастройкиАдресаГп.Вставить("Орг_Дом",Объект.ГП_Город);
	СтруктураНастройкиАдреса.Вставить("СтруктураНастройкиАдресаПок",СтруктураНастройкиАдресаПок);
	СтруктураНастройкиАдреса.Вставить("СтруктураНастройкиАдресаОрг",СтруктураНастройкиАдресаОрг);
	СтруктураНастройкиАдреса.Вставить("СтруктураНастройкиАдресаГп",СтруктураНастройкиАдресаГп);
	Структура.Вставить("СтруктураНастройкиАдреса",ЗначениеВСтрокуВнутр(СтруктураНастройкиАдреса));
	
	Структура.Вставить("НеобхДопИнфПоИнв",Объект.НеобхДопИнфПоИнв);
	///
		
	Структура.Вставить("ВыгружатьINVOICE",Объект.ВыгружатьINVOICE);
	Структура.Вставить("ВыгружатьINVOICEКОР",Объект.ВыгружатьINVOICEКОР);
	Структура.Вставить("ВыгружатьORDER",Объект.ВыгружатьORDER);
	Структура.Вставить("ВыгружатьORDRSP",Объект.ВыгружатьORDRSP);
	Структура.Вставить("ВыгружатьRECADV",Объект.ВыгружатьRECADV);
	Структура.Вставить("ВыгружатьALCDES",Объект.ВыгружатьALCDES);
	Структура.Вставить("ВыгружатьTORG12_SELLER",Объект.ВыгружатьTORG12_SELLER);
	Структура.Вставить("ВыгружатьТолькоEDISoft",Объект.ВыгружатьТолькоEDISoft);
	Структура.Вставить("RECADVИсправляетЦены",Объект.RECADVИсправляетЦены);
	Структура.Вставить("temp",Объект.temp);	
	Структура.Вставить("Должность",Объект.Должность);
	Структура.Вставить("ЗагружатьDESADV",Объект.ЗагружатьDESADV);
	Структура.Вставить("ЗагружатьFNS_ARCHIVE",Объект.ЗагружатьFNS_ARCHIVE);
	Структура.Вставить("ЗагружатьINVOICE",Объект.ЗагружатьINVOICE);
	Структура.Вставить("ЗагружатьINVOICEКОР",Объект.ЗагружатьINVOICEКОР);																			
	Структура.Вставить("ЗагружатьORDER",Объект.ЗагружатьORDER);
	Структура.Вставить("ЗагружатьORDRSP",Объект.ЗагружатьORDRSP);
	Структура.Вставить("ЗагружатьRECADV",Объект.ЗагружатьRECADV);
	Структура.Вставить("РежимОтладки",Объект.РежимОтладки);
	Структура.Вставить("Имя",Объект.Имя);
	Структура.Вставить("Логин",Объект.Логин);
	Структура.Вставить("Отчество",Объект.Отчество);
	Структура.Вставить("Пароль",Объект.Пароль);
	Структура.Вставить("ПарольККлючуСертификата",Объект.ПарольККлючуСертификата);
	Структура.Вставить("ПроксиАдрес",Объект.ПроксиАдрес);
	Структура.Вставить("ПроксиВключен",Объект.ПроксиВключен);
	Структура.Вставить("ПроксиЗащищенЛогиномИПаролем",Объект.ПроксиЗащищенЛогиномИПаролем);
	Структура.Вставить("ПроксиЛогин",Объект.ПроксиЛогин);
	Структура.Вставить("ПроксиПароль",Объект.ПроксиПароль);
	Структура.Вставить("ПроксиПорт",Объект.ПроксиПорт);
	Структура.Вставить("СертификатПоле",Объект.СертификатПоле);
	Структура.Вставить("Фамилия",Объект.Фамилия);
	Структура.Вставить("ТаймаутВебСервиса",Объект.ТаймаутВебСервиса);	
	Структура.Вставить("Период",Объект.Период);
	//ВФ(*)БУХ
	Структура.Вставить("СчётВместоРеализацииБУХ",Объект.СчётВместоРеализацииБУХ);
	Структура.Вставить("ИспользоватьДопСведения",Объект.ИспользоватьДопСведения);
	Структура.Вставить("CхемыПартнеровКонтрагентов",Объект.CхемыПартнеровКонтрагентов);
	Структура.Вставить("ЗаписатьЛогВФайл",Объект.ЗаписатьЛогВФайл);
	Структура.Вставить("КороткийНомер",Объект.КороткийНомер);
	//ВФ(**)
	СтруктураСтрока = ЗначениеВСтрокуВнутрСервер(Структура);
	Возврат СтруктураСтрока;
КонецФункции

&НаКлиенте
Функция СохранитьНастройкиПриЗакрытии()
	Если ЭДИ_РаботаСБазойДанных=Неопределено Тогда
		Возврат Ложь;
	Конецесли;
	СтруктураСТрока = СОхранитьНастройкиПриЗакрытииСервер();
	
	
	Тип = "SETTINGS";
	Пользователь = ЗначениеВСтрокуВнутрСервер(ПолучитьТекущегоПользователя());	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда		
		ОрганизацияСтрока = ЗначениеВСтрокуВнутрСервер(Объект.Организация);
	Иначе
		Сообщить("Не выбрана организация!");
		Возврат Ложь;
	КонецЕсли;
	НоваяЗапись = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();
	НоваяЗапись.Объект = ПОльзователь;
	НоваяЗапись.Владелец = ОрганизацияСтрока;
	НоваяЗапись.ДопАтрибуты = СтруктураСтрока;
	НоваяЗапись.Тип = Тип;
	Результат = ЭДИ_РаботаСБазойДанных.ЗаписатьСвойство(НоваяЗапись);
	
	Если Результат.Результат = 0 Тогда 
		Сообщить ("Не удалось записать настройки в бд по причине: " + Символы.ПС + Результат.Сообщение);
		Возврат Ложь;
	Иначе 		
	КонецЕсли;
	Возврат Истина;
КонецФункции
&НаКлиенте
Процедура Контрагент_ПолеПриИзменении(Элемент)
	ЗаписатьДанныеОПоискеКонтрагентаВНастройки(Объект.МестоПоискаКонтрагента, Объект.Контрагент_Поле);
КонецПроцедуры
&НаКлиенте
Процедура МестоПоискаКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//Список = Новый СписокЗначений;
	//Список.Добавить(1,"Дополнительные реквизиты и сведения");
	//Список.Добавить(2,"Реквизиты");
	//Объект.МестоПоискаКонтрагента = ВыбратьИзСписка(Список);	
КонецПроцедуры

Функция ПОлучитьСписокСвойствКОнтрагента()	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Свойство.Наименование КАК Наименование
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП(Справочник.Контрагенты)";
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();	
	МассивСвойств = ТаблицаРезультат.ВыгрузитьКолонку("Наименование");
	Возврат МассивСвойств;
КонецФункции

Функция ПОлучитьСписокСвойствПартнера()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Свойство.Наименование КАК Наименование
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП(Справочник.Партнеры)";
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();	
	МассивСвойств = ТаблицаРезультат.ВыгрузитьКолонку("Наименование");
	ВОзврат МассивСвойств;
КонецФункции

Функция ПолучитьСписокПолейОбъектаМетаданныхОпределенногоТипа(МетаданныеОбъекта, ТипЗначенияПолей) Экспорт
	Список = Новый Массив;
	
	Попытка
		Для каждого Поле Из МетаданныеОбъекта.Измерения Цикл
			Если Поле.Тип.СодержитТип(ТипЗначенияПолей) Тогда
				Список.Добавить(Поле.Имя);
			КонецЕсли; 
		КонецЦикла; 
	Исключение
	КонецПопытки; 
	
	Попытка
		Для каждого Поле Из МетаданныеОбъекта.Ресурсы Цикл
			Если Поле.Тип.СодержитТип(ТипЗначенияПолей) Тогда
				Список.Добавить(Поле.Имя);
			КонецЕсли; 
		КонецЦикла; 
	Исключение
	КонецПопытки;
	
	Попытка
		Для каждого Поле Из МетаданныеОбъекта.Реквизиты Цикл
			Если Поле.Тип.СодержитТип(ТипЗначенияПолей) Тогда
				Список.Добавить(Поле.Имя);
			КонецЕсли; 
		КонецЦикла; 
	Исключение
	КонецПопытки;
	
	Попытка
		Для каждого Поле Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
			Если Поле.Тип.СодержитТип(ТипЗначенияПолей) Тогда
				Список.Добавить(Поле.Имя);
			КонецЕсли; 
		КонецЦикла; 
	Исключение
	КонецПопытки;
	
	//Список.СортироватьПоПредставлению();
	Возврат Список;
КонецФункции

функция ПолучитьСписокРеквизитовДляGLNКонтрагента()	
	Список = ПолучитьСписокПолейОбъектаМетаданныхОпределенногоТипа(Метаданные.Справочники.Контрагенты,Тип("Строка"));
	Возврат Список;		
КонецФункции

Функция ПолучитьСписокРеквизитовДляGLNПартнера()	
	Список = ПолучитьСписокПолейОбъектаМетаданныхОпределенногоТипа(Метаданные.Справочники.Партнеры, Тип("Строка"));
	Возврат Список;
КонецФункции
&НаКлиенте
Процедура МестоПоискаКонтрагентаПриИзменении(Элемент)	
	Если Объект.МестоПоискаКонтрагента = "1" Тогда
		МассивПолей = ПОлучитьСписокСвойствКОнтрагента();
	ИначеЕсли Объект.МестоПоискаКонтрагента = "2" Тогда
		МассивПолей = ПолучитьСписокРеквизитовДляGLNКонтрагента();
	КонецЕсли;	
	Попытка 
		ЭтаФорма.Элементы.Контрагент_Поле.СписокВыбора.Очистить();
		ЭтаФорма.Элементы.Контрагент_Поле.СписокВыбора.ЗагрузитьЗначения(МассивПолей);
	Исключение
	КонецПопытки;
	ЗаписатьДанныеОПоискеКонтрагентаВНастройки(Объект.МестоПоискаКонтрагента, Объект.Контрагент_Поле);
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ЗаписатьДанныеОПоискеКонтрагентаВНастройки(МестоПоискаКОнтрагента, ПолеДляПоиска)
		ХранилищеОбщихНастроек.Сохранить("ОбъектМестоПоискаКонтрагента", "КлючМестоПоискаКонтрагента", МестоПоискаКОнтрагента,,"МестоПоискаКонтрагента");	
		ХранилищеОбщихНастроек.Сохранить("ОбъектКонтрагент_Поле", "КлючКонтрагент_Поле", ПолеДляПоиска,,"Контрагент_Поле");	
КонецПроцедуры
&НаКлиенте
Процедура МестоПоискаПартнераПриИзменении(Элемент)
	Если Объект.МестоПоискаПартнера = "1" Тогда
		МассивПолей = ПОлучитьСписокСвойствПартнера();
	ИначеЕсли Объект.МестоПоискаПартнера = "2" Тогда
		МассивПолей = ПолучитьСписокРеквизитовДляGLNПартнера();
	КонецЕсли;	
	Попытка
		ЭтаФорма.Элементы.Партнер_Поле.СписокВыбора.Очистить();
		ЭтаФорма.Элементы.Партнер_Поле.СписокВыбора.ЗагрузитьЗначения(МассивПолей);
	Исключение
	КонецПопытки;	
	ЗаписатьДанныеОПоискеПартнераВНастройки(Объект.МестоПоискаПартнера, Объект.Партнер_Поле);
КонецПроцедуры

ПРоцедура ЗаписатьДанныеОПоискеПартнераВНастройки(МестоПОискаПартнера, ПолеДляПоиска)
	
	ХранилищеОбщихНастроек.Сохранить("ОбъектМестоПоискаПартнера", "КлючМестоПоискаПартнера", МестоПОискаПартнера,,"МестоПоискаПартнера");	
	ХранилищеОбщихНастроек.Сохранить("ОбъектПартнер_Поле", "КлючПартнер_Поле", ПолеДляПоиска,,"Партнер_Поле");	
	
КонецПроцедуры
&НаКлиенте
Процедура Партнер_ПолеПриИзменении(Элемент)
	ЗаписатьДанныеОПоискеПартнераВНастройки(Объект.МестоПоискаПартнера, Объект.Партнер_Поле);
КонецПроцедуры
&НаКлиенте
Процедура ДобавитьСТроку(Команда)
	Ответ = ПолучитьФорму("ВнешняяОбработка.EDISOFT.Форма.ФормаКритериевПоискаНоменклатуры").ОткрытьМодально();
	ОбработатьДобавлениеСТроки(Ответ);
КонецПроцедуры

Процедура ОбработатьДобавлениеСТроки(Ответ)
	Попытка
		НоваяСтрока = Объект.СпособыПоискаНоменклатуры.Добавить();
		Если Ответ[0] = "1" Тогда
			НоваяСтрока.МестоПОиска = "По реквизиту";
		ИначеЕсли Ответ[0] = "2" Тогда
			НоваяСтрока.МестоПоиска = "По РС Дополнительные сведения";
		ИначеЕсли Ответ[0] = "3" Тогда
			НоваяСтрока.МестоПОиска = "По РС Штрихкоды";
		ИначеЕсли Ответ[0] = "4" Тогда
			НоваяСтрока.МестоПОиска = "Во внешней бд";
		ИначеЕсли Ответ[0] = "5" Тогда
			НоваяСтрока.МестоПОиска = "Номенклатура поставщиков";
		ИначеЕсли Ответ[0] = "6" Тогда
			НоваяСтрока.МестоПОиска = "По справонику Дополнительные реквизиты";
		КонецЕсли;
		Если Ответ[1] = "1" Тогда
			НоваяСтрока.ТегДляПоиска = "BuyerItemCode";
		ИначеЕсли Ответ[1] = "2" Тогда
			НоваяСтрока.ТегДляПоиска = "SupplierItemCode";
		ИначеЕсли Ответ[1] = "3" Тогда
			НоваяСтрока.ТегДляПоиска = "EAN";
		КонецЕсли;	
		НоваяСтрока.ПолеДляПОиска = Ответ[2];
		ХранилищеОбщихНастроек.Сохранить("ОбъектСпособыПоискаНоменклатуры","КлючСпособыПоискаНоменклатуры", Объект.СпособыПоискаНоменклатуры.Выгрузить(),"СпособыПоискаНоменклатуры");
	Исключение
		Объект.СпособыПоискаНоменклатуры.Удалить(НоваяСТрока.ПолучитьИдентификатор());
	КонецПопытки;
КонецПроцедуры

Функция СобратьСписокЗначенийИзТаблицы(Таблица)
КонецФункции

&НаСервере
Процедура УдалитьСтрокуНаСервере(ИндексСтроки)
	ПОпытка Объект.СпособыПоискаНоменклатуры.Удалить(ИндексСтроки); Исключение КонецПопытки;
КонецПроцедуры
&НаКлиенте
Процедура УдалитьСтроку(Команда)
	ИндексыСтрокДляУдаления = ЭтаФОрма.Элементы.СпособыПоискаНоменклатуры.ВыделенныеСтроки;
	Для каждого ИндексСтроки Из ИндексыСтрокДляУдаления Цикл
		УдалитьСтрокуНаСервере(ИндексСтроки);	
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура ПолучатьОрганизациюИзНастроекПриИзменении(Элемент)
	Если Объект.ПолучатьОрганизациюИзНастроек Тогда
		ЭтаФорма.Элементы.ОрганизацияПоУмолчанию.Видимость = Ложь;
	Иначе
		ЭтаФорма.Элементы.ОрганизацияПоУмолчанию.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПутьКВнешнейБДПриИзменении(Элемент)
	Если (Найти(Объект.ПутьКВнешнейБД, "\")>0) и (Прав(Объект.ПутьКВнешнейБД,1)<>"\") Тогда
		Объект.ПутьКВнешнейБД = Объект.ПутьКВнешнейБД + "\";
		Слеш = "\";
	ИначеЕсли (Найти(Объект.ПутьКВнешнейБД, "/")>0) и (Прав(Объект.ПутьКВнешнейБД,1)<>"/") Тогда
		Объект.ПутьКВнешнейБД = Объект.ПутьКВнешнейБД + "/";
		Слеш = "/";
	КонецЕсли;
	ВосстановитьНастройкиПриОткрытии();	
КонецПроцедуры
&НаКлиенте
Процедура ПутьКВнешнейБДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогВыбораTemp = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораTemp.МножественныйВыбор = Ложь;
	ДиалогВыбораTemp.Заголовок = "Выберите каталог для хранения файлов";
	Если ДиалогВыбораTemp.Выбрать() Тогда
		Объект.ПутьКВнешнейБД = ДиалогВыбораTemp.Каталог;
	КонецЕсли;
	Если (Найти(Объект.ПутьКВнешнейБД, "\")>0) и (Прав(Объект.ПутьКВнешнейБД,1)<>"\") Тогда
		Объект.ПутьКВнешнейБД = Объект.ПутьКВнешнейБД + "\";
		Слеш = "\";
	ИначеЕсли (Найти(Объект.ПутьКВнешнейБД, "/")>0) и (Прав(Объект.ПутьКВнешнейБД,1)<>"/") Тогда
		Объект.ПутьКВнешнейБД = Объект.ПутьКВнешнейБД + "/";
		Слеш = "/";
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ПутьКВнешнейБДОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	WshShell = Новый COMОбъект("Wscript.Shell"); 
   	WshShell.Run("Explorer "+Объект.ПутьКВнешнейБД);
КонецПроцедуры
&НаКлиенте
Процедура СертификатПолеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураСертификаты = ВыборСертификатаИзЛичногоХранилища();	
	
	ЭтаФорма.Элементы.СертификатПоле.СписокВыбора.Очистить();
	
	для сч = 0 По СтруктураСертификаты.КОличество()-1 Цикл
		
		Ключ = "Серт" + Строка(сч);
		Сертификат = СтруктураСертификаты[ключ];	
		ЭтаФорма.Элементы.СертификатПоле.СписокВыбора.Добавить(Сертификат.СерийныйНомер, Сертификат.Наименование);
						
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыборСертификатаИзЛичногоХранилища() Экспорт
	
	СертификатПодписи = Неопределено;
	
	МенеджерКриптоПРО = Новый МенеджерКриптографии(МодульКриптографии,ПутьКМодулюНаСервереLinux,ТипМодуляКриптографии);
	Хранилище = МенеджерКриптоПРО.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);	
	
	Список = Новый СписокЗначений;
	
	СтруктураСертификаты = Новый СТруктура;
	
	сч = 0;
	Для каждого Сертификат Из Хранилище.ПолучитьВсе() Цикл
		СтруктураСертификат = Новый СТруктура;
		Попытка
			СтруктураСертификат.Вставить("Наименование", Сертификат.Субъект.CN);
		Исключение
		КонецПопытки;
		СтруктураСертификат.Вставить("Отпечаток", Сертификат.Отпечаток);
		СтруктураСертификат.Вставить("СерийныйНомер", СтрЗаменить(Сертификат.СерийныйНомер, " ",""));
		Ключ = "Серт" + Строка(Сч);
		Сч = Сч + 1;
		СтруктураСертификаты.Вставить(Ключ, СтруктураСертификат);
		Список.Добавить(Сертификат.Отпечаток, Сертификат.Субъект.CN+ " ("+ Сертификат.Отпечаток+")");	
	КонецЦикла;		
		
	Список.СортироватьПоПредставлению();
	
	//СтруктураВозврата = Новый Структура;	
	//
	//СтруктураВозврата.Вставить("Список", Список);
	//СтруктураВозврата.Вставить("СтруктураСертификаты",СтруктураСертификаты);
	
	Возврат СтруктураСертификаты;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииКонфигурации()
	Если Объект.Бухгалтерия Тогда
		Объект.УТ11 = Ложь;
		Объект.УТАП = Ложь;
		ЭтаФорма.Элементы.ВыгружатьALCDES.Видимость = Ложь;
	ИначеЕсли Объект.УТ11 Тогда
		Объект.УТАП = Ложь;
		Объект.Бухгалтерия = Ложь;
		ЭтаФорма.Элементы.ВыгружатьALCDES.Видимость = Ложь;
	ИначеЕсли  Объект.УТАП Тогда
		Объект.УТ11 = Ложь;
		Объект.Бухгалтерия = Ложь;		
		ЭтаФорма.Элементы.ВыгружатьALCDES.Видимость = Истина;
	Иначе
		Объект.УТ11 = Истина;
		Объект.Бухгалтерия = Ложь;
		Объект.УТАП = Ложь;
		ЭтаФорма.Элементы.ВыгружатьALCDES.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура БухгалтерияПриИзменении(Элемент)
	ПриИзмененииКонфигурации();
КонецПроцедуры
&НаКлиенте
Процедура УТ11ПриИзменении(Элемент)
	ПриИзмененииКонфигурации();
КонецПроцедуры
&НаКлиенте
Процедура УТАППриИзменении(Элемент)
	ПриИзмененииКонфигурации();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	РезультатСохранения = СохранитьНастройкиПриЗакрытии();
	Если РезультатСохранения Тогда
	Иначе
		//Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Организация1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СохранитьНастройкиПриЗакрытии();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораПользователей()
	ПутьКБД = ПолучитьПутьКБД();
	Если ЗначениеЗаполнено(ПутьКБД) Тогда
		Объект.ПутьКВнешнейБД = ПутьКБД;
	КонецЕсли;
	
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();		
	ОрганизацияСтрока = ЗначениеВСтрокуВнутрСервер(Объект.Организация);
	Отбор.Владелец = ОрганизацияСТрока;			
	Отбор.Тип = "SETTINGS";
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСписокСвойств(Отбор);	
	Если Запрос.Результат=0 тогда
		//Сообщить("Не удалось получить настройки для данного пользователя и выбранной организации. Ошибка 01");//нет записей по заданному отбору
		Возврат;
	Иначе
		СписокДанных = Запрос.Содержимое;
		Для Сч=0 По СписокДанных.Верхнийиндекс() Цикл
			Свойство = СписокДанных.Получить(Сч);
			Попытка
				ПОльзовательДляВариантовНстроек = ЗначениеИзСтрокиВнутрСервер(Свойство.Объект);
				ЭтаФорма.Элементы.ПользовательНастроек.СписокВыбора.Добавить(ПОльзовательДляВариантовНстроек,ПОльзовательДляВариантовНстроек);
				//ВосстановитьНастройкиПриОткрытииСервер(Свойство.ДопАтрибуты);	
			Исключение
				СОобщить(ОписаниеОшибки());
			КонецПопытки;
			Продолжить
		КонецЦикла; 
		//Возврат (Сч);
	КонецЕсли;			
КонецПроцедуры

&НаКлиенте
Процедура Организация1ПриИзменении(Элемент)
	ВосстановитьНастройкиПриОткрытии();
КонецПроцедуры

&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	ВосстановитьНастройкиПриОткрытии();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьFNS_ARCHIVEПриИзменении(Элемент)
	
	ОбработатьИзменение_выгружатьFNS();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменение_выгружатьFNS()
	
	Если Объект.ВыгружатьFNS_ARCHIVE Тогда
		ЭтаФорма.Элементы.Группа18.Видимость = Истина;
	Иначе
		ЭтаФорма.Элементы.Группа18.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеобхДопИнфПоИнвПриИзменении(Элемент)
	
	  ОбработатьНеобхИспДопИнфПоИнв();
	
КонецПроцедуры

Процедура ОбработатьНеобхИспДопИнфПоИнв()
	
	Если Объект.НеобхДопИнфПоИнв Тогда
		ЭтаФорма.Элементы.ИнформацияДляInvoice.Видимость = Истина;
	Иначе
		ЭтаФорма.Элементы.ИнформацияДляInvoice.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьсяКБД(Команда)
	ПолучательБД_Подключен=ложь;   
	ЭДИ_ПараметрSQLITE=0;
	ПроверитьСуществованиеКаталога(Объект.ЭДИ_КаталогВнешнейБазыДанных,Истина);
	Если Объект.ЭДИ_РежимРаботыБД = "sqlite" тогда 
		ЭДИ_ПараметрSQLITE = 0;
		ЭДИ_СтрокаПодключения = СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных);
	ИначеЕсли Объект.ЭДИ_РежимРаботыБД = "MY" тогда 
		ЭДИ_СтрокаПодключения = "DRIVER={MySQL ODBC 5.3 ANSI Driver};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Port="+СокрЛП(Объект.ЭДИ_ПортБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";User="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Password="+СокрЛП(Объект.ЭДИ_ПарольБД)+";";  //MySQL
	ИначеЕсли Объект.ЭДИ_РежимРаботыБД = "PG" тогда  
		ЭДИ_СтрокаПодключения = "DSN=PostgreSQL30;Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Port="+СокрЛП(Объект.ЭДИ_ПортБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";UID="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";";   //PostgreSQL
	иначеЕсли Объект.ЭДИ_РежимРаботыБД = "MSNC10" тогда  
		ЭДИ_СтрокаПодключения = "Driver={SQL Server Native Client 10.0};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";Uid="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";"
	иначеЕсли Объект.ЭДИ_РежимРаботыБД = "MSNC11" тогда  
		ЭДИ_СтрокаПодключения = "Driver={SQL Server Native Client 11.0};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";Uid="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";"
	иначеЕсли Объект.ЭДИ_РежимРаботыБД = "MSSSD" тогда  
		ЭДИ_СтрокаПодключения = "Driver={SQL Server};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";Uid="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";"
	КонецЕСлИ; 
	
	Если ЭДИ_СтрокаПодключения="" тогда
		Предупреждение("Нет настроек подключения к БД!");
		Возврат;
	КонецеСли;

	ИмяТаблицыПолучатель = "";
	
	ИмяТаблицыПолучатель = СокрЛП(Объект.ЭДИ_ИмяТаблицы);	
	
	Попытка
		ЭДИ_РаботаСБазойДанных = ЭДИ_ОбщиеИнструменты.ПолучитьВнешнююБазуДанных(ЭДИ_СтрокаПодключения, Объект.ЭДИ_РежимРаботыБД, ЭДИ_ПараметрSQLITE, ИмяТаблицыПолучатель);
		Если ЭДИ_РаботаСБазойДанных.ЕстьОшибка=1 тогда
			ПолучательБД_Подключен = Ложь;
			Сообщить(ЭДИ_РаботаСБазойДанных.СообщениеОшибки);
			Элементы.ПодключитьсяКБД.ЦветФона = WebЦвета.Коралловый;
		иначе	
			ПолучательБД_Подключен = Истина;
			Элементы.ПодключитьсяКБД.ЦветФона = WebЦвета.ЗеленоЖелтый;
		КонецЕСЛИ;
	исключение
		ПолучательБД_Подключен = Ложь;
		Сообщить(Описаниеошибки());
	Конецпопытки;
КонецПроцедуры

&НаКлиенте
Процедура СпособыПоискаНоменклатурыМестоПОискаПриИзменении(Элемент)
	Массив = Неопределено;
	Если Элемент.ТекстРедактирования = "По реквизиту" Тогда
		ЭтаФорма.Элементы.НаборСвойствДляПоискаНоменклатуры.Видимость = Ложь;
		Массив = ПолучитьСписокРЕквизитовНоменклатуры();
	ИначеЕсли Элемент.ТекстРедактирования = "По РС Дополнительные сведения" Тогда
		ЭтаФорма.Элементы.НаборСвойствДляПоискаНоменклатуры.Видимость = Ложь;
		Массив = ПолучитьСписокСвойств("Справочник.Номенклатура");		                     	
	ИначеЕсли Элемент.ТекстРедактирования = "По РС Штрихкоды" Тогда
		ЭтаФорма.Элементы.НаборСвойствДляПоискаНоменклатуры.Видимость = Ложь;
		Массив = ПолучитьСписокПолейРегистраШтрихкоды();
	ИначеЕсли Элемент.ТекстРедактирования = "во внешней бд" Тогда
		ЭтаФорма.Элементы.НаборСвойствДляПоискаНоменклатуры.Видимость = Ложь;
		Массив = Новый Массив;
		Массив.Добавить("КодПокупателя");
		Массив.Добавить("КодПоставщика");
		Массив.Добавить("Штрихкод");
	ИначеЕсли Элемент.ТекстРедактирования = "Номенклатура поставщиков" Тогда
		ЭтаФорма.Элементы.НаборСвойствДляПоискаНоменклатуры.Видимость = Ложь;
		Массив = ПолучитьСписокРеквизитовНоменклатурПоставщиков();
	ИначеЕсли Элемент.ТекстРедактирования = "По справонику Дополнительные реквизиты" Тогда
		ЭтаФорма.Элементы.НаборСвойствДляПоискаНоменклатуры.Видимость = Истина;
		Массив = ПолучитьСписокДопРеквизитовНоменклатуры();
	КонецЕсли;
	Если Массив <> Неопределено Тогда
		ЭтаФорма.Элементы.СпособыПоискаНоменклатурыПолеДляПОиска.СписокВыбора.ЗагрузитьЗначения(Массив);
	Иначе
		Если Не Элемент.ТекстРедактирования = "6" Тогда
			Сообщить("Не удалось получить список полей для сравнения.");	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьСписокДопРеквизитовНоменклатуры()
				
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеРеквизитыИСведения.Наименование КАК Наименование,
	               |	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
				   |ГДЕ
	               |	ДополнительныеРеквизитыИСведения.НаборСвойств.Ссылка  = &НаборСвойств";				  
	Запрос.УстановитьПараметр("НаборСвойств",Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие);	
			
	РезультатДопРеквизиты = Запрос.Выполнить().Выгрузить();
	МассивДопРеквизиты = РезультатДопРеквизиты.ВыгрузитьКолонку("Наименование");
	
	Возврат МассивДопРеквизиты;
	
КонецФункции


Функция ПолучитьСписокРеквизитовНоменклатурПоставщиков()
	Возврат ПолучитьСписокПолейОбъектаМетаданныхОпределенногоТипа(Метаданные.Справочники.НоменклатураПоставщиков, Тип("Строка"));
КонецФункции

Функция ПолучитьСписокПолейРегистраШтрихкоды()
	ВОзврат ПолучитьСписокПолейОбъектаМетаданныхОпределенногоТипа(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры, Тип("Строка"));
КонецФункции

Функция ПолучитьСписокСвойств(Тип)
	Запрос = Новый Запрос;
	Если Объект.Бухгалтерия Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СвойстваОбъектов.Заголовок
		               |ИЗ
		               |	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК СвойстваОбъектов
		               |ГДЕ
		               |	СвойстваОбъектов.НаборСвойств = &НазначениеСвойства";
		
		//Запрос.УстановитьПараметр("Наименование",Наименование);
		Запрос.УстановитьПараметр("НазначениеСвойства",Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура);
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();	
		МассивСвойств = ТаблицаРезультат.ВыгрузитьКолонку("Заголовок");
	Иначе		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДополнительныеСведения.Свойство.Наименование КАК Наименование
		               |ИЗ
		               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		               |ГДЕ
		               |	ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП("+Тип+")";
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();	
		МассивСвойств = ТаблицаРезультат.ВыгрузитьКолонку("Наименование");
	КонецЕсли;
	Возврат МассивСвойств; 
КонецФункции

Функция ПолучитьСписокРЕквизитовНоменклатуры()
	Возврат ПолучитьСписокПолейОбъектаМетаданныхОпределенногоТипа(Метаданные.Справочники.Номенклатура, Тип("Строка"));
КонецФункции

&НаКлиенте
Процедура ОбновитьПоследнийSSCC(Команда)
	ПереписатьSSCCЗапись();
КонецПроцедуры

&НаКлиенте
Функция ПереписатьSSCCЗапись()
		
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Сообщить("Не заполнена организация!");
		Возврат Неопределено;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НомерПоследнегоКода) ТОгда
		Сообщить("Не указан номер последнего кода!");
		Возврат Неопределено;
	КонецЕсли;
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Объект.Организация);
	Отбор.Тип = "SSCC";
	
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);
	
	Если Запрос.Результат=0 тогда
		
		Сообщить("Не найдена запись для организации " + Объект.Организация + " в базе данных");
		Возврат Неопределено;
		
	Иначе
		ТекСвойство = Запрос.Содержимое;
		ТекСвойство.ИндексированныйАтрибут1 = НомерПоследнегоКода;
		ЭДИ_РаботаСБазойДанных.ПерезаписатьПоИндексу(ТекСвойство);		
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура УстановитьНомерПоследнегоКода()
	
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Объект.Организация);	
	КонецЕсли;
	Отбор.Тип = "SSCC";
	
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);
	
	Если Запрос.Результат=0 тогда			
		
	Иначе
		ТекСвойство = Запрос.Содержимое;
		НомерПоследнегоКода = ТекСвойство.ИндексированныйАтрибут1;		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СертификатПолеПриИзменении(Элемент)
	
	СтруктураСертификаты = ВыборСертификатаИзЛичногоХранилища();
	
	для сч = 0 По СтруктураСертификаты.КОличество()-1 Цикл
		
		Ключ = "Серт" + Строка(сч);
		Сертификат = СтруктураСертификаты[ключ];
						
		Если Сертификат.СерийныйНомер = Объект.СертификатПоле Тогда
			
			ОтпечатокСертификата = Сертификат.Отпечаток;			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
		Сообщить("Не удалось получить отпечаток сертификата. Подписание УПД невозможно!");
	Иначе
		Объект.ОтпечатокСеритфиката = ОтпечатокСертификата;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭДИ_КаталогВнешнейБазыДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога; 
	ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
	ДиалогОткрытия.Каталог = ""; 
	ДиалогОткрытия.МножественныйВыбор = Ложь; 
	ДиалогОткрытия.Заголовок = "Выберите каталог"; 

	Если ДиалогОткрытия.Выбрать() Тогда
		Если Прав(ДиалогОткрытия.Каталог,1) <>"\" Тогда
			Объект.ЭДИ_КаталогВнешнейБазыДанных = ДиалогОткрытия.Каталог + "\";
		Иначе
			Объект.ЭДИ_КаталогВнешнейБазыДанных = ДиалогОткрытия.Каталог;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьДопСведенияНаСервере()
	НашОбъект=РеквизитФормыВЗначение("Объект");
	НашОбъект.ИнициализироватьСвойствоОбъекта("Edisoft_ЕдИзмерения",Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"),Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура);
	НашОбъект.ИнициализироватьСвойствоОбъекта("Edisoft_КодНоменклатуры",Новый ОписаниеТипов("Строка"),Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДопСведения(Команда)
	СоздатьДопСведенияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДопСведенияПриИзменении(Элемент)
	Если Объект.ИспользоватьДопСведения Тогда
		СоздатьДопСведенияНаСервере();
	КонецЕсли;
КонецПроцедуры


