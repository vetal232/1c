&НаКлиенте
Перем ЭДИ_ОбщиеИнструменты;
&НаКлиенте
Перем ЭДИ_РаботаСБазойДанных;
&НаКлиенте
Перем ПолучательБД_Подключен;
&НаКлиенте
Перем ПутьКМодулюНаСервереLinux;
&НаКлиенте
Перем ТипМодуляКриптографии;
&НаКлиенте
Перем МодульКриптографии;
//////////////////Клиентские процедуры. Выполняются на клиентской стороне.
&НаКлиенте
Процедура ЗаписатьВЛог(Лог)
	Сообщить(Лог);
	Если Объект.ЗаписатьЛогВФайл Тогда
		//Текст = Новый ТекстовыйДокумент;
		//Текст.УстановитьТекст(Лог);
		ВременнаяПапкаЛога = Объект.temp+"LOG\";//+Формат(ТекущаяДата(),"ДФ=гггг-ММ-дд")+"\"
		СоздатьКаталог(ВременнаяПапкаЛога);
		ИмяФайла = ВременнаяПапкаЛога + Формат(ТекущаяДата(),"ДФ=гггг-ММ-дд");
		//ЛогФайл = Новый Файл(ИмяФайла);
		//Если ЛогФайл.Существует() Тогда
		//КонецЕсли;
		ТекстЛогОбщий = Новый ЗаписьТекста;
		ТекстЛогОбщий.Открыть(ИмяФайла,КодировкаТекста.ANSI,Символы.ПС,Истина);
		ТекстЛогОбщий.ЗаписатьСтроку("-----------" + Формат(ТекущаяДата(),"ДЛФ=ДВ"),Символы.ПС);
		ТекстЛогОбщий.ЗаписатьСтроку(Лог);
		ТекстЛогОбщий.Закрыть();
		//Сообщить(Лог);
	КонецЕсли	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуЭкспортируемымиДокументами(Тип) Экспорт
	
	Если Тип = "INVOICE" Тогда
		ТипДокумента = "СчетФактураВыданный";
	ИначеЕсли Тип = "INVOICEКОР" Тогда
		ТипДокумента = "СчетФактураВыданный";
	//УПД
	ИначеЕсли Тип = "FNS_ARCHIVE" ИЛИ Тип = "FNS_ARCHIVE_KORR" ИЛИ Тип = "ON_SCHFDOPPR" ИЛИ Тип = "ON_KORSCHFDOPPR" Тогда		
		//УПД
		ТипДокумента = "СчетФактураВыданный";
		
	ИначеЕсли Тип = "ORDER" Тогда
		ТипДокумента = "ЗаказПоставщику";
	ИначеЕсли Тип = "TORG12_SELLER" Тогда
		ТипДокумента = "РеализацияТоваровУслуг";
		ЗагрузитьВходящие("TORG12_ARCHIVE", Объект.НачалоПериода, Объект.КонецПериода);
	ИначеЕсли Тип = "ORDRSP" Тогда
		ТипДокумента = ПолучитьТипЗаказа();				
	ИначеЕсли Тип = "RECADV" Тогда
		ТипДокумента = "ПоступлениеТоваровУслуг";		
	ИначеЕсли Тип = "DESADV" Тогда
		ТипДокумента = "РеализацияТоваровУслуг";		
	ИначеЕсли Тип = "ALCDES" Тогда
		ТипДокумента = "РеализацияТоваровУслуг";
	ИначеЕсли Тип = "ALLOUT" Тогда
		Возврат;
	КонецЕсли;	
	Объект.ПоследнийТипДействия = Тип;			
	Результат = ПолучитьЭкспортируемыеДокументы(Тип,ТипДокумента);
	 
КонецПроцедуры
&НаКлиенте
Процедура ПриЗакрытии()
	СохранитьНастройкиПриЗакрытии();
	ОсновнаяФорма = ПолучитьФорму("ВнешняяОбработка.EDISOFT.Форма.ОсновнаяФорма");
	ОсновнаяФорма.Открыть();
КонецПроцедуры
&НаКлиенте
Процедура ИсходящиеПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ЗаголовкиДокументов.Очистить();
	Объект.ПоследнийТипДействия = ТекущаяСтраница.Имя;
	//ЗаполнитьТаблицуЭкспортируемымиДокументами(ТекущаяСтраница.Имя);
КонецПроцедуры
&НаКлиенте
Функция ПолучитьЭкспортируемыеДокументы(Тип,ТипДокумента)
		
	ДатаНачала = Объект.НачалоПериода;
	ДатаОкончания = КонецДня(Объект.КонецПериода);
	ЗаголовкиДокументов.Очистить();
	СтруктураСписка = ПолучитьДокументы1с(Тип, ТипДокумента, ДатаНачала, ДатаОкончания, КонтрагентФильтр);
	КоличествоИтераций = СтруктураСписка.Количество();
	Если КоличествоИтераций = 0 Тогда
		ШагСостояния = 100;
	Иначе
		ШагСостояния = 100/КоличествоИтераций;
	КонецЕсли;
	ТекущееСОстояние = 0;
	Для сч = 0 По КоличествоИтераций - 1 ЦИкл
		ТекущееСОстояние = ТекущееСОстояние + ШагСостояния;
		НовСтр = ЗаголовкиДокументов.Добавить();
		НовСтр.document_type = Тип;
		
		Ключ = "Строка" + Строка(сч);
		СтрокаСписка = СтруктураСписка[Ключ];
		НовСтр.Контрагент = СтрокаСписка.Контрагент;
		НовСтр.document_date = СтрокаСписка.document_date;
		НовСтр.document_number = СтрокаСписка.document_number;
		НовСтр.Документ = СтрокаСписка.Документ;

		Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();
		Если Тип = "FNS_ARCHIVE" Тогда
			Отбор.Тип = "STATE_ON_SFAKT";
		ИначеЕсли Тип = "TORG12_SELLER" Тогда
			Отбор.Тип = "TORG12_SELLER";
		ИначеЕсли Тип = "ON_SCHFDOPPR" ИЛИ Тип = "ON_KORSCHFDOPPR" ИЛИ  Тип = "ON_SCHFDOPPR_ISP" Тогда
			Отбор.Тип = "STATE_" + Тип;
		Иначе
			Отбор.Тип = "DOC_"+Тип;
		КонецЕсли;
		Отбор.Объект = ЗначениеВСтрокуВнутрСервер(НовСтр.Документ);
		Отбор.Владелец = ЗначениеВСтрокуВнутрСервер(НовСтр.Контрагент);
		Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);
	
	
		Если Запрос.Результат=0 тогда				
			НовСтр.Статус = 0;//Запись в бд не найдена, док не выгружался
		Иначе
			Свойство = Запрос.Содержимое;		
			Попытка 
				НовСтр.Статус = Свойство.Состояние;
			Исключение
				НовСтр.Статус = 0;
			КонецПопытки;
			НовСтр.file_name = Свойство.ИндексированныйАтрибут3;			
		КонецЕсли;
					
		Если Тип = "FNS_ARCHIVE" Тогда	
			СтатусФНССтруктура = ПолучитьСтатусТекущегоДокумента(НовСтр.Документ);
			НовСтр.СтатусФНС = СтатусФНССтруктура.СтатусФНС;				
			НовСтр.Статус = СтатусФНССтруктура.СТатус;
		ИначеЕсли Тип = "ON_SCHFDOPPR" ИЛИ Тип = "ON_KORSCHFDOPPR" Тогда
			
			СтатусФНССтруктура = ПолучитьСтатусТекущегоДокумента(НовСтр.Документ,,Истина);
			НовСтр.СтатусФНС = СтатусФНССтруктура.СтатусФНС;				
			НовСтр.Статус = СтатусФНССтруктура.СТатус;
			
		ИначеЕсли Тип = "TORG12_SELLER" Тогда
			СтатусФНССтруктура = ПолучитьСтатусТекущегоДокумента(НовСтр.Документ, Истина);
			НовСтр.СтатусФНС = СтатусФНССтруктура.СтатусФНС;				
			НовСтр.Статус = СтатусФНССтруктура.СТатус;
		КонецЕсли;
		Состояние("Заполнение " + Строка(Сч+1), ТекущееСОстояние);
	КонецЦикла;
	//Сообщить("Количество исходящих: " + Строка(Сч));
	Возврат Истина;
КонецФункции
&НаКлиенте
Функция ЗаписатьСвойство(Тип, ОбъектСвойства = Неопределено, Владелец, Атр1="",Атр2="",Атр3="",Атр4="",Атр5="", Данные, ДопАтр="", ДатаСвойства, состояние = 0)	

	Если ЗначениеЗаполнено(ОбъектСвойства) Тогда
		СтрОбъект = ОбъектСвойства;
	Иначе
		СтрОбъект = "";
	КонецЕсли;
	Если ЗначениеЗаполнено(Владелец) Тогда 
		СтрВладелец = ЗначениеВСтрокуВнутрСервер(Владелец);
	Иначе
		СтрВладелец = "";
	КонецЕсли;	
	СтрДатаСвойства = ДатаСвойства;
	НоваяЗапись = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись(); 
	НоваяЗапись.Объект = СтрОбъект;
	НоваяЗапись.Владелец = СтрВладелец;
	НоваяЗапись.Тип = Тип;
	НоваяЗапись.Дата = ДатаСвойства;
	НоваяЗапись.Данные = Данные;
	НоваяЗапись.ДопАтрибуты = ДопАтр;
	НоваяЗапись.Состояние = состояние;
	НоваяЗапись.ИндексированныйАтрибут1 = Атр1;
	НоваяЗапись.ИндексированныйАтрибут2 = Атр2;
	НоваяЗапись.ИндексированныйАтрибут3 = Атр3;
	НоваяЗапись.ИндексированныйАтрибут4 = Атр4;
	НоваяЗапись.ИндексированныйАтрибут5 = Атр5;

	Результат = ЭДИ_РаботаСБазойДанных.ЗаписатьСвойство(НоваяЗапись);
	Возврат Результат.Результат;
	
КонецФункции
&НаКлиенте
Процедура ВыгрузитьПоSOAP(СтрокаТ, ПодтверждениеПолучено = Ложь)
	Отказ = Ложь;
	Лог = "";	
	Если Объект.УТАП Тогда
		КонтрагентGLN = ПолучитьGLNТочкиДоставки(СтрокаТ.Контрагент);
	Иначе		
		КонтрагентGLN = ПолучитьGLNКонтрагента(СтрокаТ.Контрагент);
	КонецЕсли;
	
	ИмяФайла = СтрокаТ.Document_type+"_"+Строка(СтрокаТ.Документ.УникальныйИдентификатор())+".xml";
	Попытка
		ВременнаяПапкаВыгрузки = Объект.temp +"OUT\";
		СоздатьКаталог(ВременнаяПапкаВыгрузки);
		Если (СтрокаТ.Document_type = "FNS_ARCHIVE") Тогда
			ПодписатьИОтправитьФНС(СтрокаТ,0);	
			Возврат;
		ИначеЕсли (СтрокаТ.Document_type = "TORG12_SELLER") Тогда
			ПодписатьИОтправитьФНС(СтрокаТ,4);	
			Возврат;
			
		ИначеЕсли (СтрокаТ.Document_type = "ON_SCHFDOPPR") Тогда
			
			ПодписатьИОтправитьФНС(СтрокаТ,6);	
			Возврат;
			
		ИначеЕсли (СтрокаТ.Document_type = "ON_KORSCHFDOPPR") Тогда
			
			ПодписатьИОтправитьФНС(СтрокаТ,7);	
			Возврат;
			
		ИначеЕсли (СтрокаТ.Document_type = "ORDER") Тогда
			ТекстXML = ВыгрузитьORDER(СтрокаТ.Документ);
			Атр1 = "";//СокрЛП(СтрокаТ.Документ.Номер);
			Атр2 = "";
			Атр3 = ИмяФайла;
			Атр4 = "";
			Атр5 = "";

		ИначеЕсли (СтрокаТ.Document_type = "DESADV") Тогда
			ТекстXML = ВыгрузитьDESADV(СтрокаТ.Документ);
			
			НомерИДатаЗаказа = ПолучитьНомерИДатуДокумента(СтрокаТ.Документ, "ORDER", "DESADV");
			Если Не НомерИДатаЗаказа=Неопределено Тогда
				BuyerOrderNumber = НомерИДатаЗаказа.Номер;//1234567890
				BuyerOrderDate = НомерИДатаЗаказа.Дата;//2001-05-31
			Иначе
				BuyerOrderNumber = "";
				BuyerOrderDate = "";
			КонецЕсли;
			КонтрагентGLN = НомерИДатаЗаказа.ОтправительГЛН;
			Атр1 = СокрЛП(BuyerOrderNumber);
			Атр2 = СтрЗаменить(BuyerOrderDate,"_","");
			Атр3 = "";
			Атр4 = "";
			Атр5 = "";						
			//НомерИДатаЗаказа = ПолучитьНомерИДатуДокумента(СтрокаТ.Документ, "ORDER", "DESADV");
			//			
			//Если Объект.ИспользоватьSSCC Тогда
			//	Если ПодтверждениеПолучено Тогда
			//		ТекстXML = ВыгрузитьDESADV(СтрокаТ.Документ);
			//	Иначе
			//		//ПодтверждениеВыгрузки = ОткрытьОкноSSCCКлиент(СтрокаТ.Документ, НомерИДатаЗаказа.ДопАтрибуты);			
			//	    ПодтверждениеВыгрузки = ОткрытьОкноSSCCКлиент(СтрокаТ.Документ);
			//		Если ПодтверждениеВыгрузки Тогда
			//			ТекстXML = ВыгрузитьDESADV(СтрокаТ.Документ);
			//		Иначе
			//		
			//		КонецЕсли;
			//	КонецЕсли;
			//Иначе
			//	ТекстXML = ВыгрузитьDESADV(СтрокаТ.Документ);
			//КонецЕсли;
			//			
			//КонтрагентGLN = НомерИДатаЗаказа.ОтправительГЛН; 
			//Если Не НомерИДатаЗаказа=Неопределено Тогда
			//	BuyerOrderNumber = НомерИДатаЗаказа.Номер;//1234567890
			//	BuyerOrderDate = НомерИДатаЗаказа.Дата;//2001-05-31
			//Иначе
			//	BuyerOrderNumber = "";
			//	BuyerOrderDate = "";
			//КонецЕсли;
			//
			//Атр1 = СокрЛП(BuyerOrderNumber);
			//Атр2 = СтрЗаменить(BuyerOrderDate,"_","");
			//Атр3 = "";
			//Атр4 = "";
			//Атр5 = "";
		ИначеЕсли (СтрокаТ.Document_type = "ALCDES") Тогда
			ТекстXML = ВыгрузитьDESADV(СтрокаТ.Документ, Истина);
			
			НомерИДатаЗаказа = ПолучитьНомерИДатуДокумента(СтрокаТ.Документ, "ORDER", "DESADV");
			Если Не НомерИДатаЗаказа=Неопределено Тогда
				BuyerOrderNumber = НомерИДатаЗаказа.Номер;//1234567890
				BuyerOrderDate = НомерИДатаЗаказа.Дата;//2001-05-31
			Иначе
				BuyerOrderNumber = "";
				BuyerOrderDate = "";
			КонецЕсли;
			
			Атр1 = СокрЛП(BuyerOrderNumber);
			Атр2 = СтрЗаменить(BuyerOrderDate,"_","");
			Атр3 = "";
			Атр4 = "";
			Атр5 = "";

		ИначеЕсли (СтрокаТ.Document_type = "ORDRSP") Тогда
			ТекстXML = ВыгрузитьORDRSP(СтрокаТ.Документ);
			
			НомерИДатаЗаказа = ПолучитьНомерИДатуДокумента(СтрокаТ.Документ, "ORDER");
			Если ЗначениеЗаполнено(НомерИДатаЗаказа) Тогда
				КонтрагентGLN = НомерИДатаЗаказа.ОтправительГЛН;
			КонецЕсли;
			Если Не НомерИДатаЗаказа=Неопределено Тогда
				BuyerOrderNumber = НомерИДатаЗаказа.Номер;//1234567890
				BuyerOrderDate = НомерИДатаЗаказа.Дата;//2001-05-31
			Иначе
				BuyerOrderNumber = "";
				BuyerOrderDate = "";
			КонецЕсли;
			
			Атр1 = СокрЛП(BuyerOrderNumber);
			Атр2 = СтрЗаменить(BuyerOrderDate,"-","");
			Атр3 = "";
			Атр4 = "";
			Атр5 = "";

		ИначеЕсли (СтрокаТ.Document_type = "INVOICE") Тогда
			ТекстXML = ВыгрузитьINVOICE(СтрокаТ.Документ);
			Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
				Возврат;
			КонецЕсли;
			
			СвязныеДокументыСФ = ПолучитьСвязанныеДокументыСФ(СтрокаТ.Документ,,,Лог,Отказ);
			Если Отказ=Истина Тогда
				ЗаписатьВЛог(Лог);
				Возврат ;
			Иначе
			КонецЕсли;
			НомерИДатаЗаказа = ПолучитьНомерИДатуДокумента(СвязныеДокументыСФ.ИсходныйЗаказ, "ORDER");
			//КонтрагентGLN = НомерИДатаЗаказа.ОтправительГЛН;
			Если Не НомерИДатаЗаказа=Неопределено Тогда
				BuyerOrderNumber = НомерИДатаЗаказа.Номер;//1234567890
				BuyerOrderDate = НомерИДатаЗаказа.Дата;//2001-05-31
				КонтрагентGLN = НомерИДатаЗаказа.ОтправительГЛН;
			Иначе
				BuyerOrderNumber = "";
				BuyerOrderDate = "";
				КонтрагентGLN = "";
			КонецЕсли;
			
			Атр1 = СокрЛП(BuyerOrderNumber);
			Атр2 = СтрЗаменить(BuyerOrderDate,"-","");
			Атр3 = "";
			Атр4 = "";
			Атр5 = "";
		ИначеЕсли (СтрокаТ.Document_type = "RECADV") Тогда
			ТекстXML = ВыгрузитьRECADV(СтрокаТ.Документ);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстXML) Тогда
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.ОткрытьФайл(ВременнаяПапкаВыгрузки+ИмяФайла,"UTF-8");
			ЗаписьXML.ЗаписатьБезОбработки(ТекстXML);
			ЗаписьXML.Закрыть();
		Иначе
			Сообщить("Не удалось выгрузить документ: "+СтрокаТ.Документ+" (пустая выгрузка)",СтатусСообщения.ОченьВажное);
			Возврат;
		КонецЕсли;
	Исключение
		Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),СтатусСообщения.ОченьВажное);
		Сообщить("Не удалось выгрузить документ: "+СтрокаТ.Документ+" (ошибка при выгрузке)",СтатусСообщения.ОченьВажное);
		Возврат;
	КонецПопытки;
	//Удалить**********************************
	Если Объект.РежимОтладки Тогда
		Возврат;
	КонецЕсли;
	//Удалить**********************************
	
	Данные = Base64Строка(Новый ДвоичныеДанные(ВременнаяПапкаВыгрузки+ИмяФайла));
	Если Данные = "" Тогда	
		Сообщить("Ошибка: пустая выгрузка из "+СтрокаТ.Документ);
		Возврат;	
	КонецЕсли;
	ТипОтп = "UNDEFINED";//СтрокаТ.Document_type
	Ответ = SendBinary(КонтрагентGLN,ТипОтп,ИмяФайла,Данные);
	
	Попытка
		ОтветноеЧисло = Число(Ответ);
		Ответ = "";
	Исключение
	КонецПопытки; 
	
	Если ЗначениеЗаполнено(Ответ) Тогда	
		Сообщить("Ответ Service SOAP: "+Ответ);	
	Иначе
		ЗаписатьСвойство("DOC_"+СтрокаТ.Document_type, ЗначениеВСтрокуВнутрСервер(СтрокаТ.Документ),СтрокаТ.Контрагент,Атр1,Атр2,Атр3,Атр4,Атр5,Данные,,Число(ПреобразоватьДатуВСтроку(СтрокаТ.document_date)),1);
		Сообщить("Выгружен документ: "+СтрокаТ.Документ);
		УдалитьФайлы(Объект.temp,ИмяФайла);		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПодписатьИОтправитьФНС(СтрокаТ, ТипФНС = 0)
	Лог = "";
	Отказ = Ложь;
	ВременнаяПапкаВыгрузки = Объект.temp+"OUT\";//+Формат(ТекущаяДата(),"ДФ=гггг-ММ-дд")+"\"
	СоздатьКаталог(ВременнаяПапкаВыгрузки);
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел();
    Документ = СтрокаТ.Документ;//.Ссылка
		
	УИДДокумента = Прав("000"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(0,65535),16))),4)
	+Прав("000"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(0,65535),16))),4)
	+"-"+Прав("000"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(0,65535),16))),4)
	+"-"+Прав("000"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(0,65535),16))),4)
	+"-"+Прав("000"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(0,65535),16))),4)
	+"-"+Прав("000"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(0,65535),16))),4)
	+Прав("000"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(0,65535),16))),4)
	+Прав("000"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(0,65535),16))),4);
		
	Если ТипФНС = 4 Тогда
		СвязныеДокументы = ПолучитьСвязанныеДокументыСФ(СтрокаТ.Документ, Истина,,Лог,Отказ);
		Если Отказ=Истина Тогда
			ЗаписатьВЛог(Лог);
			Возврат;
		Иначе
		КонецЕсли;
		ИсходныйЗаказ = СвязныеДокументы.ИсходныйЗаказ;
		ИсходнаяРеализация = СтрокаТ.Документ;
		НомерИДатаЗаказа = ПолучитьНомерИДатуДокумента(ИсходныйЗаказ,"ORDER");
		СписокНоменклатурДокумента = ПолучитьСписокНоменклатурДокумента(СтрокаТ.Документ, Истина,,Истина);
		СписокНоменклатурДокумента = ПолучитьКодыНоменклатур(СписокНоменклатурДокумента);
		ТочкаДоставки = ПолучитьКОнтрагента(СтрокаТ.Документ);
		
	ИначеЕсли ТипФНС = 7 Тогда
		
		СвязныеДокументы = ПолучитьСвязанныеДокументыСФ(СтрокаТ.Документ,,Истина,Лог,Отказ);
		Если Отказ=Истина Тогда
			ЗаписатьВЛог(Лог);
			Возврат;
		Иначе
		КонецЕсли;
		ИсходнаяРеализация = СвязныеДокументы.ИсходнаяРеализация;
		НомерИДатаЗаказа = ПолучитьНомерИДатуДокумента(СвязныеДокументы.ИсходныйЗаказ,"ORDER");
		НомерИДатаРекадв = ПолучитьНомерИДатуДокумента(ИсходнаяРеализация, "RECADV");
		СписокНоменклатурДокумента = ПолучитьСписокНоменклатурДокумента(СвязныеДокументы.СкорректированнаяРеализация,,,,Истина);
		СписокНоменклатурДокумента = ПолучитьКодыНоменклатур(СписокНоменклатурДокумента);
		
	Иначе
		СвязныеДокументы = ПолучитьСвязанныеДокументыСФ(СтрокаТ.Документ,,,Лог,Отказ);
		Если Отказ=Истина Тогда
			ЗаписатьВЛог(Лог);
			Возврат;
		Иначе
		КонецЕсли;
		ИсходнаяРеализация = СвязныеДокументы.ИсходнаяРеализация;
		НомерИДатаЗаказа = ПолучитьНомерИДатуДокумента(СвязныеДокументы.ИсходныйЗаказ,"ORDER");
		НомерИДатаРекадв = ПолучитьНомерИДатуДокумента(ИсходнаяРеализация, "RECADV");
		СписокНоменклатурДокумента = ПолучитьСписокНоменклатурДокумента(ИсходнаяРеализация);
		СписокНоменклатурДокумента = ПолучитьКодыНоменклатур(СписокНоменклатурДокумента);
		ТочкаДоставки = ПолучитьКОнтрагента(ИсходнаяРеализация);
	КонецЕсли;
	Контрагент = ПолучитьКОнтрагента(СтрокаТ.Документ); 
	Организация = ПолучитьОрганизацию(СтрокаТ.Документ);
	Партнер = ПолучитьПартнера(ИсходнаяРеализация);
	
	
	idReceiver = ПолучитьFNSidКонтрагента(Партнер);
	Receiver = ПолучитьGLNКонтрагента(Партнер);//ПолучитьGLNКонтрагента(СтрокаТ.Документ);
	Покуп_КодРегион = ПолучитьКодРегионаКонтрагента(Партнер);
	DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(ТочкаДоставки);//ПолучитьGLNТочкиДоставки(ПолучитьПартнера(ИсходнаяРеализация));
	Грузополучатель_КодРегион = ПолучитьКодРегионаКонтрагента(ТочкаДоставки);
	
	idSender = ПолучитьFNSidОрганизации(Организация);
	SenderILN = ПолучитьGLNОрганизации(Организация);
	Прод_КодРегион = ПолучитьКодРегионаКонтрагента(Организация);
	
	Дата = Формат(ТекущаяДата(),"ДФ=ггггММдд");			
	

	СТруктураДанныхДляВыгрузки = Новый Структура;
	СТруктураДанныхДляВыгрузки.Вставить("Buyer_ILN",Receiver);
	СТруктураДанныхДляВыгрузки.Вставить("Seller_ILN",SenderILN);
	СТруктураДанныхДляВыгрузки.Вставить("Грузополучатель_КодРегион",Грузополучатель_КодРегион);
	СТруктураДанныхДляВыгрузки.Вставить("DeliveryPoint_ILN",DeliveryPoint_ILN);
	СТруктураДанныхДляВыгрузки.Вставить("ИдОтпр",idSender);
	СТруктураДанныхДляВыгрузки.Вставить("ИдПок",idReceiver);
	СТруктураДанныхДляВыгрузки.Вставить("Прод_КодРегион",Прод_КодРегион);
	СТруктураДанныхДляВыгрузки.Вставить("Покуп_КодРегион",Покуп_КодРегион);
	СТруктураДанныхДляВыгрузки.Вставить("СписокНоменклатур",СписокНоменклатурДокумента);
	СТруктураДанныхДляВыгрузки.Вставить("НомерИДатаЗаказа",НомерИДатаЗаказа);
	СТруктураДанныхДляВыгрузки.Вставить("НомерИДатаРекадв",НомерИДатаРекадв);
	Попытка
		Если ТипФНС = 0 Тогда
			НомерСтатуса = "0";
			Реляция = "FNS_ARCHIVE";
			ФНС = "ON_SFAKT_"+idReceiver+"_"+idSender+"_"+Дата+"_"+УИДДокумента+".xml";
			Если Объект.Версия_5_01 Тогда				
				ТекстXML = ВыгрузитьFNS_ARCHIVE(Документ,УИДДокумента, СТруктураДанныхДляВыгрузки);
			Иначе
				ТекстXML = ВыгрузитьFNS_ARCHIVE_5_02(Документ,УИДДокумента, СТруктураДанныхДляВыгрузки);
			КонецЕсли;
		ИначеЕсли ТипФНС = 1 Тогда
			НомерСтатуса = "0";
			Реляция = "FNS_ARCHIVE";
			ФНС = "ON_KORSFAKT_"+idReceiver+"_"+idSender+"_"+Дата+"_"+УИДДокумента+".xml";
		ИначеЕсли ТипФНС = 2 Тогда
			НомерСтатуса = "1";
			Реляция = "AKTPRM_ARCHIVE";
			ФНС = "DP_ZAKTPRM_"+idReceiver+"_"+idSender+"_"+Дата+"_"+УИДДокумента+".xml";
		ИначеЕсли ТипФНС = 4 Тогда
			НомерСтатуса = "2";
			Реляция = "TORG12_ARCHIVE";
			ФНС = "DP_OTORG12_"+idReceiver+"_"+idSender+"_"+Дата+"_"+УИДДокумента+".xml";
			ТекстXML = ВыгрузитьTORG12_SELLER(Документ,УИДДокумента, СТруктураДанныхДляВыгрузки);
		ИначеЕсли ТипФНС = 5 Тогда
			НомерСтатуса = "3";
			Реляция = "TORG12_ARCHIVE";
			ФНС = "DP_PTORG12_"+idReceiver+"_"+idSender+"_"+Дата+"_"+УИДДокумента+".xml";
			
		ИначеЕсли (ТипФНС = 6) Тогда
			
			ВыгружатьБезПодписи = Ложь;
			НомерСтатуса = "0";
			Реляция = "FNS_STATUS_ARCHIVE";
			//Реляция = "UTD_ARCHIVE";
			//УИДДокумента = НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(4096,65535),16)))+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(4096,65535),16)))+"-"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(4096,65535),16)))+"-"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(4096,65535),16)))+"-"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(4096,65535),16)))+"-"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(4096,65535),16)))+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(4096,65535),16)))+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(4096,65535),16)));
			ФНС = "ON_SCHFDOPPR_"+idReceiver+"_"+idSender+"_"+Дата+"_"+УИДДокумента+".xml";
			ТекстXML = ВыгрузитьON_SCHFDOPPR(Документ,УИДДокумента, ,СТруктураДанныхДляВыгрузки,,Лог,Отказ);
				
		ИначеЕсли ТипФНС = 7 Тогда
			
			ВыгружатьБезПодписи = Ложь;
			НомерСтатуса = "0";
			Реляция = "FNS_STATUS_ARCHIVE";
			//Реляция = "UTD_ARCHIVE";
			//УИДДокумента = НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(4096,65535),16)))+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(4096,65535),16)))+"-"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(4096,65535),16)))+"-"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(4096,65535),16)))+"-"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(4096,65535),16)))+"-"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(4096,65535),16)))+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(4096,65535),16)))+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(4096,65535),16)));
			ФНС = "ON_KORSCHFDOPPR_"+idReceiver+"_"+idSender+"_"+Дата+"_"+УИДДокумента+".xml";
			ТекстXML = ВыгрузитьКорректировочныйON_SCHFDOPPR(Документ, УИДДокумента, СТруктураДанныхДляВыгрузки);
			
		КонецЕсли;
	Исключение
		Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),СтатусСообщения.ОченьВажное);
		ТекстXML = "";
	КонецПопытки;
	
	Если Отказ=Истина Тогда
		ЗаписатьВЛог(Лог);
		Сообщить("Не удалось выгрузить ФНС документ "+Документ);
		Возврат ;
	Иначе
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстXML) Тогда
		
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.ОткрытьФайл(ВременнаяПапкаВыгрузки+ФНС,"windows-1251");
		ЗаписьXML.ЗаписатьБезОбработки(ТекстXML);
		ЗаписьXML.Закрыть();
		
	Иначе
		
		Сообщить("Не удалось выгрузить ФНС документ "+Документ);
		Возврат;
		
	КонецЕсли;	
	
	Если Объект.РежимОтладки Тогда
		Сообщить("Документ " + Документ + " выгружен в тестовом режиме в: " + ВременнаяПапкаВыгрузки+ФНС);
		Возврат;
	КонецЕсли;
	
	Если ТипФНС = 6 ИЛИ ТипФНС = 7 ИЛИ ТипФНС = 8 Тогда
				
		ФНСПодпись = Лев(ФНС,СтрДлина(ФНС)-3)+"bin";//Подписант_ОбластьПолномочий+"_"+
		ПодписатьФайл(ВременнаяПапкаВыгрузки+ФНС,ВременнаяПапкаВыгрузки+ФНСПодпись, "bin");
		
		ИмяАрхива = Лев(ФНС,СтрДлина(ФНС)-3)+"zip";
		ФайлАрхива = Новый ЗаписьZipФайла(ВременнаяПапкаВыгрузки+ИмяАрхива, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
		ФайлАрхива.Добавить(ВременнаяПапкаВыгрузки+ФНС);
		ФайлАрхива.Добавить(ВременнаяПапкаВыгрузки+ФНСПодпись);
		//ФайлАрхива.Добавить(ВременнаяПапкаВыгрузки+ФНСПодпись2);
		ФайлАрхива.Записать();
		Данные = Base64Строка(Новый ДвоичныеДанные(ВременнаяПапкаВыгрузки+ИмяАрхива));
		
		ИмяАрхива = Лев(ФНС,СтрДлина(ИмяАрхива)-3) + "zip";
		
	Иначе
	
		Если Объект.РежимОтладки Тогда
			
			Сообщить("Документ " + Документ + " выгружен в тестовом режиме в: " + ВременнаяПапкаВыгрузки+ФНС);
			Возврат;
			
		КонецЕсли;
		
		Данные = ПодписатьВP7SИЗапаковать(ФНС, ВременнаяПапкаВыгрузки);
		ИмяАрхива = Лев(ФНС,СтрДлина(ФНС)-3) + "zip";	
		
	КонецЕсли;
	
	Если Объект.РежимОтладки Тогда
		
		Сообщить("Файл выгружен в " + ИмяАрхива + " в тестовом режиме");
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		Если ТипФнс = 6 Тогда
			ТипЗаписи = "STATE_ON_SCHFDOPPR";
		ИначеЕсли ТипФНС = 7 Тогда
			ТипЗаписи = "STATE_ON_KORSCHFDOPPR";
		ИначеЕсли ТипФНС = 8 Тогда
			ТипЗаписи = "STATE_ON_SCHFDOPPR_ISP";
		Иначе
			ТипЗаписи = "STATE_ON_SFAKT";
		КонецЕсли;
		
		ОтправитьФайлНаСервер(SenderILN,Реляция,ИмяАрхива,Данные,СтрокаТ.Документ,Дата,ТипЗаписи,"","","");
	Исключение
		
		Сообщить(ОписаниеОшибки(),СтатусСообщения.Важное);
		Возврат;
		
	КонецПопытки;
	
	Если (ТипФНС > 1) Тогда
		СтрокаТ.Статус = 1;
		СтрокаТ.СтатусФНС = "Подписано";
	Иначе
		СтруктураСтатусФНС = ПолучитьСтатусТекущегоДокумента(СтрокаТ.Документ);
		СтрокаТ.СтатусФНС = СтруктураСтатусФНС.СтатусФНС;
		СтрокаТ.Статус = СтруктураСтатусФНС.Статус;		
	КонецЕсли; 
	ЗагрузитьВходящие("FNS_ARCHIVE", Объект.НачалоПериода, Объект.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайл(ПутьКФайлу, ПутьКПодписи = Неопределено, ТипПодписи = "p7s") Экспорт
	
	МодульКриптографии = "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider";
	
	Если ПутьКПодписи = Неопределено Тогда
		ПутьКПодписи = Лев(ПутьКФайлу,СтрДлина(ПутьКФайлу)-3)+ТипПодписи;
	КонецЕсли; 
	
	МенеджерКриптоПРО = Новый МенеджерКриптографии(МодульКриптографии,ПутьКМодулюНаСервереLinux,ТипМодуляКриптографии);	
	МенеджерКриптоПРО.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	МенеджерКриптоПРО.ПарольДоступаКЗакрытомуКлючу =Объект.ПарольККлючуСертификата;	
	ДвоичныеДанныеПодписи = МенеджерКриптоПРО.Подписать(ПутьКФайлу,МенеджерКриптоПРО.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты).НайтиПоОтпечатку(Объект.ОтпечатокСеритфиката));   
	
	Если ТипПодписи = "p7s" Тогда
		ДвоичныеДанныеПодписи.Записать(ПутьКПодписи);
	ИначеЕсли ТипПодписи = "bin" Тогда
		
		СтрокаПодписи = Base64Строка(ДвоичныеДанныеПодписи);
		СтрокаПодписи = СтрЗаменить(СтрокаПодписи, Символы.ПС, "");
		СтрокаПодписи = СтрЗаменить(СтрокаПодписи, Символы.ВК, "");
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ВставитьСтроку(1, СтрокаПодписи);
		ТекстовыйДокумент.УстановитьТипФайла("windows-1251");
		ТекстовыйДокумент.Записать(ПутьКПодписи, "windows-1251", Символы.ПС);
		
	Иначе
		ВызватьИсключение("Неправильно задан тип подписи.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВходящие(Тип, ДатаНачала, ДатаОкончания)
	ПолучитьЗаголовкиДокументов(Тип, ДатаНачала, ДатаОкончания);
	СкачатьВходящие(Объект.temp);
КонецПроцедуры
&НаКлиенте
Функция ПолучитьОбъектИВладельцаСвойства(ДанныеТипИВерсия)
	СтруктураВозврата = Новый СТруктура;
	СтруктураВозврата.Вставить("Объект",);
	СтруктураВозврата.Вставить("Владелец",);
	
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();
	Отбор.Тип = "TORG12_SELLER";
	Отбор.ИндексированныйАтрибут3 = СокрЛП(ДанныеТипИВерсия.ПервичныйИдФАйл);
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);
	Если Запрос.Результат=0 тогда
		СтруктураВозврата.Объект = "";
		СтруктураВозврата.Владелец = "";
	Иначе
		Свойство = Запрос.Содержимое;
		СтруктураВозврата.Объект = Свойство.Объект;
		СтруктураВозврата.Владелец = Свойство.Владелец;
	КонецЕсли;
	Возврат СтруктураВозврата;
КонецФункции
&НаКлиенте
Процедура СкачатьВходящие(temp)
			
	Для каждого СтрокаТаблицы Из ТаблицаЗаголовковДокументов Цикл
		
		ДатаВходящего = ПреобразоватьСтрокуВДату(СтрокаТаблицы.document_date);	
							 	
		Данные = ReceiveBinary(СтрокаТаблицы.partner_iln,СтрокаТаблицы.Document_type,СтрокаТаблицы.tracking_id);
		Если СтрокаТаблицы.Document_type = "UPD_STATUS" Тогда
			Если Найти(СтрокаТаблицы.file_name, "DP_PDPOL") > 0 тогда
				ТипСхемы = "UPD_PDPOL_PKG";
			ИначеЕсли Найти(СтрокаТаблицы.file_name, "DP_IZVPOL") > 0 Тогда
				ТипСхемы = "UPD_IZVPOL_PKG";
			ИначеЕсли Найти(СтрокаТаблицы.file_name, "DP_UVUTOCH") > 0 Тогда
				ТипСхемы = "UPD_UVUTOCH_PKG";
			КонецЕсли;
		Иначе
			ТипСхемы = СтрокаТаблицы.Document_type;
		КонецЕсли;
		ТипДокумента = ТипСхемы;
		Расширение = "xml";
		
		Если ТипСхемы = "FNS_ARCHIVE" ИЛИ ТипСхемы = "TORG12_ARCHIVE"   ИЛИ ТипСхемы = "UPD_PDPOL_PKG"  ИЛИ ТипСхемы = "UPD_UVUTOCH_PKG"  ИЛИ ТипСхемы = "UPD_IZVPOL_PKG"  ИЛИ ТипСхемы = "UPD_SCHFDOPPOK_PKG" ИЛИ ТипСхемы = "FNS_STATUS_ARCHIVE" Тогда			
			
			Расширение = "zip";
			ДанныеТипИВерсия = ВернутьТипДокумета(Объект.temp, Данные, Расширение,);
			Если СтрокаТаблицы.Document_type = "UPD_STATUS" Тогда
			Иначе
				ТипСхемы = ДанныеТипИВерсия.ТипДокумента;
			КонецЕсли;
			ТипДокумента = ДанныеТипИВерсия.ТипДокумента;
			Версия = ДанныеТипИВерсия.Версия;					
						
		КонецЕсли;
		
		Дата = СтрЗаменить(СтрокаТаблицы.document_date,"-","");
		
		Если ТипСхемы = "DP_PTORG12" Тогда
			
			ОбъектИВладелец = ПолучитьОбъектИВладельцаСвойства(ДанныеТипИВерсия);
			
			Если ЗначениеЗаполнено(ОбъектИВладелец.Объект) Тогда
				
				Результат = ЗаписатьСвойство("TORG12_DP_PTORG12",ОбъектИВладелец.Объект,ОбъектИВладелец.Владелец,,,ДанныеТипИВерсия.ИдФАйл,,,Данные,,Дата,1);
				
				Если Результат = 0 Тогда 
					Сообщить("Загружен статус документа " + ЗначениеИзСтрокиВнутрСервер(Объект));				
				КонецЕсли;
				Продолжить;
				
			Иначе
				
				Сообщить("Не найден исходный документ");
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			
			Если ТипДокумента = "DP_PDPOL" ИЛИ ТипДокумента = "DP_IZVPOL"  ИЛИ ТипДокумента = "ON_SCHFDOPPOK" Тогда
			Иначе
				Структура = ПолучитьСтруктуруФайлаВСтроку(Данные, temp,ТипСхемы ,Расширение,Версия);
			КонецЕсли;
			
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если Найти(СтрокаТаблицы.Document_type,"UPD")>0 Тогда
			Если СтрокаТаблицы.Document_type = "UPD_STATUS" Тогда
				
				//Если Найти(СтрокаТаблицы.file_name, "DP_PDPOL") > 0 тогда
					ТипЗаписи = "STATE_" + ТипСхемы;
				//КонецЕсли;
			Иначе
				ТипЗаписи = "STATE_" + СтрокаТаблицы.Document_type;//УПД
			КонецЕсли;
			
		Иначе
			
			Если ТипДокумента = "DP_PDPOL" Тогда			
				ТипЗаписи = "STATE_DP_PDPOL";
			ИначеЕсли ТипДокумента = "DP_PDOTPR" Тогда
				ТипЗаписи = "STATE_DP_PDOTPR";
			ИначеЕсли ТипДокумента = "DP_IZVPOL" Тогда 
				ТипЗаписи = "STATE_DP_IZVPOL";
			ИначеЕсли ТипДокумента = "ON_SCHFDOPPOK" Тогда 
				ТипЗаписи = "STATE_UPD_SCHFDOPPOK_PKG";
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			
			Попытка
				ОбъектИДанныеСвойства = ПолучитьОбъектСвойства(ТипЗаписи,СтрокаТаблицы.Document_type, Структура.СтруктураСтрока, СТруктура.НомерЗаказа);						
			Исключение
				
				ОбъектИДанныеСвойства = ПолучитьОбъектСвойства(ТипЗаписи,СтрокаТаблицы.Document_type,ДанныеТипИВерсия);						
				Контрагент = ЗначениеИзСтрокиВнутрСервер(ОбъектИДанныеСвойства.Владелец);
				
			КонецПопытки;
			
			Если (ТипЗаписи = "STATE_DP_PDPOL" ИЛИ ТипЗаписи = "STATE_DP_IZVPOL" ИЛИ ТипЗаписи = "STATE_UPD_SCHFDOPPOK_PKG" ИЛИ (Найти(СтрокаТаблицы.Document_type,"UPD")>0)) И (Не ЗначениеЗаполнено(ОбъектИДанныеСвойства)) Тогда
				Продолжить;
			КонецЕсли;			
			
		Исключение	
			Продолжить
		КонецПопытки;
			
		Попытка
			ОбъектСвойства = ОбъектИДанныеСвойства.Объект;
		Исключение
			ОбъектСвойства = Структура.Объект;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(Данные) Тогда			
			
			Если ТипЗаписи = "STATE_UPD_PDPOL_PKG" Тогда
				
				Если ОбъектИДанныеСвойства.ТипПостФайла = "STATE_ON_SCHFDOPPR" Тогда
					ТипЗаписи = "STATE_UPD_PDPOL_PKG";
				КонецЕсли;
				
				ЗаписатьСвойство(ТипЗаписи,ОбъектСвойства,Контрагент,,,ДанныеТипИВерсия.ИдФайл,,,Данные,"",Дата, 2); 									
				РезультатЗагрузки = Новый Структура;
				РезультатЗагрузки.Вставить("Документ", ЗначениеИзСтрокиВнутрСервер(ОбъектСвойства));
				ДанныеПодписи = ДанныеТипИВерсия.ДанныеПОдписи;
				ИмяПостФайла = ДанныеТипИВерсия.ИдФайл;
				
				Если ЗначениеЗаполнено(РезультатЗагрузки) ТОгда
										
					РезультатЗагрузки.Вставить("idSender", ПолучитьFNSidОрганизации(ПолучитьОрганизацию(РезультатЗагрузки.Документ)));
					РезультатЗагрузки.Вставить("idReceiver", "2IJ");
					РезультатЗагрузки.Вставить("Receiver", ПолучитьGLNОрганизации(ПолучитьОрганизацию(РезультатЗагрузки.Документ)));
					РезультатЗагрузки.Вставить("ИмяПостФайла",ИмяПостФайла);
					РезультатЗагрузки.Вставить("ДатаДокумента", ТекущаяДата());
					
				КонецЕсли;
				
				СтруктураСтатуса = СформироватьИзвещениеОПолучении(РезультатЗагрузки, ДанныеПодписи,4, Ложь);
				
				Если СтруктураСтатуса.БезОшибки Тогда
					
					ХранилищеВременныхФайлов = Объект.Temp+"OUT\";
					СоздатьКаталог(ХранилищеВременныхФайлов);
					
					ЗаписьXML = Новый ЗаписьXML;
					ЗаписьXML.ОткрытьФайл(ХранилищеВременныхФайлов+СтруктураСтатуса.ИмяФайлаИзв,"windows-1251");	
					ЗаписьXML.ЗаписатьБезОбработки(СтруктураСтатуса.ДанныеXML);
					ЗаписьXML.Закрыть();

				Иначе
					
					Сообщить("Ошибка при создании ответного статуса: " + СтруктураСтатуса.ТекстОшибки);
					Продолжить;
					
				КонецЕсли;
								
				Base64Archive = ПодписатьВBinИЗапаковать(СтруктураСтатуса.ИмяФайлаИзв, ХранилищеВременныхФайлов);	
				
				Если ЗначениеЗаполнено(Base64Archive) Тогда
					
					Если ТипЗаписи = "STATE_UPD_PDPOL_PKG" Тогда
						ТипЗаписиОтвета = "STATE_UPD_IZVPOL_PKG";
					КонецЕсли;
					
					ВыгрузитьСтатусПоSOAP(ПолучитьGLNОрганизации(ПолучитьОрганизацию(РезультатЗагрузки.Документ)), "UPD_STATUS",СтруктураСтатуса.ИмяФайлаИзв, Base64Archive, РезультатЗагрузки.Документ, РезультатЗагрузки.ДатаДокумента, ТипЗаписиОтвета, "", "", "уведомление о получении статуса об отправке")		
					
				Иначе
					Сообщить("Не удалось подписать файл " + СтруктураСтатуса.ИмяФайлаИзв);		
				КонецЕсли;
				
				Если Не Объект.РежимОтладки Тогда
					ChangeDocumentStatus(СтрокаТаблицы.tracking_id);
				КонецЕсли;
				
				
			ИначеЕсли ТипЗаписи = "STATE_UPD_IZVPOL_PKG" Тогда
				
				Если ОбъектИДанныеСвойства.ТипПостФайла = "STATE_ON_SCHFDOPPR" Тогда
					ТипЗаписи = "STATE_06_UPD_IZVPOL_PKG";
				КонецЕсли;
				
				ЗаписатьСвойство(ТипЗаписи,ОбъектСвойства,Контрагент,,,ДанныеТипИВерсия.ИдФайл,,,Данные,"",Дата, 2); 									
				
				
				Если Не Объект.РежимОтладки Тогда
					ChangeDocumentStatus(СтрокаТаблицы.tracking_id);
				КонецЕсли;
				
			ИначеЕсли ТипЗаписи = "STATE_UPD_SCHFDOPPOK_PKG" Тогда
				
				Если ОбъектИДанныеСвойства.ТипПостФайла = "STATE_ON_SCHFDOPPR" Тогда
					ТипЗаписи = "STATE_UPD_SCHFDOPPOK_PKG";
				КонецЕсли;
				
				ЗаписатьСвойство(ТипЗаписи,ОбъектСвойства,Контрагент,,,ДанныеТипИВерсия.ИдФайл,,,Данные,"",Дата, 2); 									
				
				
				Если Не Объект.РежимОтладки Тогда
					ChangeDocumentStatus(СтрокаТаблицы.tracking_id);
				КонецЕсли;	
				
			//УПД	
			ИначеЕсли ТипЗаписи = "STATE_DP_PDPOL" Тогда
				
				Если ОбъектИДанныеСвойства.ТипПостФайла = "STATE_ON_SFAKT" Тогда					
					ТипЗаписи = "STATE02_DP_PDPOL";
				КонецЕсли;
				
				ЗаписатьСвойство(ТипЗаписи,ОбъектСвойства,Контрагент,,,ДанныеТипИВерсия.ИдФайл,,,Данные,"",Дата, 2); 									
				РезультатЗагрузки = Новый Структура;
				РезультатЗагрузки.Вставить("Документ", ЗначениеИзСтрокиВнутрСервер(ОбъектСвойства));
				ДанныеПодписи = ДанныеТипИВерсия.ДанныеПОдписи;
				ИмяПостФайла = ДанныеТипИВерсия.ИдФайл;
				
				Если ЗначениеЗаполнено(РезультатЗагрузки) ТОгда
					
					РезультатЗагрузки.Вставить("idSender", ПолучитьFNSidОрганизации(ПолучитьОрганизацию(РезультатЗагрузки.Документ)));
					РезультатЗагрузки.Вставить("idReceiver", "2IJ");
					РезультатЗагрузки.Вставить("Receiver", ПолучитьGLNОрганизации(ПолучитьОрганизацию(РезультатЗагрузки.Документ)));
					РезультатЗагрузки.Вставить("ИмяПостФайла",ИмяПостФайла);
					РезультатЗагрузки.Вставить("ДатаДокумента", ТекущаяДата());
					
				КонецЕсли;
				
				СтруктураСтатуса = СформироватьИзвещениеОПолучении(РезультатЗагрузки, ДанныеПодписи,4, Ложь);
				
				
				
				Если СТруктураСтатуса.БезОшибки Тогда
					
					ИмяСтатуса = СтруктураСтатуса.ИмяФайлаИзв;
					
					СоздатьКаталог(Объект.Temp+"OUT\");
					ЗаписьXML = Новый ЗаписьXML;
					ЗаписьXML.ОткрытьФайл(Объект.Temp+"OUT\"+ИмяСтатуса,"windows-1251");	
					ЗаписьXML.ЗаписатьБезОбработки(СтруктураСтатуса.ДанныеXML);
					ЗаписьXML.Закрыть();
					
					Base64Archive = ПодписатьВP7SИЗапаковать(ИмяСтатуса,Объект.Temp+"OUT\");	
					
					Если ЗначениеЗаполнено(Base64Archive) Тогда
						
						Если ТипЗаписи = "STATE02_DP_PDPOL" Тогда						
							ТипЗаписиОтвета = "STATE04_DP_IZVPOL";
						КонецЕсли;
						
						ВыгрузитьСтатусПоSOAP(ПолучитьGLNКонтрагента(ПолучитьКОнтрагента(РезультатЗагрузки.Документ)), "FNS_ARCHIVE",ИмяСтатуса, Base64Archive, РезультатЗагрузки.Документ, РезультатЗагрузки.ДатаДокумента, ТипЗаписиОтвета, "", "", "уведомление о получении статуса об отправке")		
						
					Иначе
						Сообщить("Не удалось подписать файл " + ИмяСтатуса);
						Возврат
					КонецЕсли;
					
					Если Не Объект.РежимОтладки Тогда
						ChangeDocumentStatus(СтрокаТаблицы.tracking_id);
					КонецЕсли;
					
				Иначе
					Сообщить("Не удалось сформировать извещение о получении подтверждения оператора по причине: " + СтруктураСтатуса.ТекстОшибки);
				КонецЕсли;
				
			ИначеЕсли ТипЗаписи = "STATE_DP_IZVPOL" Тогда
				
				Если ОбъектИДанныеСвойства.ТипПостФайла = "STATE_ON_SFAKT" Тогда
					ТипЗаписи = "STATE06_DP_IZVPOL";
				КонецЕсли;
				
				ЗаписатьСвойство(ТипЗаписи,ОбъектСвойства,Контрагент,,,ДанныеТипИВерсия.ИдФайл,,,Данные,"",Дата, 2); 									
				
				Если Не Объект.РежимОтладки Тогда
					ChangeDocumentStatus(СтрокаТаблицы.tracking_id);
				КонецЕсли;
				
			Иначе
				
				ОбъектСвойства = СтрокаТаблицы.document_number + Строка(Дата);
				ЗаписатьСвойство(ТипЗаписи,ОбъектСвойства,Контрагент,"","",ДанныеТипИВерсия.ИдФайл,,СтрокаТаблицы.Document_number,Данные,"",Дата, 2); 								
				
			КонецЕсли;			
			
		Иначе
			СОобщить("Не удалось получить файл с платформы!");
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры
&НаКлиенте
Функция ПолучитьЗаголовкиДокументов(Тип, ДатаНачала, ДатаОкончания)	
		
	ТаблицаЗаголовковДокументов.Очистить();
	СТрокаXML = ListMBEx(Тип, ДатаНачала, ДатаОкончания);	
	
	Попытка//2015-09-28
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СТрокаXML);
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если СокрЛП(ЧтениеXML.Имя) = "document-info" Тогда
					ДобавитьСтроку(ТаблицаЗаголовковДокументов.Добавить(),ЧтениеXML);
				КонецЕсли;  
			КонецЕсли;
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				
			КонецЕсли;
			
		КонецЦикла;
	Исключение
		//Сообщить("Ответ EDI Service: "+СтрокаXML);
		Сообщить(ОписаниеОшибки());		
	КонецПопытки;
	
КонецФункции
&НаКлиенте
Процедура ДобавитьСтроку(СтрокаТаблицы,ЧтениеXML)
	
	Пока ЧтениеXML.Прочитать() Цикл
		//
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяКолонки = СтрЗаменить(ЧтениеXML.Имя,"-","_");
		КонецЕсли;
		
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Попытка
				СтрокаТаблицы[ИмяКолонки] =  СокрЛП(ЧтениеXML.Значение);
			Исключение
			КонецПопытки; 
			
			ИмяКолонки = "";
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ЧтениеXML.Имя = "document-info" Тогда
				Прервать;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры
&НаКлиенте
Функция ВыгрузитьСтатусПоSOAP(КОнтрагентGLN, ТипОтп, ИмяФайла, Данные,Документ, ДатаДокумента, ТипЗаписи, НомерЗаказа, ДатаЗаказа, ОПисаниеВыгружаемогоДокумента = "")
	ИмяСтатуса = Лев(ИмяФайла,СтрДлина(ИмяФайла)-4);
	ИмяФайла = Лев(ИмяФайла,СтрДлина(ИмяФайла)-3) + "zip";
	Ответ = SendBinary(КонтрагентGLN,ТипОтп,ИмяФайла,Данные);
	
	Попытка
		ОтветноеЧисло = Число(Ответ);
		Ответ = "";
	Исключение
	КонецПопытки; 
	
	Если ЗначениеЗаполнено(Ответ) Тогда	
		Сообщить("Ответ Service SOAP: "+Ответ);	
	Иначе
		ЗаписатьСвойство(ТипЗаписи, ЗначениеВСтрокуВнутрСервер(Документ),ПолучитьКОнтрагента(Документ),НомерЗаказа,ДатаЗаказа,ИмяСтатуса,"","",Данные,,Число(ПреобразоватьДатуВСтроку(ДатаДокумента)),1);
		Сообщить("Выгружен статус: " + ОПисаниеВыгружаемогоДокумента + " документа "+Документ);
		УдалитьФайлы(Объект.temp,ИмяФайла);		
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Функция ПодписатьИЗапаковать(ИмяСтатуса)
	РаботаССертификатами = ЭДИ_ОбщиеИнструменты.ПолучитьМодульСертификации();
	ОпцииПодписания = РаботаССертификатами.ПолучитьНаборОпций();
  	ОпцииПодписания.СерийныйНомер = СтрЗаменить(Объект.СертификатПоле," ","");
  	ОпцииПодписания.Пинкод = Объект.ПарольККлючуСертификата;
  	ОпцииПодписания.Режим = 0;
  	ОпцииПодписания.Метод = 1;
  	ОпцииПодписания.Тип = 1;
  	ОпцииПодписания.Кодирование = 1;
  	ОпцииПодписания.Способ = 1;
  	ОпцииПодписания.УдалитьФайлы = 1;
  	ОпцииПодписания.РегистрСерийногоНомера = 0;	  //1 перевести в верхний; -1 привести к нижнему; 0 - без изменений
	ОпцииПодписания.ИмяФайла = Объект.Temp+"OUT\"+ ИмяСтатуса;
    ОпцииПодписания.ИмяАрхива = Лев(ИмяСтатуса,СтрДлина(ИмяСтатуса)-3);
	
	Подписание = РаботаССертификатами.ПодписатьИЗапаковать(ОпцииПодписания);
    ЕСли Подписание.Результат = 0 тогда 
    	Сообщить(Подписание.Сообщение);            
     	Возврат Неопределено;
	Иначе
		Возврат Подписание.Содержимое;
	КонецЕСлИ;	
КонецФункции
&НаКлиенте
Функция ВыгрузитьORDER(Документ)
	//НомерИДатаЗаказа = ПолучитьНомерИДатуДокумента(Документ, "ORDER");
	
	Если Объект.УТАП Тогда
		Buyer_ILN = ПолучитьGLNТочкиДоставки(ПолучитьПартнера(Документ));
		DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(ПолучитьАлкПунктРазгрузки(Документ));		
	Иначе		
		Buyer_ILN = ПолучитьGLNКонтрагента(ПолучитьКОнтрагента(Документ));//1234567890123		
		ПОпытка
			DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(ПолучитьГРузоолучателя(Документ));//1234567890123		
			Если Не ЗначениеЗаполнено(DeliveryPoint_ILN) Тогда
				DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(ПолучитьПартнера(Документ));
			КонецЕсли;		
		Исключение
			DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(ПолучитьПартнера(Документ));
		КонецПопытки;
    КонецЕсли;
	Receiver_ILN = Buyer_ILN;
	Seller_ILN = ПолучитьGLNОрганизации(ПолучитьОрганизацию(Документ));//1234567890123
	СписокНоменклатур = ПолучитьСписокНоменклатурДокумента(Документ);
	СписокНоменклатур = ПолучитьКодыНоменклатур(СписокНоменклатур);
	ТекстВыгрузки = ВыгрузитьORDERСервер(Документ, Buyer_ILN, DeliveryPoint_ILN, Receiver_ILN,Seller_ILN, СписокНоменклатур);
	Возврат ТекстВыгрузки;
КонецФункции
&НаКлиенте
Функция ОтправитьФайлНаСервер(КОнтрагентGLN, ТипОтп, ИмяФайла, Данные,Документ, ДатаДокумента, ТипЗаписи, НомерЗаказа, ДатаЗаказа, ОПисаниеВыгружаемогоДокумента = "")
	ИмяФайла = Лев(ИмяФайла,СтрДлина(ИмяФайла)-3) + "zip";
	Ответ = SendBinary(КонтрагентGLN,ТипОтп,ИмяФайла,Данные);
	
	Попытка
		ОтветноеЧисло = Число(Ответ);
		Ответ = "";
	Исключение
	КонецПопытки; 
	
	Если ЗначениеЗаполнено(Ответ) Тогда	
		Сообщить("Ответ Service SOAP: "+Ответ);	
	Иначе
		Если ТипОтп = "TORG12_ARCHIVE" Тогда
			ТипЗаписи = "TORG12_SELLER";
		КонецЕсли;
		ЗаписатьСвойство(ТипЗаписи, ЗначениеВСтрокуВнутрСервер(Документ),ПолучитьКОнтрагента(Документ),НомерЗаказа,ДатаЗаказа,СтрЗаменить(ИмяФайла,".zip",""),"","",Данные,,Число(ПреобразоватьДатуВСтроку(ДатаДокумента)),1);
		Сообщить("Выгружен статус: " + ОПисаниеВыгружаемогоДокумента + " документа "+Документ);
		УдалитьФайлы(Объект.temp,ИмяФайла);		
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Функция ВыгрузитьRECADV(Документ)//Покупатель	
	Если Не ЗначениеЗаполнено(Документ.ЗаказПоставщику) Тогда
		Сообщить ("Для документа " + Документ + " не найден исходный заказ. Выгрузка невозможна."); 
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ReceivingAdviceNumber = СокрЛП(Документ.Номер);//ГМ-0039203
	ReceivingAdviceDate = Формат(Документ.Дата,"ДФ = гггг-ММ-дд");//2011-05-27
	GoodsReceiptDate = Формат(Документ.ЗаказПоставщику.ДатаПоступления,"ДФ = гггг-ММ-дд");//2011-05-27
	
	BuyerOrderNumber = СокрЛП(Документ.ЗаказПоставщику.Номер);//4516751288
	BuyerOrderDate = Формат(Документ.ЗаказПоставщику.Дата,"ДФ = гггг-ММ-дд");//2011-05-27
	НомерДесадв = ПолучитьНомерИДатуДокумента(Документ, "DESADV");
	DespatchNumber = СокрЛП(НомерДесадв.Номер);//4516751288

	
	DocumentFunctionCode = "9";//9
	
	DocumentNameCode = Неопределено;//632
	
	Buyer_ILN = ПолучитьGLNОрганизации(Документ.Организация);//1234567890123
	Buyer_Name = Лев(СтрЗаменить(Документ.Организация.Наименование,"""",""),175);//1234567890123
	Seller_ILN = ПолучитьGLNКонтрагента(Документ.Контрагент);//1234567890123
	Receiver_ILN = Seller_ILN;
	Seller_Name = Лев(СтрЗаменить(Документ.Контрагент.Наименование,"""",""),175);//1234567890123
	DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(Документ.Партнер);//1234567890123
	Попытка DeliveryPoint_Name = Лев(СтрЗаменить(Документ.Грузополучатель.Наименование,"""",""),175);Исключение DeliveryPoint_Name = Неопределено; КонецПопытки;//1234567890123 
	StreetAndNumber = Неопределено;//Бурятское ш. влад.112
	CityName = Неопределено;//ЧО, г.Конючинск
	PostalCode = Неопределено;//123456
	Country = Неопределено;//RU
	
	ЦенаВключаетНДС = Документ.ЦенаВключаетНДС;
	TotalLines = Формат(Документ.Товары.Количество(),"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");//115
	TotalGoodsReceiptAmount = Формат(Документ.Товары.Итог("Количество"),"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//5138.000
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document-ReceivingAdvice");
	ЗаписьXML.ЗаписатьНачалоЭлемента("ReceivingAdvice-Header");
		Если ЗначениеЗаполнено(ReceivingAdviceNumber) Тогда ЗаписатьXML(ЗаписьXML,ReceivingAdviceNumber,"ReceivingAdviceNumber") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //ReceivingAdviceNumber"); КонецЕсли;//90758
		Если ЗначениеЗаполнено(ReceivingAdviceDate) Тогда ЗаписатьXML(ЗаписьXML,ReceivingAdviceDate,"ReceivingAdviceDate") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //ReceivingAdviceDate"); КонецЕсли;//2011-05-27
		Если ЗначениеЗаполнено(GoodsReceiptDate) Тогда ЗаписатьXML(ЗаписьXML,GoodsReceiptDate,"GoodsReceiptDate") КонецЕсли;//2011-05-27
		Если ЗначениеЗаполнено(BuyerOrderNumber) Тогда ЗаписатьXML(ЗаписьXML,BuyerOrderNumber,"BuyerOrderNumber") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //BuyerOrderNumber"); КонецЕсли;//4516751288
		Если ЗначениеЗаполнено(BuyerOrderDate) Тогда ЗаписатьXML(ЗаписьXML,BuyerOrderDate,"BuyerOrderDate") КонецЕсли;//2011-05-26
		Если ЗначениеЗаполнено(DespatchNumber) Тогда ЗаписатьXML(ЗаписьXML,DespatchNumber,"DespatchNumber") Иначе 
			Сообщить("Ошибка в "+Документ+" Не удалось получить данные для тега //DespatchNumber. Возможно, выгружаемый документ был создан не с помощью модуля EDISoft"); 
			ВОзврат Неопределено;
		КонецЕсли;//ФЛ/1-011933
		Если ЗначениеЗаполнено(DocumentFunctionCode) Тогда ЗаписатьXML(ЗаписьXML,DocumentFunctionCode,"DocumentFunctionCode") КонецЕсли;//9
		Если ЗначениеЗаполнено(DocumentNameCode) Тогда ЗаписатьXML(ЗаписьXML,DocumentNameCode,"DocumentNameCode") КонецЕсли;//632
	
	ЗаписьXML.ЗаписатьКонецЭлемента();//*ReceivingAdvice-Header

	ЗаписьXML.ЗаписатьНачалоЭлемента("Document-Parties");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Sender");
		Если ЗначениеЗаполнено(Buyer_ILN) Тогда ЗаписатьXML(ЗаписьXML,Buyer_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Sender/ILN"); КонецЕсли;//4607166039996
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Sender

	ЗаписьXML.ЗаписатьНачалоЭлемента("Receiver");
		Если ЗначениеЗаполнено(Receiver_ILN) Тогда ЗаписатьXML(ЗаписьXML,Receiver_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Receiver/ILN"); КонецЕсли;//4606038000003
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Receiver

	ЗаписьXML.ЗаписатьКонецЭлемента();//*Document-Parties
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ReceivingAdvice-Parties");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Buyer");
		Если ЗначениеЗаполнено(Buyer_ILN) Тогда ЗаписатьXML(ЗаписьXML,Buyer_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Buyer/ILN"); КонецЕсли;//4600000000000
		Если ЗначениеЗаполнено(Buyer_Name) Тогда ЗаписатьXML(ЗаписьXML,Buyer_Name,"Name") КонецЕсли;//ТД Перекресток, ЗАО (X5)
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Buyer

	ЗаписьXML.ЗаписатьНачалоЭлемента("Seller");
		Если ЗначениеЗаполнено(Seller_ILN) Тогда ЗаписатьXML(ЗаписьXML,Seller_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Seller/ILN"); КонецЕсли;//1234567890123
		Если ЗначениеЗаполнено(Seller_Name) Тогда ЗаписатьXML(ЗаписьXML,Seller_Name,"Name") КонецЕсли;//Кукку-Рукку, ООО
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Seller

	ЗаписьXML.ЗаписатьНачалоЭлемента("DeliveryPoint");
		Если ЗначениеЗаполнено(DeliveryPoint_ILN) Тогда ЗаписатьXML(ЗаписьXML,DeliveryPoint_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //DeliveryPoint/ILN"); КонецЕсли;//1234567890123
		Если ЗначениеЗаполнено(DeliveryPoint_Name) Тогда ЗаписатьXML(ЗаписьXML,DeliveryPoint_Name,"Name") КонецЕсли;//Копейка
		Если ЗначениеЗаполнено(StreetAndNumber) Тогда ЗаписатьXML(ЗаписьXML,StreetAndNumber,"StreetAndNumber") КонецЕсли;//Бурятское ш. влад.112
		Если ЗначениеЗаполнено(CityName) Тогда ЗаписатьXML(ЗаписьXML,CityName,"CityName") КонецЕсли;//ЧО, г.Конючинск
		Если ЗначениеЗаполнено(PostalCode) Тогда ЗаписатьXML(ЗаписьXML,PostalCode,"PostalCode") КонецЕсли;//123456
		Если ЗначениеЗаполнено(Country) Тогда ЗаписатьXML(ЗаписьXML,Country,"Country") КонецЕсли;//RU
	ЗаписьXML.ЗаписатьКонецЭлемента();//*DeliveryPoint

	ЗаписьXML.ЗаписатьКонецЭлемента();//*ReceivingAdvice-Parties

	//Выгрузка табличной части
	ЗаписьXML.ЗаписатьНачалоЭлемента("ReceivingAdvice-Lines");
	Для каждого СтрокаТаблицы Из Документ.Товары Цикл
		СтавкаНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
		ЦенаБезНДС = ?(ЦенаВключаетНДС,СтрокаТаблицы.Цена/(1+СтавкаНДС/100),СтрокаТаблицы.Цена);
		ЦенаСНДС = ?(ЦенаВключаетНДС,СтрокаТаблицы.Цена,СтрокаТаблицы.Цена*(1+СтавкаНДС/100));
		СуммаБезНДС = ЦенаБезНДС * СтрокаТаблицы.Количество;
		СуммаСНДС = ЦенаСНДС * СтрокаТаблицы.Количество;
		СуммаНДС = СуммаСНДС - СуммаБезНДС;
		
		LineNumber = Формат(СтрокаТаблицы.НомерСтроки,"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");//1
		EAN = ПолучитьКодТовара("EAN",СтрокаТаблицы.Номенклатура);//1234567890123
		КодНоменклатурыПокупателя = ПолучитьКодТовара("BuyerItemCode",СтрокаТаблицы.Номенклатура);//1234
		ОписаниеНоменклатурыПокупателя = СтрокаТаблицы.Номенклатура.Наименование;
		КодНоменклатурыПоставщика = ПолучитьКодТовара("SupplierItemCode",СтрокаТаблицы.Номенклатура);//1234567
		ОписаниеНоменклатурыПоставщика = Неопределено;//BOBRIK Cereal 18x375g RU
		
		UnitOfMeasure = ПолучитьЕдиницуИзмерения(СтрокаТаблицы);
					
		КоличествоВДокументе = Формат(СтрокаТаблицы.Количество,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0");//126.000
		КоэффициентВДокументе = Формат(СтрокаТаблицы.Упаковка.Коэффициент,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0");//1.000
		ЦенаБезНДС = Формат(ЦенаБезНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//74.9500
		СуммаБезНДС = Формат(СуммаБезНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//9446.2200
		ЦенаСНДС = Формат(ЦенаСНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//74.9500
		СуммаСНДС = Формат(СуммаСНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//9446.2200
		СтавкаНДС = Формат(СтавкаНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Line");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Line-Item");
			Если ЗначениеЗаполнено(LineNumber) Тогда ЗаписатьXML(ЗаписьXML,LineNumber,"LineNumber") КонецЕсли;
			Если ЗначениеЗаполнено(EAN) Тогда ЗаписатьXML(ЗаписьXML,EAN,"EAN") КонецЕсли;
			Если ЗначениеЗаполнено(КодНоменклатурыПокупателя) Тогда ЗаписатьXML(ЗаписьXML,КодНоменклатурыПокупателя,"BuyerItemCode") КонецЕсли;
			Если ЗначениеЗаполнено(КодНоменклатурыПоставщика) Тогда ЗаписатьXML(ЗаписьXML,КодНоменклатурыПоставщика,"SupplierItemCode") КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеНоменклатурыПокупателя) Тогда ЗаписатьXML(ЗаписьXML,ОписаниеНоменклатурыПокупателя,"ItemDescription") КонецЕсли;
			
			Если ЗначениеЗаполнено(КоличествоВДокументе) Тогда ЗаписатьXML(ЗаписьXML,КоличествоВДокументе,"QuantityReceived") КонецЕсли;
			Если ЗначениеЗаполнено(КоэффициентВДокументе) Тогда ЗаписатьXML(ЗаписьXML,КоэффициентВДокументе,"UnitPacksize") КонецЕсли;
			
			Если ЗначениеЗаполнено(ЦенаСНДС) Тогда ЗаписатьXML(ЗаписьXML,ЦенаСНДС,"UnitGrossPrice") КонецЕсли;
			Если ЗначениеЗаполнено(ЦенаБезНДС) Тогда ЗаписатьXML(ЗаписьXML,ЦенаБезНДС,"UnitNetPrice") КонецЕсли;
			Если ЗначениеЗаполнено(UnitOfMeasure) Тогда ЗаписатьXML(ЗаписьXML,UnitOfMeasure,"UnitOfMeasure") КонецЕсли;
			Если ЗначениеЗаполнено(СуммаБезНДС) Тогда ЗаписатьXML(ЗаписьXML,СуммаБезНДС,"NetAmount") КонецЕсли;
			Если ЗначениеЗаполнено(СуммаСНДС) Тогда ЗаписатьXML(ЗаписьXML,СуммаСНДС,"GrossAmount") КонецЕсли;
			//Если ЗначениеЗаполнено(СтавкаНДС) Тогда ЗаписатьXML(ЗаписьXML,СтавкаНДС,"TaxRate") КонецЕсли;
			//	Если ЗначениеЗаполнено(UnitOfMeasure) Тогда ЗаписатьXML(ЗаписьXML,UnitOfMeasure,"UnitOfMeasure") КонецЕсли;//PCE
		ЗаписьXML.ЗаписатьКонецЭлемента();//*Line-Item
		
		ЗаписьXML.ЗаписатьКонецЭлемента();//*Line
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();//*ReceivingAdvice-Lines
	//*
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ReceivingAdvice-Summary");
		Если ЗначениеЗаполнено(TotalLines) Тогда ЗаписатьXML(ЗаписьXML,TotalLines,"TotalLines") КонецЕсли;//30
		Если ЗначениеЗаполнено(TotalGoodsReceiptAmount) Тогда ЗаписатьXML(ЗаписьXML,TotalGoodsReceiptAmount,"TotalGoodsReceiptAmount") КонецЕсли;//2.000
	ЗаписьXML.ЗаписатьКонецЭлемента();//*ReceivingAdvice-Summary

	ЗаписьXML.ЗаписатьКонецЭлемента();//*Document-ReceivingAdvice
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

&НаКлиенте
Функция ПолучитьНомерИДатуДокумента(документ, Тип, ТекДокТип = "")
	Если ЭДИ_РаботаСБазойДанных = Неопределено Тогда
		Сообщить("Нет соединения с БД");
		Возврат Неопределено;
	КонецЕсли;
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();
	Отбор.Тип = "DOC_"+Тип;
	Если ТекДокТип = "DESADV" Тогда
		//Попытка
			Отбор.Объект = ЗначениеВСтрокуВнутрСервер(ПолучитьЗаказ(Документ));
		//Исключение
			//Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Документ.Заказ);
		//КонецПопытки;
	ИначеЕсли ТекДокТип = "INVOICE" Тогда
		Отбор.Объект = ЗначениеВСтрокуВнутрСервер(ПолучитьОснованиеСФ(Документ));
	Иначе
		Если Объект.Бухгалтерия и Объект.СчётВместоРеализацииБУХ Тогда
			Попытка
				Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Документ.СчетНаОплатуПокупателю);
			Исключение
				Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Документ);
			КонецПопытки;
		Иначе
			Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Документ);
		КонецЕсли;
	КонецЕсли;
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
	Если Запрос.Результат=0 тогда
		//Сообщить(Запрос.Сообщение);
		Возврат Неопределено;
	Иначе
		Структура = Новый СТруктура();
		Свойство = Запрос.Содержимое;
		Если Тип = "RECADV" Тогда
			Структура.Вставить("Номер", Свойство.ИндексированныйАтрибут5);
			СтрДата = СтрЗаменить(Строка(Свойство.ИНдексированныйАтрибут2),",","");
			СтрДата = СтрЗаменить(Строка(СтрДата)," ","");
			Дата = Лев(СтрДата, 4) + "-" + Сред(СтрДата, 5, 2) + "-" + Прав(СтрДата,2);
			Структура.Вставить("Дата", Дата);
		Иначе
			Структура.Вставить("Номер", Свойство.ИндексированныйАтрибут1);
			Структура.Вставить("ОтправительГЛН", Свойство.ИндексированныйАтрибут5);
			Структура.Вставить("ДопАтрибуты", Свойство.ДопАтрибуты);
			Если ТекДокТип = "INVOICE" Тогда
				СТруктура.Вставить("ДатаЗаказа", Свойство.ИНдексированныйАтрибут2);
			Иначе
				СтрДата = СтрЗаменить(Строка(Свойство.Дата),",","");
				СтрДата = СтрЗаменить(Строка(СтрДата)," ","");
				Дата = Лев(СтрДата, 4) + "-" + Сред(СтрДата, 5, 2) + "-" + Прав(СтрДата,2);
				Структура.Вставить("Дата", Дата);
			КонецЕсли;
		КонецЕсли;
		Возврат Структура;
	КонецЕсли;	
КонецФункции
&НаКлиенте
Функция ПолучитьСтруктуруФайлаВСтроку(ДанныеФайла, temp, ТипСхемы, РасширениеФайла, Версия)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НомерЗаказа");
	СтруктураВозврата.Вставить("ДатаЗаказа");
	СтруктураВозврата.Вставить("НомерДесадв");
	СтруктураВозврата.Вставить("ДатаДесадв");
	СтруктураВозврата.Вставить("СтруктураСтрока");
	СтруктураВозврата.Вставить("номер_накладной");
	
	РаботаСоСтатусами = ЭДИ_ОбщиеИнструменты.ПолучитьМодульСтатусов();
	ПараметрыЗапроса = РаботаСоСтатусами.ПолучитьПараметрыЗапроса();
	ТипДокумента = ТипСхемы;
	Схема = СформироватьСхему(ТипСхемы);
	Если (НЕ Версия = 5.02) И (ТипДокумента = "ON_SFAKT") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		АтрибутыДокумента = РаботаСоСтатусами.ВернутьАтрибутыДокументаПоСхеме(temp,Схема,ДанныеФайла,РасширениеФайла,0);  
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Структура = Новый Структура;
	КоличествоАтрибутов = АтрибутыДокумента.ОткрытьВыборку();
	Для Сч=0 По АтрибутыДокумента.ВерхнийИндекс() Цикл
		ИмяТега = АтрибутыДокумента.ПолучитьПоИндексу(сч);
		//
		Если ИмяТега = "СтороныОбмена" ИЛИ ИмяТега = "СтрокиДокумента" Тогда
			Строки = АтрибутыДокумента.Получить(ИмяТега);
			СтруктураСтроки = Новый Структура;
			Для СчетчикСтрок = 0 По Строки.ВерхнийИндекс() Цикл
				Строка = Строки.Получить(СчетчикСтрок);
				КоличествоТегов = Строка.ОткрытьВыборку();
				СтруктураСтрока = Новый Структура;
				Для СчетчикТегов=0 ПО Строка.ВерхнийИндекс() Цикл
					ИмяТегаСтроки = Строка.ПолучитьПоИндексу(СчетчикТегов);
					СтруктураСтрока.Вставить(ИмяТегаСтроки, Строка.Получить(ИмяТегаСтроки));					
				КонецЦикла;
				СтруктураСтроки.Вставить("Стр"+Строка(СчетчикСтрок), СтруктураСтрока);
			КонецЦикла;
			Структура.Вставить("СтороныОбмена", СтруктураСтроки);
			СТруктура.Вставить("КоличествоСтрокТЧ", СчетчикСтрок);
		ИначеЕсли ИмяТега = "СтрокиДокумента" ИЛИ ИмяТега = "ТабличнаяЧасть" Тогда
			Строки = АтрибутыДокумента.Получить(ИмяТега);
			СтруктураСтроки = Новый Структура;
			Для СчетчикСтрок = 0 По Строки.ВерхнийИндекс() Цикл
				Строка = Строки.Получить(СчетчикСтрок);
				КоличествоТегов = Строка.ОткрытьВыборку();
				СтруктураСтрока = Новый Структура;
				Для СчетчикТегов=0 ПО Строка.ВерхнийИндекс() Цикл
					ИмяТегаСтроки = Строка.ПолучитьПоИндексу(СчетчикТегов);
					Если ИмяТегаСтроки = "СтрокиДокумента2" ИЛИ ИмяТегаСтроки = "ДанныеИнфПол" Тогда
						Строки2 = Строка.Получить(ИмяТегаСтроки);
						СтруктураСтроки2 = Новый Структура;
						Для СчетчикСтрок2 = 0 По Строки2.ВерхнийИндекс() Цикл
							Строка2 = Строки2.Получить(СчетчикСтрок2);
							КоличествоТегов2 = Строка2.ОткрытьВыборку();
							СтруктураСтрока2 = Новый Структура;
							Для СчетчикТегов2=0 ПО Строка2.ВерхнийИндекс() Цикл
								ИмяТегаСтроки2 = Строка2.ПолучитьПоИндексу(СчетчикТегов2);
								СтруктураСтрока2.Вставить(ИмяТегаСтроки2, Строка2.Получить(ИмяТегаСтроки2));
							КонецЦикла;
							СтруктураСтроки2.Вставить("Стр"+Строка(СчетчикСтрок2), СтруктураСтрока2);
						КонецЦикла;
						СтруктураСтрока.Вставить("ТабличнаяЧасть", СтруктураСтроки2);
						СтруктураСтрока.Вставить("КоличествоСтрокТЧ", СчетчикСтрок2);
					Иначе
						СтруктураСтрока.Вставить(ИмяТегаСтроки, Строка.Получить(ИмяТегаСтроки));
					КонецЕсли;
				КонецЦикла;
				СтруктураСтроки.Вставить("Стр"+Строка(СчетчикСтрок), СтруктураСтрока);
			КонецЦикла;
			Структура.Вставить("ТабличнаяЧасть", СтруктураСтроки);
			СТруктура.Вставить("КоличествоСтрокТЧ", СчетчикСтрок);
		Иначе
			Структура.Вставить(ИмяТега,АтрибутыДокумента.Получить(ИмяТега));
		КонецЕсли;
	КонецЦикла;	
	Если Найти(ТипДокумента, "ON_SFAKT") > 0 Тогда
		
		СтруктураВозврата.Вставить("ДатаСЧФ",Структура.ДатаСчФ);
		СтруктураВозврата.Вставить("ИДОтпр", Структура.ИдОтпр);
		СтруктураВозврата.Вставить("ИДПок", Структура.ИдПок);
		СТруктураВОзврата.Вставить("НомерСчФ",Структура.НомерСчФ);
		Если СТруктура.ТабличнаяЧасть.Количество() > 0 Тогда
			КолВоСтрокИнфПол = СТруктура.ТабличнаяЧасть.Стр0.ТабличнаяЧасть.Количество();
			НомерЗаказа = "";
			Если КолВоСтрокИнфПол > 0 Тогда
				Для Сч = 0 По КолВоСтрокИнфПол-1 Цикл 					
					Ключ = "Стр" + Строка(Сч);
					ИмяСТроки = СокрЛП(Структура.ТабличнаяЧасть.Стр0.ТабличнаяЧасть[Ключ].Идентиф);					
					Если ИмяСтроки = "номер_заказа" Тогда
						НомерЗаказа	= СокрЛП(Структура.ТабличнаяЧасть.Стр0.ТабличнаяЧасть[Ключ].Значен);
						СТруктура.Вставить("НомерЗаказа", НомерЗаказа);
					ИначеЕсли ИмяСтроки = "номер_накладной" Тогда
						СтруктураВозврата.номер_накладной = СокрЛП(Структура.ТабличнаяЧасть.Стр0.ТабличнаяЧасть[Ключ].Значен);
						Структура.Вставить("НомерНакладной", СтруктураВозврата.номер_накладной);
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			СтруктураВозврата.Вставить("НомерЗаказа", НомерЗаказа);
		КонецЕсли;
		СтруктураВозврата.Вставить("ИдФайл", Структура.ИдФайл);
		СтруктураВозврата.Вставить("Объект", Строка(Структура.НомерСчФ+"_" + Структура.ДатаСЧФ));
	ИначеЕсли ТипДокумента = "DP_PDOTPR" Тогда
		СтруктураВОзврата.Вставить("ИдФайл", Структура.ИдФайл);
		СтруктураВОзврата.Вставить("ДатаОтпр", Структура.ДатаОтпр);
		СтруктураВОзврата.Вставить("ВремяОтпр", Структура.ВремяОтпр);
		СтруктураВОзврата.Вставить("ИмяПостФайла", Структура.ИмяПостФайла);
		СтруктураВОзврата.Вставить("ИдПол", Структура.ИдПол);
		СтруктураВОзврата.Вставить("ИдОтпр", Структура.ИдОтпр);
		СтруктураВозврата.Вставить("Объект", Структура.ИдФайл);
	Иначе	
		Попытка
			СтруктураВозврата.НомерЗаказа = Структура.НомерЗаказа;
		Исключение
			СтруктураВозврата.НомерЗаказа = "";
		КонецПопытки;
		Попытка
			СтруктураВозврата.ДатаЗаказа = "";
		Исключение
			СтруктураВозврата.ДатаЗаказа = "";
		КонецПопытки;
		Попытка
			СтруктураВозврата.НомерДесадв = Структура.НомерОтгрузки;
		Исключение
			СтруктураВозврата.НомерДесадв = "";
		КонецПопытки;
		Попытка
			СтруктураВозврата.ДатаДесадв = "";
		Исключение
		КонецПопытки;
	КонецЕсли;
	СтруктураВозврата.СтруктураСтрока = ЗначениеВСтрокуВнутрСервер(Структура);
	Возврат СтруктураВозврата;
КонецФункции
&НаКлиенте
Функция ПолучитьОбъектСвойства(ТипЗаписи, Тип, СТруктура = Неопределено, НомерЗаказа = Неопределено)

	
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();
	//Если ЗначениеЗаполнено(КОнтрагентФильтр) Тогда
	//	Отбор.Владелец = ПРеобразоватьОбъектВСтроку(КОнтрагентФильтр);		
	//КонецЕсли;
	Попытка
		СтруктураФайла = ЗначениеИзСТрокиВнутрСервер(Структура);
	Исключение
	КонецПопытки;
	Если ТипЗаписи = "STATE_DP_PDOTPR" ИЛИ ТипЗаписи = "STATE_DP_PDPOL" ИЛИ ТипЗаписи = "STATE_DP_IZVPOL" Тогда
		//Если Найти(СтруктураФайла.ИмяПостФайла, "ON_SFAKT")>0 Тогда
			Отбор.Тип = "STATE_ON_SFAKT";
		//ИначеЕсли 
		Попытка
			Отбор.ИндексированныйАтрибут3 = СтруктураФайла.ИмяПостФайла;
		Исключение
			Отбор.ИндексированныйАтрибут3 = СокрЛП(СТруктура.ПервичныйИдФайл);
		КонецПопытки;
		
		Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	//, 0, 0, 0,-1,1
		
	ИначеЕсли Найти(ТипЗаписи,"UPD")>0 Тогда
		
		Отбор.Тип = "STATE_ON_SCHFDOPPR";
		
		Попытка
			Отбор.ИндексированныйАтрибут3 = СтруктураФайла.ИмяПостФайла;
		Исключение
			Отбор.ИндексированныйАтрибут3 = СокрЛП(СТруктура.ПервичныйИдФайл);
		КонецПопытки;
		
		Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);
		
		Если Запрос.Результат=0 тогда
			
			Отбор.ТИп = "STATE_ON_KORSCHFDOPPR";
			Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);
			
		КонецЕсли;
		
	Иначе
		Отбор.ИндексированныйАтрибут1 = СокрЛП(НомерЗаказа);
		Отбор.ИндексированныйАтрибут3 = СтруктураФайла.ИдФайл;
		Отбор.Тип = ТипЗаписи;
		Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСписокСвойств(Отбор, ПреобразоватьДатуВСтроку(Объект.НачалоПериода), ПреобразоватьДатуВСтроку(Объект.КонецПериода), 1,-1,1);	
	КонецЕсли;
	
		
	
	СтруктураОтвета = Новый Структура;
	Если Запрос.Результат=0 тогда
		Если ТипЗаписи = "STATE_DP_PDOTPR" ИЛИ Найти(ТипЗаписи,"UPD")>0 Тогда
			Возврат Неопределено;
		Иначе
			СтруктураОтвета = ПолучитьОбъектСвойстваСервер(Тип,Структура);
		КонецЕсли;
	Иначе
		Свойство = Запрос.Содержимое;
		Попытка
			Документ = Свойство.Объект;
			Если ТипЗаписи = "STATE_DP_PDPOL" ИЛИ ТипЗаписи = "STATE_DP_IZVPOL"  ИЛИ Найти(ТипЗаписи,"UPD")>0 Тогда
				Попытка
					ДокументСсылка = ЗначениеИзСтрокиВнутрСервер(Документ);
					СтруктураОтвета.Вставить("Объект", Документ);
					СТруктураОтвета.Вставить("ТипПостФайла", Свойство.Тип);
					СтруктураОтвета.Вставить("Владелец", Свойство.Владелец);
					Возврат СтруктураОтвета;
				Исключение
					Возврат Неопределено;
				КонецПопытки;
			КонецЕсли;
			СтруктураОтвета.Вставить("Объект", Документ);	
			ОбъектСвойства = ПолучитьОбъектСвойстваСервер(Тип,Структура);
			Попытка
				СтруктураОтвета.Вставить("buyer_iln",ОбъектСвойства.buyer_iln);
			Исключение
			КонецПопытки;
			Если Тип = "RECADV" Тогда
				СтруктураОтвета.Вставить("НомерЗаказа", Свойство.ИндексированныйАтрибут1);
				СтруктураОтвета.Вставить("НомерДесадв", Свойство. ИндексированныйАтрибут3);
				СтруктураОтвета.Вставить("ДатаЗаказа", Свойство.ИндексированныйАтрибут2);
				СтруктураОтвета.Вставить("ДатаДесадв", Свойство. ИндексированныйАтрибут4);
			КонецЕсли; 
		Исключение			
		КонецПопытки;;		
	КонецЕслИ; 
	Возврат СтруктураОтвета;
КонецФункции
&НаКлиенте
Функция ВернутьТипДокумета(ИмяФайла, ДанныеФайла = "", Расширение="xml", ПОлучитьИнвойс=0)
	СтруктураВозврата = Новый СТруктура;
	СтруктураВозврата.Вставить("ТипДокумента");
	СтруктураВозврата.Вставить("Версия");
	СтруктураВОзврата.Вставить("ДанныеПОдписи",);
	СтруктураВОзврата.Вставить("ПервичныйИдФАйл",);
	СтруктураВОзврата.Вставить("ИдФАйл",);
		
	РаботаСоСтатусами = ЭДИ_ОбщиеИнструменты.ПолучитьМодульСтатусов();
	//ПараметрыЗапроса = РаботаСоСтатусами.ПолучитьПараметрыЗапроса();
	Ответ = РаботаСоСТатусами.ВернутьТипДокумента(ИмяФайла, ДанныеФайла, Расширение,ПОлучитьИнвойс);
	Если Ответ.Результат = 1 Тогда
		ТипДокумента = Ответ.Получить("ТипДокумента");
		СтруктураВозврата.ТипДокумента = ТипДокумента;
		Попытка
			СтруктураВозврата.Версия = Число(Ответ.Содержимое.Версия);       
		Исключение
			СтруктураВозврата.Версия = 0;
		КонецПопытки;
		Попытка
			СтруктураВОзврата.ДанныеПОдписи = Ответ.Содержимое.База64ЭЦП;
		Исключение
			СтруктураВОзврата.ДанныеПОдписи = "";
		КонецПопытки;
		Попытка
			СтруктураВозврата.ПервичныйИдФАйл = Ответ.Содержимое.ПервичныйИдФАйл;
		Исключение
			СтруктураВозврата.ПервичныйИдФАйл = "";
		КонецПопытки;		
		Попытка
			СтруктураВозврата.ИдФАйл = Ответ.Содержимое.ИдФайл
		Исключение
			СтруктураВозврата.ИдФАйл = "";
		КонецПопытки;
	КонецЕсли;
	Возврат СтруктураВозврата;			
КонецФункции
&НаКлиенте
Функция ПолучитьКОнтрагентаПоFNS_ID(FNS_Id)	
	
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();
	Отбор.Тип = "GLN";
	Отбор.ИндексированныйАтрибут2 = FNS_Id;
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
	Если Запрос.Результат=0 тогда
		Сообщить("Контрагент по FNS_Id " + FNS_Id + " не найден! Проверьте правильность заполнения FNS_Id с помошью менеджера сторон обмена.");
		Возврат Неопределено;
	Иначе
		Свойство = Запрос.Содержимое;		
		СтрКОнтрагент = Свойство.Объект;
		Возврат ЗначениеИзСтрокиВнутрСервер(СтрКОнтрагент);
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ВыгрузитьORDRSP(Документ)
	НомерИДатаЗаказа = ПолучитьНомерИДатуДокумента(Документ, "ORDER");	
	Если Объект.УТАП Тогда
		Buyer_ILN = ПолучитьGLNТочкиДоставки(ПолучитьПартнера(Документ));
		DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(ПолучитьАлкПунктРазгрузки(Документ));		
	Иначе		
		Buyer_ILN = ПолучитьGLNКонтрагента(ПолучитьПартнера(Документ));//1234567890123		
		DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(ПолучитьГРузоолучателя(Документ));//1234567890123
		Если Не ЗначениеЗаполнено(DeliveryPoint_ILN) Тогда
			DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(ПолучитьКОнтрагента(Документ));
		КонецЕсли;		
	КонецЕсли;
	Если ЗначениеЗаполнено(НомерИДатаЗаказа) Тогда
		Receiver_ILN = НомерИДатаЗаказа.ОтправительГЛН;
	Иначе
		Сообщить("Не удалось получить номер и дату заказа.");
		Возврат Неопределено;
	КонецЕсли;
	Seller_ILN = ПолучитьGLNОрганизации(ПолучитьОрганизацию(Документ));//1234567890123
	СписокНоменклатур = ПолучитьСписокНоменклатурДокумента(Документ);
	СписокНоменклатур = ПолучитьКодыНоменклатур(СписокНоменклатур);
	ТекстВыгрузки = ВыгрузитьORDRSPСервер(Документ, НомерИДатаЗаказа, Buyer_ILN, DeliveryPoint_ILN, Receiver_ILN,Seller_ILN, СписокНоменклатур);
	Возврат ТекстВыгрузки;
КонецФункции
&НаКлиенте
Функция ПолучитьКодыНоменклатур(СписокСтрок)
		
	Для Сч = 0 По СписокСтрок.Количество()-1 Цикл
		Ключ = "Строка" + Строка(Сч);
		СтруктураСТроки = СписокСтрок[Ключ];
		EAN = ПолучитьКодТовара("EAN", СтруктураСТроки.Номенклатура);//1234567890123
		КодНоменклатурыПокупателя = ПолучитьКодТовара("BuyerItemCode", СтруктураСТроки.Номенклатура);//1234		
		КодНоменклатурыПоставщика = ПолучитьКодТовара("SupplierItemCode",СтруктураСТроки.Номенклатура);//1234567
		СтруктураСТроки.Вставить("EAN",EAN);
		СтруктураСТроки.Вставить("КодНоменклатурыПокупателя",КодНоменклатурыПокупателя);
		СтруктураСТроки.Вставить("КодНоменклатурыПоставщика",КодНоменклатурыПоставщика);
	КонецЦикла;
	Возврат СписокСтрок;
	
КонецФункции
&НаКлиенте
Функция ВыгрузитьDESADV(Документ, ALCDES = Ложь)
	Заказ = ПолучитьЗаказ(Документ);
	НомерИДатаЗаказа = ПолучитьНомерИДатуДокумента(Заказ, "ORDER");
	
	Если ALCDES Тогда
		Buyer_ILN = ПолучитьGLNТочкиДоставки(ПолучитьПартнера(Документ));
		DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(ПолучитьАлкПунктРазгрузки(Документ));
		Попытка DeliveryPoint_Name = Лев(СтрЗаменить(Документ.алкПунктРазгрузки.Наименование,"""",""),175);Исключение DeliveryPoint_Name = Неопределено; КонецПопытки;//1234567890123 		
	Иначе		
		Buyer_ILN = ПолучитьGLNКонтрагента(ПолучитьПартнера(Документ));//1234567890123
		Если Не ЗначениеЗаполнено(Buyer_ILN) Тогда
			Buyer_ILN = ПолучитьGLNТочкиДоставки((Документ));
		КонецЕсли;		
		DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(ПолучитьКОнтрагента(Документ));//1234567890123
		Если Не ЗначениеЗаполнено(DeliveryPoint_ILN) Тогда
			Попытка
				DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(ПолучитьАлкПунктРазгрузки(Документ));			
			Исключение
				DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(ПолучитьКОнтрагента(Документ));
			КонецПопытки;		
		КонецЕсли;		
    КонецЕсли;

	Receiver_ILN = НомерИДатаЗаказа.ОтправительГЛН;
	Seller_ILN = ПолучитьGLNОрганизации(ПолучитьОрганизацию(Документ));//1234567890123
	СписокНоменклатур = ПолучитьСписокНоменклатурДокумента(Документ, Истина,ALCDES,,,Истина);
	СписокНоменклатур = ПолучитьКодыНоменклатур(СписокНоменклатур);
	//Если Объект.ИспользоватьSSCC Тогда
	//	СтруктураПаллет = ПолучитьПалетныйЛист(Документ);
	//	СписокНоменклатур = СопоставитьСтрокиДокументаСПаллетнымЛистом(СписокНоменклатур, СтруктураПаллет);
	//КонецЕсли;
	Если Объект.ИспользоватьSSCC Тогда
		Объект.ТаблицаНоменклатуры.Очистить();
		Объект.ТаблицаПаллет.Очистить();
		Объект.ТаблицаРаспределения.Очистить();
		ЕдиницаИзмеренияРазмеров = "";
		Структ = ЗагрузитьРаспределения(Документ);
		Если Объект.ТаблицаРаспределения.Количество() = 0 Тогда
			Сообщить("Для документа " + Документ + " не заполнено распределение");
			Возврат Неопределено;
		Конецесли;
		УтимКаст = "";
		ТекстВыгрузки = ВыгрузитьDESADVСервер(Документ, ALCDES, НомерИДатаЗаказа, Buyer_ILN, DeliveryPoint_ILN, Receiver_ILN,Seller_ILN, СписокНоменклатур, Заказ,Структ);
		Возврат ТекстВыгрузки;
	КонецЕсли;
	ТекстВыгрузки = ВыгрузитьDESADVСервер(Документ, ALCDES, НомерИДатаЗаказа, Buyer_ILN, DeliveryPoint_ILN, Receiver_ILN,Seller_ILN, СписокНоменклатур, Заказ);
	Возврат ТекстВыгрузки;
КонецФункции

&НаКлиенте
Функция ЗагрузитьРаспределения(Док)
	РаботаСБиблиотекой = Новый COMОбъект("EsTools1C.ExtTools");
	СтрокаПодключения = Объект.ЭДИ_КаталогВнешнейБазыДанных;
	ТипБД = "sqlite";
	РаботаСБД = РаботаСБиблиотекой.ПолучитьВнешнююБазуДанных(СтрокаПодключения, ТипБД);
	Отбор = РаботаСБД.ПолучитьПустуюЗапись();
	Отбор.Тип = "DISTR_SSCC";
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Док);
	Запрос = РаботаСБД.ПолучитьСписокСвойств(Отбор);	
	Если Запрос.Результат=0 тогда
		//Сообщить(Запрос.Сообщение);
	Иначе
		СписокДанных = Запрос.Содержимое;
		Для Сч=0 По СписокДанных.Верхнийиндекс() Цикл
			Свойство = СписокДанных.Получить(Сч);
			Структ= Свойство.Данные;
			СтруктВозврата = ЗагрузитьНаСервере(Структ);
			Возврат СтруктВозврата;
		КонецЦикла; 		
	КонецЕсли;
КонецФункции

&НаСервере
Функция ЗагрузитьНаСервере(Структ)
	СтруктураСервер = ЗначениеИзСтрокиВнутр(Структ);
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ТаблицаНоменклатуры.Загрузить(СтруктураСервер.ТаблицаНоменклатуры);
	Документ.ТаблицаПаллет.Загрузить(СтруктураСервер.ТаблицаПаллет);
	Документ.ТаблицаРаспределения.Загрузить(СтруктураСервер.ТаблицаРаспределения);
	
	СтрВозвр = Новый Структура;
	СтрВозвр.Вставить("БоковаяРазгрузка",СтруктураСервер.БоковаяРазгрузка);
	СтрВозвр.Вставить("ЕдиницаИзмеренияРазмеров",СтруктураСервер.ЕдиницаИзмеренияРазмеров);
	СтрВозвр.Вставить("ТемпературныйРежим",СтруктураСервер.ТемпературныйРежим);
	СтрВозвр.Вставить("Водитель",СтруктураСервер.Водитель);
	СтрВозвр.Вставить("Марка",СтруктураСервер.Марка);
	СтрВозвр.Вставить("НомерМашины",СтруктураСервер.НомерМашины);
	
	ЗначениеВРеквизитФормы(Документ, "Объект");
	//Структ = ЗначениеИзСтрокиВнутр(Структ);
	//ЕдиницаИзмеренияРазмеров = Структ.ЕдиницаИзмеренияРазмеров;
	//Таб = ПреобразоватьМассивВТаблицуЗначений(Структ.ТаблицаНоменклатуры);
	//Объект.ТаблицаНоменклатуры.Загрузить(Таб);
	//
	//Таб = ПреобразоватьМассивВТаблицуЗначений(Структ.ТаблицаПаллет);
	//Объект.ТаблицаПаллет.Загрузить(Таб);
	//
	//Таб = ПреобразоватьМассивВТаблицуЗначений(Структ.ТаблицаРаспределения);
	//Объект.ТаблицаРаспределения.Загрузить(Таб);
	Возврат СтрВозвр;
КонецФункции

&НаСервере
Функция ПреобразоватьМассивВТаблицуЗначений(мсДанные) Экспорт
    
    тзДанные = Новый ТаблицаЗначений;
    Если мсДанные.Количество() > 0 Тогда
		ЭлементМассива = мсДанные[0];
	    Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
			        тзДанные.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
		КонецЦикла;
	КонецЕсли;
    Для Каждого ЭлементМассива Из мсДанные Цикл
        // Рисуем колонки для таблицы
		//Если тзДанные.Колонки.Количество() = 0 Тогда
			//Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
			//    тзДанные.Колонки.Добавить(ЗначениеСтруктуры.Ключ);
			//КонецЦикла;
		//КонецЕсли;
        
        // Добавляем данные в таблицу
        НоваяСтрока = тзДанные.Добавить();
        Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
            НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
        КонецЦикла;
    КонецЦикла;
    
    Возврат тзДанные;
    
КонецФункции // ПреобразоватьМассивВТаблицуЗначений()

&НаКлиенте
Функция ВыгрузитьINVOICE(Документ, ЯвляетсяКорректировкой = ЛОжь)		
	Отказ = Ложь;
	Лог = "";
	СвязанныеДокументы = ПолучитьСвязанныеДокументыСФ(Документ,,,Лог,Отказ);
	СписокНоменклатур = ПолучитьСписокНоменклатурДокумента(СвязанныеДокументы.СкорректированнаяРеализация);
	СписокНоменклатур = ПолучитьКодыНоменклатур(СписокНоменклатур);
	
	Если Объект.УТАП Тогда
		
		Buyer_ILN = ПолучитьGLNТочкиДоставки(ПолучитьПартнера(СвязанныеДокументы.СкорректированнаяРеализация));		
		DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(ПолучитьАлкПунктРазгрузки(СвязанныеДокументы.СкорректированнаяРеализация));		
		
	Иначе		
		
		Buyer_ILN = ПолучитьGLNКонтрагента(ПолучитьКОнтрагента(СвязанныеДокументы.ИсходнаяРеализация));//1234567890123		
		DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(ПолучитьГРузоолучателя(СвязанныеДокументы.ИсходнаяРеализация));//1234567890123
		
		Если Не ЗначениеЗаполнено(DeliveryPoint_ILN) Тогда
			DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(ПолучитьПартнера(СвязанныеДокументы.ИсходнаяРеализация));
		КонецЕсли;		
		
	КонецЕсли;
	
	НомерИДатаЗаказа = ПолучитьНомерИДатуДокумента(СвязанныеДокументы.ИсходныйЗаказ, "ORDER");
	НомерИДатаРекадва = ПолучитьНомерИДатуДокумента(СвязанныеДокументы.ИсходнаяРеализация, "RECADV");
	
	Seller_ILN = ПолучитьGLNОрганизации(ПолучитьОрганизацию(Документ));//1234567890123	
	СтруктураДанныхСФ = Новый Структура;
	СтруктураДанныхСФ.Вставить("Buyer_ILN",Buyer_ILN);
	СтруктураДанныхСФ.Вставить("DeliveryPoint_ILN",DeliveryPoint_ILN);
	СтруктураДанныхСФ.Вставить("Seller_ILN",Seller_ILN);
	СтруктураДанныхСФ.Вставить("ФИОГенДир", Объект.ФИОГенДир);
	СтруктураДанныхСФ.Вставить("ФИОГлБух", Объект.ФИОГлБух);	
	Попытка Receiver_ILN = НомерИДатаЗаказа.ОтправительГЛН; Исключение Receiver_ILN = Неопределено; КонецПопытки; 
	СтруктураДанныхСФ.Вставить("Receiver_ILN",Receiver_ILN);	
	//Отказ = Ложь;
	//Лог = "";
	ТекстВыгрузки = ВыгрузитьINVOICEСервер(Документ, Ложь,НомерИДатаЗаказа, СтруктураДанныхСФ, СписокНоменклатур, СвязанныеДокументы, НомерИДатаРекадва,Отказ,Лог);
	Если Отказ=Истина Тогда
		ЗаписатьВЛог(Лог);
		Возврат Неопределено;
	Иначе
		Возврат ТекстВыгрузки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПалетныйЛист(Документ)
		
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();
	Отбор.Тип = "DESADV_SSCC";
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Документ);	
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
	
	Если Запрос.Результат=0 тогда
		Возврат Неопределено;
	Иначе
		
		Свойство = Запрос.Содержимое;				
		СтруктураТаблицы = ЗначениеИзСтрокиВнутрСервер(Свойство.ДопАтрибуты);
		Возврат СтруктураТаблицы;
		
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ПолучитьСтатусТекущегоДокумента(Документ,  Торг = Ложь, УПД = Ложь)
	Статус = "";
	Мин = Неопределено;
	Макс = Неопределено;
	Массив = Новый Массив;
		
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();					
	Если Торг Тогда
		Отбор.Тип = "TORG12_";
		Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Документ);
		ЗапросСтатус = ЭДИ_РаботаСБазойДанных.ПолучитьСписокСвойств(Отбор, , ,1,-1,1);	
		Если ЗапросСтатус.Результат = 0 Тогда
			//нет статусов
		Иначе
			СТатусФНС = "Не  отправлялся";
			СписокДанныхПоСтатусам = ЗапросСтатус.Содержимое;
			Для СчСт=0 По СписокДанныхПоСтатусам.Верхнийиндекс() Цикл
				СвойствоСтатуса = СписокДанныхПоСтатусам.Получить(СчСт);
				Если СвойствоСтатуса.Тип = "TORG12_SELLER" Тогда
					Если (СТатусФНС = "Не  отправлялся") Тогда
						СТатусФНС = "Отправлен";
						Статус = СвойствоСтатуса.Состояние;
					КонецЕсли;
				ИначеЕсли СвойствоСтатуса.Тип = "TORG12_DP_PTORG12" Тогда
					Если (СТатусФНС = "Не  отправлялся") ИЛИ (СтатусФНС = "Отправлен") Тогда
						СтатусФНС = "Документ принят покупателем";
						Статус = СвойствоСтатуса.Состояние;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	//УПД
	ИначеЕсли УПД Тогда
		
		Отбор.Тип = "STATE";
		Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Документ);
		ЗапросСтатус = ЭДИ_РаботаСБазойДанных.ПолучитьСписокСвойств(Отбор, , ,1,-1,1);
		
		Если ЗапросСтатус.Результат = 0 Тогда
			//нет статусов
		Иначе
			
			СТатусФНС = "Не  отправлялся";
			СписокДанныхПоСтатусам = ЗапросСтатус.Содержимое;
			
			Для СчСт=0 По СписокДанныхПоСтатусам.Верхнийиндекс() Цикл
				
				СвойствоСтатуса = СписокДанныхПоСтатусам.Получить(СчСт);
				
				Если СвойствоСтатуса.Тип = "STATE_ON_SCHFDOPPR" ИЛИ СвойствоСтатуса.Тип = "STATE_ON_KORSCHFDOPPR" Тогда
					
					Если (СТатусФНС = "Не  отправлялся") Тогда
						
						
						СТатусФНС = "Отправлен";
						Статус = СвойствоСтатуса.Состояние;
						
					КонецЕсли;
					
				ИначеЕсли СвойствоСтатуса.Тип = "STATE_UPD_PDPOL_PKG" ИЛИ СвойствоСтатуса.Тип = "STATE_06_UPD_IZVPOL_PKG" ИЛИ СвойствоСтатуса.Тип = "STATE_UPD_IZVPOL_PKG" Тогда
					
					Если (СТатусФНС = "Не  отправлялся") ИЛИ (СтатусФНС = "Отправлен") Тогда
						
						СтатусФНС = "Ожидается титул покупателя";
						Статус = СвойствоСтатуса.Состояние;
						
					КонецЕсли;
					
				ИначеЕсли СвойствоСтатуса.Тип = "STATE_UPD_SCHFDOPPOK_PKG" Тогда
					
					Если (СТатусФНС = "Не  отправлялся") ИЛИ (СтатусФНС = "Отправлен") ИЛИ (СтатусФНС = "Ожидается титул покупателя") Тогда
						
						СтатусФНС = "Получен титул покупателя. Завершено";
						Статус = СвойствоСтатуса.Состояние;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;					
						
		КонецЕсли;
	//УПД
	Иначе
		Отбор.Тип = "STATE";
		Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Документ);
		ЗапросСтатус = ЭДИ_РаботаСБазойДанных.ПолучитьСписокСвойств(Отбор, , ,1,-1,1);	
		Если ЗапросСтатус.Результат = 0 Тогда
			//нет статусов
		Иначе
			СТатусФНС = "Не  отправлялся";
			СписокДанныхПоСтатусам = ЗапросСтатус.Содержимое;
			Для СчСт=0 По СписокДанныхПоСтатусам.Верхнийиндекс() Цикл
				СвойствоСтатуса = СписокДанныхПоСтатусам.Получить(СчСт);
				Если СвойствоСтатуса.Тип = "STATE_ON_SFAKT" Тогда
					Если (СТатусФНС = "Не  отправлялся") Тогда
						СТатусФНС = "Отправлен";
						Статус = СвойствоСтатуса.Состояние;
					КонецЕсли;
				ИначеЕсли СвойствоСтатуса.Тип = "STATE02_DP_PDPOL" Тогда
					Если (СТатусФНС = "Не  отправлялся") ИЛИ (СтатусФНС = "Отправлен") Тогда
						СтатусФНС = "Дата отправки подтверждена";
						Статус = СвойствоСтатуса.Состояние;
					КонецЕсли;
				ИначеЕсли СвойствоСтатуса.Тип = "STATE04_DP_IZVPOL" Тогда
					Если (СТатусФНС = "Не  отправлялся") ИЛИ (СтатусФНС = "Отправлен") ИЛИ (СтатусФНС = "Дата отправки подтверждена") Тогда
						СтатусФНС = "Отправлено извещение о получении";
						Статус = СвойствоСтатуса.Состояние;
					КонецЕсли;
				ИначеЕсли СвойствоСтатуса.Тип = "STATE06_DP_IZVPOL" Тогда
					Если (СТатусФНС = "Не  отправлялся") ИЛИ (СтатусФНС = "Отправлен") ИЛИ (СтатусФНС = "Дата отправки подтверждена") ИЛИ (СтатусФНС = "Отправлено извещение о получении") Тогда
						СтатусФНС = "Счет-фактура получен сетью";
						Статус = СвойствоСтатуса.Состояние;
					КонецЕсли;
			КонецЕсли;
			КонецЦикла;					
						
		КонецЕсли;
	КонецЕсли;
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("СтатусФНС",СтатусФНС);
	СтруктураВозврата.Вставить("Статус",Статус);
	Возврат СтруктураВозврата;

	
КонецФункции
&НаКлиенте
Функция ПолучитьGLNКонтрагента(Контрагент)
				
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();	
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Контрагент);
	Отбор.Тип = "GLN";
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
	
	Если Запрос.Результат=0 тогда
		Сообщить("Не удалось получить GLN Контрагента! Документ не выгружен!");
		Возврат Неопределено;
	Иначе
		Свойство = Запрос.Содержимое;		
		GLN = Свойство.ИндексированныйАтрибут1;//gln
		Возврат GLN;
	КонецЕсли;
	

	
	GLN = "";
	Если ОБъект.МестоПоискаКонтрагента = "1" Тогда
		GLN = ПолучитьЗначениеСвойстваОбъектаДФормы(СокрЛП(Объект.Контрагент_Поле),Контрагент);
	ИначеЕсли Объект.МестоПоискаКонтрагента = "2" тогда
		GLN = ПолучитьGLNКонтрагентаСервер(Контрагент, Объект.Контрагент_Поле);		
	КонецЕсли;
	Если ЗначениеЗаполнено(GLN) Тогда
		ВОзврат GLN;
	Иначе 
		Сообщить ("Не удалось получить GLN контрагента. Проверьте настроки модуля и заполненность реквизитов.");
		Возврат "";
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ПолучитьGLNОрганизации(Организация)
	
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();	
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Организация);
	Отбор.Тип = "GLN";
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
	
	Если Запрос.Результат=0 тогда
		Сообщить("Не удалось получить GLN Организации! Документ не выгружен!");
		Возврат Неопределено;
	Иначе
		Свойство = Запрос.Содержимое;		
		GLN = Свойство.ИндексированныйАтрибут1;//gln
		Возврат GLN;
	КонецЕсли;

	Если Объект.ПолучатьОрганизациюИзНастроек Тогда
		Возврат ПолучитьЗначениеСвойстваОбъектаДФормы("GLN", Организация);
	Иначе
		ВОзврат Объект.GLNОрганизацииПОУмолчанию;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ПолучитьGLNТочкиДоставки(Грузополучатель, СОобщать = Ложь)
		
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();	
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Грузополучатель);
	Отбор.Тип = "GLN";
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
	
	Если Запрос.Результат=0 тогда
		Если Сообщать Тогда
			Сообщить("Не удалось получить GLN Точки доставки! Документ не выгружен!");
		Иначе
		КонецЕсли;
		Возврат Неопределено;
	Иначе
		Свойство = Запрос.Содержимое;		
		GLN = Свойство.ИндексированныйАтрибут1;//gln
		Возврат GLN;
	КонецЕсли;

	
	Если Объект.МестоПоискаПартнера = "1" Тогда
		//посвойству
		Возврат ПолучитьЗначениеСвойстваОбъектаДФормы(СокрЛП(Объект.Партнер_Поле),Грузополучатель);
	ИначеЕсли Объект.МестоПоискаПартнера = "2" Тогда
		GLNТочкиДоставки = ПолучитьGLNТочкиДоставкиСервер(Грузополучатель);
		Если ЗначениеЗаполнено(GLNТочкиДоставки) Тогда
			ВОзврат GLNТочкиДоставки;
		КонецЕсли;//пореквизиту
	КонецЕсли;
	Возврат "";
КонецФункции
&НаКлиенте
Функция ПолучитьКодРегионаОрганизации(Организация)
	
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();	
	Отбор.Владелец = ЗначениеВСтрокуВнутрСервер(Организация);
	Отбор.Тип = "GLN";
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
	
	Если Запрос.Результат=0 тогда
		Сообщить(Запрос.Сообщение);
		Возврат Неопределено;
	Иначе
		Свойство = Запрос.Содержимое;		
		GLN = Свойство.ИндексированныйАтрибут3;//gln
		Возврат GLN;
	КонецЕсли;

КонецФункции
&НаКлиенте
Функция ПолучитьFNSidКонтрагента(Контрагент)
	
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();	
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Контрагент);
	Отбор.Тип = "GLN";
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
	
	Если Запрос.Результат=0 тогда
		Сообщить("Не удалось получить FNS ID Контрагента! Документ не выгружен!");
		Возврат Неопределено;
	Иначе
		Свойство = Запрос.Содержимое;		
		GLN = Свойство.ИндексированныйАтрибут2;//fns_id
		Возврат GLN;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ПолучитьFNSidОрганизации(Организация)
	
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();	
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Организация);
	Отбор.Тип = "GLN";
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
	
	Если Запрос.Результат=0 тогда
		Сообщить("Не удалось получить GLN Организации! Документ не выгружен!");
		Возврат Неопределено;
	Иначе
		Свойство = Запрос.Содержимое;		
		GLN = Свойство.ИндексированныйАтрибут2;//fns-id
		Возврат GLN;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ПолучитьКодРегионаКонтрагента(Контрагент)
	
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();	
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Контрагент);
	Отбор.Тип = "GLN";
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
	
	Если Запрос.Результат=0 тогда
		Сообщить(Запрос.Сообщение);
		Возврат Неопределено;
	Иначе
		Свойство = Запрос.Содержимое;		
		GLN = Свойство.ИндексированныйАтрибут3;//gln
		Возврат GLN;
	КонецЕсли;

КонецФункции
&НаКлиенте
Функция ПолучитьКодТовара(НаимКод, Номенклатура) Экспорт
	СтрокиСпособовПоиска = Объект.СпособыПоискаНоменклатуры.НайтиСтроки(Новый СТруктура("ТегДляПоиска", НаимКод));
	Для Каждого СТрокаПоискаНоменклатуры Из СтрокиСпособовПоиска Цикл
		МестоПОискаКонтрагента = СТрокаПоискаНоменклатуры.МестоПОиска;
		Если МестоПОискаКонтрагента = "По реквизиту" Тогда
			ЗначениеКода =  СокрЛП(ПолучитьДанныеИзРеквизитаОбъекта(Номенклатура,СТрокаПоискаНоменклатуры.ПолеДляПОиска));
			Если ЗначениеЗаполнено(ЗначениеКода) Тогда
				Возврат ЗначениеКода;
			КонецЕсли;
		ИначеЕсли МестоПОискаКонтрагента = "По РС Дополнительные сведения" Тогда
			ЗначениеКода =  СокрЛП(ПолучитьЗначениеСвойстваОбъектаДФормы(СТрокаПоискаНоменклатуры.ПолеДляПОиска,Номенклатура));
			Если ЗначениеЗаполнено(ЗначениеКода) Тогда
				Возврат ЗначениеКода;
			КонецЕсли;
		ИначеЕсли МестоПОискаКонтрагента = "По справонику Дополнительные реквизиты" Тогда
			ЗначениеКода =  ПолучитьЗначениеДопРеквизитаНоменклатуры(Номенклатура, СТрокаПоискаНоменклатуры.ПолеДляПОиска);
			Если ЗначениеЗаполнено(ЗначениеКода) Тогда
				Возврат ЗначениеКода;
			КонецЕсли;
		ИначеЕсли МестоПОискаКонтрагента = "По РС Штрихкоды" Тогда
			Штрихкод = ПолучитьШтрихкодНоменклатуры(Номенклатура,СТрокаПоискаНоменклатуры.ПолеДляПОиска);
			Если ЗначениеЗаполнено(Штрихкод) Тогда 
				Возврат Штрихкод
			КонецЕсли;
		ИначеЕсли МестоПОискаКонтрагента = "Во внешней бд" Тогда
			Возврат ПолучитьКодИзБД(Номенклатура, СТрокаПоискаНоменклатуры.ПолеДляПОиска);
		Иначе
			Возврат ПолучитьКОдИзНоменклатурыПоставщиков(Номенклатура);
		КонецЕсли;			
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции
Функция ПолучитьЗначениеДопРеквизитаНоменклатуры(Номенклатура,НаимСв)
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(НаимСв);
	СтрокаСвойство = Номенклатура.ДополнительныеРеквизиты.Найти(Свойство);
	Попытка
		Значение = СтрокаСвойство.Значение;
	Исключение
		Значение = "";
	КонецПопытки;
	Возврат Значение;
КонецФункции
&НаКлиенте
Функция ПолучитьКодИзБД(Номенклатура, Поле)
	
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();	
	Отбор.Объект = ЗначениеВСтрокуВнутрСервер(Номенклатура);
	Отбор.Тип = "GOODSCODE";
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСвойство(Отбор);	
	
	Если Запрос.Результат=0 тогда
		Сообщить("Не удалось получить код " + Поле + " номенклатуры "+Номенклатура+"! Документ не выгружен!");
		Возврат Неопределено;
	Иначе
		Свойство = Запрос.Содержимое;
		Если Поле = "КодПокупателя" Тогда
			Код = Свойство.ИндексированныйАтрибут1;
		ИначеЕсли Поле = "КодПоставщика" Тогда
			Код = Свойство.ИндексированныйАтрибут2;
		ИначеЕсли Поле = "Штрихкод" Тогда
			Код = Свойство.ИндексированныйАтрибут3;
		КонецЕсли;
		
		Возврат Код;
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура ВыбратьВсё(Команда)
	Для каждого ДанныеСтроки Из ЗаголовкиДокументов Цикл
		ДанныеСтроки.Флажок = Истина;
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для каждого ДанныеСтроки Из ЗаголовкиДокументов Цикл
		ДанныеСтроки.Флажок = Ложь;
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура КонтрагентФильтрПриИзменении(Элемент)
	ОбновитьТаблицу();
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьТаблицу()
	ЗаголовкиДокументов.Очистить();	
	Элементы.ЗаголовкиДокументовСтатусФНС.Видимость = Ложь;
	Элементы.ЗаголовкиДокументовСтатус.Видимость = Ложь;
	Элементы.ЗаголовкиДокументовfile_name.Видимость = Ложь;
	Элементы.ЗаголовкиДокументовДокумент.Видимость= Истина;
	//Если Загр = 1 Тогда
	//	Элементы.ЗаголовкиДокументовfile_name.Видимость = Истина;
	//	//ЗаполнитьТаблицуSOAP(ПоследнийТипДействия,ДатаНачала,ДатаОкончания,ЗаголовкиДокументов,КонтрагентФильтр);
	//ИначеЕсли Загр = 2 Тогда
	//	Элементы.ЗаголовкиДокументовДокумент.Видимость= Истина;
	//	Элементы.ЗаголовкиДокументовСтатус.Видимость = Истина;
	//	Если ПоследнийТипДействия = "FNS_ARCHIVE" Тогда
	//		Элементы.ЗаголовкиДокументовСтатусФНС.Видимость = Истина;
	//	КонецЕсли;
		ЗаполнитьТаблицуЭкспортируемымиДокументами(Объект.ПоследнийТипДействия);
	//ИначеЕсли Загр = 3 Тогда
	//	Элементы.ЗаголовкиДокументовСтатус.Видимость = Истина;
	//	Элементы.ЗаголовкиДокументовfile_name.Видимость = Истина;
	//	Элементы.ЗаголовкиДокументовДокумент.Видимость= Истина;
	//	//ЗаполнитьТаблицуФайлами(ПоследнийТипДействия,ДатаНачала,ДатаОкончания,ЗаголовкиДокументов,КонтрагентФильтр);
	//КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВосстановитьНастройкиПодключения();
	ПолучитьОбщиеИнструменты();
	ВосстановитьНастройкиПриОткрытии();
	ПриОткрытииНаСервере();			
	Если Объект.Период Тогда
		ЭтаФорма.Элементы.КонецПериода.Видимость = Истина;
	Иначе
		ЭтаФорма.Элементы.КонецПериода.Видимость = Ложь;
	КонецЕсли;
	ОбновитьСписокИсходящихДокументов();
	КонтрагентФильтр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	Если Объект.ИспользоватьSSCC Тогда
		ЭтаФорма.Элементы.ЗаголовкиДокументов4ОткрытьОкноSSCC.Видимость = Истина;
	Иначе
		ЭтаФорма.Элементы.ЗаголовкиДокументов4ОткрытьОкноSSCC.Видимость = Ложь;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		ПутьКМодулюНаСервереLinux = "c:\...";//если сервер под Linux, то путь
	Иначе
		ПутьКМодулюНаСервереLinux = "";//иначе пустая строка
	КонецЕсли;
	
	МодульКриптографии = "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider";
	ТипМодуляКриптографии = 75;
	
КонецПроцедуры

Процедура ВосстановитьНастройкиПодключения()
	Объект.ЭДИ_ИмяТаблицы = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ИмяТаблицы", "КлючЭДИ_ИмяТаблицы", "ЭДИ_ИмяТаблицы");
	Объект.ЭДИ_КаталогВнешнейБазыДанных = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_КаталогВнешнейБазыДанных", "КлючЭДИ_КаталогВнешнейБазыДанных", "ЭДИ_КаталогВнешнейБазыДанных");
	Объект.ЭДИ_ПарольБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ПарольБД", "КлючЭДИ_ПарольБД", "ЭДИ_ПарольБД");
	Объект.ЭДИ_ПользовательБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ПользовательБД", "КлючЭДИ_ПользовательБД", "ЭДИ_ПользовательБД");
	Объект.ЭДИ_ПортБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_ПортБД", "КлючЭДИ_ПортБД",  "ЭДИ_ПортБД");
	Объект.ЭДИ_РежимРаботыБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_РежимРаботыБД", "КлючЭДИ_РежимРаботыБД",  "ЭДИ_РежимРаботыБД");
	Объект.ЭДИ_СерверБД = ХранилищеОбщихНастроек.Загрузить("ОбъектЭДИ_СерверБД", "КлючЭДИ_СерверБД",  "ЭДИ_СерверБД");	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОбщиеИнструменты()
	ЭДИ_ОбщиеИнструменты = Новый COMОбъект("EsTools1C.ExtTools");
	ПодключитьсяКБДПриОткрытии();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьсяКБДПриОткрытии()
	ПолучательБД_Подключен=ложь;   
	ЭДИ_ПараметрSQLITE=0;
	
	Если Объект.ЭДИ_РежимРаботыБД = "sqlite" тогда 
		ЭДИ_ПараметрSQLITE = 0;
		ЭДИ_СтрокаПодключения = СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных);
	ИначеЕсли Объект.ЭДИ_РежимРаботыБД = "MY" тогда 
		ЭДИ_СтрокаПодключения = "DRIVER={MySQL ODBC 5.3 ANSI Driver};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Port="+СокрЛП(Объект.ЭДИ_ПортБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";User="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Password="+СокрЛП(Объект.ЭДИ_ПарольБД)+";";  //MySQL
	ИначеЕсли Объект.ЭДИ_РежимРаботыБД = "PG" тогда  
		ЭДИ_СтрокаПодключения = "DSN=PostgreSQL30;Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Port="+СокрЛП(Объект.ЭДИ_ПортБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";UID="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";";   //PostgreSQL
	иначеЕсли Объект.ЭДИ_РежимРаботыБД = "MSNC10" тогда  
		ЭДИ_СтрокаПодключения = "Driver={SQL Server Native Client 10.0};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";Uid="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";"
	иначеЕсли Объект.ЭДИ_РежимРаботыБД = "MSNC11" тогда  
		ЭДИ_СтрокаПодключения = "Driver={SQL Server Native Client 11.0};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";Uid="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";"
	иначеЕсли Объект.ЭДИ_РежимРаботыБД = "MSSSD" тогда  
		ЭДИ_СтрокаПодключения = "Driver={SQL Server};Server="+СокрЛП(Объект.ЭДИ_СерверБД)+";Database="+СокрЛП(Объект.ЭДИ_КаталогВнешнейБазыДанных)+";Uid="+СокрЛП(Объект.ЭДИ_ПользовательБД)+";Pwd="+СокрЛП(Объект.ЭДИ_ПарольБД)+";"
	КонецЕСлИ; 
	
	Если ЭДИ_СтрокаПодключения="" тогда
		Предупреждение("Нет настроек подключения к БД!");
		Возврат;
	КонецеСли;

	ИмяТаблицыПолучатель = СокрЛП(Объект.ЭДИ_ИмяТаблицы);
	
	Попытка
		ЭДИ_РаботаСБазойДанных = ЭДИ_ОбщиеИнструменты.ПолучитьВнешнююБазуДанных(ЭДИ_СтрокаПодключения, Объект.ЭДИ_РежимРаботыБД, ЭДИ_ПараметрSQLITE, ИмяТаблицыПолучатель);
		Если ЭДИ_РаботаСБазойДанных.ЕстьОшибка=1 тогда
			ПолучательБД_Подключен = Ложь;
			Сообщить("Ошибка подключение к базе данных по причине: " + ЭДИ_РаботаСБазойДанных.СообщениеОшибки + ". Проверьте параметры подключения на странице настройки.");
		иначе	
			ПолучательБД_Подключен = Истина;			
		КонецЕСЛИ;
	исключение
		ПолучательБД_Подключен = Ложь;
		Сообщить(Описаниеошибки());
	Конецпопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокИсходящихДокументов(Тип = "")
	
	Если ЗначениеЗаполнено(Тип) Тогда
		
		Объект.ПоследнийТипДействия = Тип;
		ЗаполнитьТаблицуЭкспортируемымиДокументами(Тип);
		
	Иначе
		
		Счетчик = 0;
		ТаблицаЗаполнена = Ложь;
		
		Если Объект.ВыгружатьORDRSP Тогда
			
			ЭтаФорма.Элементы.ORDRSP.Видимость = Истина;
			Счетчик = Счетчик + 1;
			
			Если НЕ ТаблицаЗаполнена Тогда
				
				Объект.ПоследнийТипДействия = "ORDRSP";
				ТаблицаЗаполнена = Истина;
				
			КонецЕсли;
			
		Иначе
			ЭтаФорма.Элементы.ORDRSP.Видимость =  Ложь;
		КонецЕсли;	
		
		Если Объект.ВыгружатьORDER Тогда
			
			ЭтаФорма.Элементы.ORDER.Видимость = Истина;
			
			Если НЕ ТаблицаЗаполнена Тогда
				
				Объект.ПоследнийТипДействия = "ORDER";				
				ТаблицаЗаполнена = Истина;
				
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
			
		Иначе
			ЭтаФорма.Элементы.ORDER.Видимость =  Ложь;
		КонецЕсли;
		
		Если Объект.ВыгружатьALCDES Тогда
			
			ЭтаФорма.Элементы.ALCDES.Видимость = Истина;
			
			Если НЕ ТаблицаЗаполнена Тогда
				
				Объект.ПоследнийТипДействия = "ALCDES";				
				ТаблицаЗаполнена = Истина;
				
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
			
		Иначе
			ЭтаФорма.Элементы.ALCDES.Видимость =  Ложь;
		КонецЕсли;
		
		Если Объект.ВыгружатьINVOICEКОР Тогда
			
			Счетчик = Счетчик + 1;
			ЭтаФорма.Элементы.INVOICEКОР.Видимость = Истина;
			
			Если НЕ ТаблицаЗаполнена Тогда
				
				Объект.ПоследнийТипДействия = "INVOICEКОР";				
				ТаблицаЗаполнена = Истина;
				
			КонецЕсли;
			
		Иначе
			ЭтаФорма.Элементы.INVOICEКОР.Видимость =  Ложь;
		КонецЕсли;
		
		Если Объект.ВыгружатьRECADV Тогда
			
			Счетчик = Счетчик + 1;
			ЭтаФорма.Элементы.RECADV.Видимость = Истина;
			
			Если НЕ ТаблицаЗаполнена Тогда
				
				Объект.ПоследнийТипДействия = "RECADV";				
				ТаблицаЗаполнена = Истина;
				
			КонецЕсли;

		Иначе
			ЭтаФорма.Элементы.RECADV.Видимость =  Ложь;
		КонецЕсли;
		
		Если Объект.ВыгружатьDESADV Тогда
			
			ЭтаФорма.Элементы.DESADV.Видимость = Истина;
			Счетчик = Счетчик + 1;
			
			Если НЕ ТаблицаЗаполнена Тогда
				
				Объект.ПоследнийТипДействия = "DESADV";				
				ТаблицаЗаполнена = Истина;
				
			КонецЕсли;

		Иначе
			ЭтаФорма.Элементы.DESADV.Видимость =  Ложь;
		КонецЕсли;
		
		Если Объект.ВыгружатьINVOICE Тогда
			
			ЭтаФорма.Элементы.INVOICE.Видимость = Истина;
			Счетчик = Счетчик + 1;
			
			Если НЕ ТаблицаЗаполнена Тогда
				
				Объект.ПоследнийТипДействия = "INVOICE";
				ТаблицаЗаполнена = Истина;
				
			КонецЕсли;

		Иначе
			ЭтаФорма.Элементы.INVOICE.Видимость =  Ложь;
		КонецЕсли;

		
		Если Объект.ВыгружатьFNS_ARCHIVE Тогда
			Счетчик = Счетчик + 1;
			ЭтаФорма.Элементы.FNS_ARCHIVE.Видимость = Истина;
			Если НЕ ТаблицаЗаполнена Тогда
				Объект.ПоследнийТипДействия = "FNS_ARCHIVE";
				//ЗаполнитьТаблицуЭкспортируемымиДокументами("FNS_ARCHIVE");
				ТаблицаЗаполнена = Истина;
			КонецЕсли;

		Иначе
			ЭтаФорма.Элементы.FNS_ARCHIVE.Видимость =  Ложь;
		КонецЕсли;
		Если Объект.ВыгружатьTORG12_SELLER Тогда
			ЭтаФорма.Элементы.TORG12_SELLER.Видимость = Истина;
			Счетчик = Счетчик + 1;
			Если НЕ ТаблицаЗаполнена Тогда
				Объект.ПоследнийТипДействия = "TORG12_SELLER";
				//ЗаполнитьТаблицуЭкспортируемымиДокументами("TORG12_SELLER");
				ТаблицаЗаполнена = Истина;
			КонецЕсли;
		Иначе
			ЭтаФорма.Элементы.TORG12_SELLER.Видимость =  Ложь;
		КонецЕсли;
		
		Если Объект.ВыгружатьУПД Тогда
			ЭтаФорма.Элементы.ON_SCHFDOPPR.Видимость = Истина;
			Счетчик = Счетчик + 1;
			Если НЕ ТаблицаЗаполнена Тогда
				Объект.ПоследнийТипДействия = "ON_SCHFDOPPR";				
				ТаблицаЗаполнена = Истина;
			КонецЕсли;
		Иначе
			ЭтаФорма.Элементы.ON_SCHFDOPPR.Видимость =  Ложь;
		КонецЕсли;
		
		Если Объект.ВыгружатьУКД Тогда
			ЭтаФорма.Элементы.ON_KORSCHFDOPPR.Видимость = Истина;
			Счетчик = Счетчик + 1;
			Если НЕ ТаблицаЗаполнена Тогда
				Объект.ПоследнийТипДействия = "ON_KORSCHFDOPPR";				
				ТаблицаЗаполнена = Истина;
			КонецЕсли;
		Иначе
			ЭтаФорма.Элементы.ON_KORSCHFDOPPR.Видимость =  Ложь;
		КонецЕсли;
		
		Если Счетчик = 0 Тогда
			Сообщить("Не указано ни одного типа документа для выгрузки. Проверьте настройки");		
			ЭтаФорма.Закрыть();
		Иначе
			Объект.ИсходящиеОткрыта = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтрокаМеждуПодстрокамиСтроки(ИсходнаяСтрока,СтрокаОт="",СтрокаДо="") Экспорт
	Строка = ИсходнаяСтрока;
	Если ЗначениеЗаполнено(СтрокаОт) Тогда
		Если Найти(Строка,СтрокаОт) = 0 Тогда
			Возврат "";
		КонецЕсли; 
		Строка = Сред(Строка,Найти(Строка,СтрокаОт)+СтрДлина(СтрокаОт));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДо) Тогда
		Если Найти(Строка,СтрокаДо) = 0 Тогда
			Возврат "";
		КонецЕсли;
		Строка = Лев(Строка,Найти(Строка,СтрокаДо)-1);
	КонецЕсли;
	
	Возврат Строка;
КонецФункции

&НаКлиенте
Функция ListMBEx(ТипВходящих,ДатаНачалаВходящих,ДатаОкончанияВходящих, ItemFrom="1",ItemTo="4000",DocumentStatus="N",PartnerIln="",DocumentVersion="",DocumentStandard="XML",DocumentTest="")
	
	Метод = "ListMBEx";
	Timeout = "3000";
	ЗапросSOAP = "<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:urn=""urn:wsedi"">
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|	  <urn:listMBEx>
	|		 <name>"+Объект.Логин+"</name>
	|		 <password>"+Объект.Пароль+"</password>
	|		 <partnerILN>"+PartnerIln+"</partnerILN>
	|		 <documentType>"+ТипВходящих+"</documentType>
	|		 <documentVersion>"+DocumentVersion+"</documentVersion>
	|		 <documentStandard>"+DocumentStandard+"</documentStandard>
	|		 <documentTest>"+DocumentTest+"</documentTest>
	|		 <dateFrom>"+Формат(ДатаНачалаВходящих,"ДФ=yyyy-MM-dd; ДП=0000-00-00")+"</dateFrom>
	|		 <dateTo>"+Формат(ДатаОкончанияВходящих,"ДФ=yyyy-MM-dd; ДП=0000-00-00")+"</dateTo>
	|		 <itemFrom>"+ItemFrom+"</itemFrom>
	|		 <itemTo>"+ItemTo+"</itemTo>
	|		 <documentStatus>"+DocumentStatus+"</documentStatus>
	|		 <timeout>"+Timeout+"</timeout>
	|	  </urn:listMBEx>
	|   </soapenv:Body>
	|</soapenv:Envelope>";
 	
	
	РаботаСоСтатусами = ЭДИ_ОбщиеИнструменты.ПолучитьМодульСтатусов();
	ПараметрыЗапроса = РаботаСоСтатусами.ПолучитьПараметрыЗапроса();
	ПараметрыЗапроса.Метод 	= Метод;
	ПараметрыЗапроса.Запрос = ЗапросSOAP;
	ПараметрыЗапроса.Адрес 	= СтрокаМеждуПодстрокамиСтроки(Объект.серверСОАП,?(Найти(Объект.серверСОАП,"https://") = 0,"http://","https://"),"/");//"service.ediweb.ru";
	ПараметрыЗапроса.Сервер = Объект.серверСОАП;//"https://service.ediweb.ru/wsedi//services/EDIServiceSoap";//ПараметрыСеанса.Получить("СерверСОАП");
	ПараметрыЗапроса.Таймаут = 30;
	Схема = "listMBEx;ns1:Cnt;Содержание";
	Схема = Схема + Символ(13) + "listMBEx;ns1:Res;Результат";
	Схема = Схема + Символ(13) + "listMBEx;ns2:Cnt;Содержание";
	Схема = Схема + Символ(13) + "listMBEx;ns2:Res;Результат";
	
	ПараметрыЗапроса.Схема = Схема;
	
	Запрос = РаботаСоСтатусами.SendQuerySOAP(ПараметрыЗапроса, Объект.temp);
	
	Если Запрос.Результат=0 Тогда
		
		Сообщить(Запрос.Сообщение);  
  		Возврат Неопределено;
		
	КонецЕсли;
	
	Содержание = Запрос.Содержимое.Содержание;
	Возврат Содержание;
		
КонецФункции
&НаКлиенте
Функция ChangeDocumentStatus(tracking_id, status="R")
	
	Метод = "ChangeDocumentStatus";
	ЗапросSOAP = "<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:urn=""urn:wsedi"">
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|	  <urn:changeDocumentStatus>
	|		 <name>"+Объект.Логин+"</name>
	|		 <password>"+Объект.Пароль+"</password>
	|		 <trackingId>"+tracking_id+"</trackingId>
	|		 <status>"+status+"</status>
	|	  </urn:changeDocumentStatus>
	|   </soapenv:Body>
	|</soapenv:Envelope>";

	
	РаботаСоСтатусами = ЭДИ_ОбщиеИнструменты.ПолучитьМодульСтатусов();
	ПараметрыЗапроса = РаботаСоСтатусами.ПолучитьПараметрыЗапроса();
	ПараметрыЗапроса.Метод 	= Метод;
	ПараметрыЗапроса.Запрос = ЗапросSOAP;
	ПараметрыЗапроса.Адрес 	= СтрокаМеждуПодстрокамиСтроки(Объект.серверСОАП,?(Найти(Объект.серверСОАП,"https://") = 0,"http://","https://"),"/");//"service.ediweb.ru";
	ПараметрыЗапроса.Сервер = Объект.серверСОАП;//"https://service.ediweb.ru/wsedi//services/EDIServiceSoap";//ПараметрыСеанса.Получить("СерверСОАП");
	ПараметрыЗапроса.Таймаут = 30;
	
	Схема = "changeDocumentStatus;ns1:cnt;Содержание";
	Схема = Схема + Символ(13) + "changeDocumentStatus;ns1:res;Результат";
	Схема = Схема + Символ(13) + "changeDocumentStatus;ns2:cnt;Содержание";
	Схема = Схема + Символ(13) + "changeDocumentStatus;ns2:res;Результат";
	ПараметрыЗапроса.Схема = Схема;
	
	Запрос = РаботаСоСтатусами.SendQuerySOAP(ПараметрыЗапроса, Объект.temp);
	
	Если Запрос.Результат=0 Тогда
		
		Сообщить(Запрос.Сообщение);  
  		Возврат Неопределено;
		
	КонецЕсли;
	
	Результат = Запрос.Содержимое.Результат;
	
	Возврат Результат;
	
КонецФункции
&НаКлиенте
Функция SendBinary(partner_iln, ТипОтп, ИмяФайла, Данные)
	//ОбъектОбработка = РеквизитФормыВЗначение("Объект");  		
	
	Метод = "SendBinary";
	ЗапросSOAP = "<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:urn=""urn:wsedi"">
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|	  <urn:sendBinary>
	|		 <name>"+Объект.Логин+"</name>
	|		 <password>"+Объект.Пароль+"</password>
	|		 <partnerIln>"+partner_iln+"</partnerIln>
	|		 <documentType>"+ТипОтп+"</documentType>
	|		 <fileName>"+ИмяФайла+"</fileName>
	|		 <data>"+Данные+"</data>
	|	  </urn:sendBinary>
	|   </soapenv:Body>
	|</soapenv:Envelope>";
 	
	РаботаСоСтатусами = ЭДИ_ОбщиеИнструменты.ПолучитьМодульСтатусов();
	ПараметрыЗапроса = РаботаСоСтатусами.ПолучитьПараметрыЗапроса();
	ПараметрыЗапроса.Метод 	= Метод;
	ПараметрыЗапроса.Запрос = ЗапросSOAP;
	ПараметрыЗапроса.Адрес 	= СтрокаМеждуПодстрокамиСтроки(Объект.серверСОАП,?(Найти(Объект.серверСОАП,"https://") = 0,"http://","https://"),"/");//"service.ediweb.ru";
	ПараметрыЗапроса.Сервер = Объект.серверСОАП;//"https://service.ediweb.ru/wsedi//services/EDIServiceSoap";//ПараметрыСеанса.Получить("СерверСОАП");
	ПараметрыЗапроса.Таймаут = 30;
	
	
	//содержание cnt
	//результат res
	//имя файла
	//данные
	ВОзврат РаботаСоСтатусами.SendQuerySOAP(ПараметрыЗапроса).Содержимое.результат;
	
КонецФункции

&НаКлиенте
Функция ReceiveBinary(partner_iln, document_type, tracking_id)
	//ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Метод = "ReceiveBinary";
	ЗапросSOAP = "<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:urn=""urn:wsedi"">
	|   <soapenv:Header/>
	|   <soapenv:Body>
	|	  <urn:receiveBinary>
	|		 <name>"+Объект.Логин+"</name>
	|		 <password>"+Объект.Пароль+"</password>
	|		 <partnerILN>"+partner_iln+"</partnerILN>
	|		 <documentType>"+document_type+"</documentType>
	|		 <trackingId>"+tracking_id+"</trackingId>
	|	  </urn:receiveBinary>
	|   </soapenv:Body>
	|</soapenv:Envelope>";

	
	РаботаСоСтатусами = ЭДИ_ОбщиеИнструменты.ПолучитьМодульСтатусов();
	ПараметрыЗапроса = РаботаСоСтатусами.ПолучитьПараметрыЗапроса();
		
	ПараметрыЗапроса.Метод 	= Метод;
	ПараметрыЗапроса.Запрос = ЗапросSOAP;
	ПараметрыЗапроса.Адрес 	= СтрокаМеждуПодстрокамиСтроки(Объект.серверСОАП,?(Найти(Объект.серверСОАП,"https://") = 0,"http://","https://"),"/");//"service.ediweb.ru";
	ПараметрыЗапроса.Сервер = Объект.серверСОАП;//"https://service.ediweb.ru/wsedi//services/EDIServiceSoap";//ПараметрыСеанса.Получить("СерверСОАП");
	ПараметрыЗапроса.Таймаут = 30;
	Схема = "receiveBinary;ns1:fileData;ДанныеФайла";
	Схема = Схема + Символ(13) + "receiveBinary;ns1:res;Результат";
	Схема = Схема + Символ(13) + "receiveBinary;ns2:res;Результат";
	Схема = Схема + Символ(13) + "receiveBinary;ns2:fileData;ДанныеФайла";
	ПараметрыЗапроса.Схема = Схема;
	
	Запрос = РаботаСоСтатусами.SendQuerySOAP(ПараметрыЗапроса, Объект.temp);
	
	Если Запрос.Результат=0 Тогда
		
		Сообщить(Запрос.Сообщение);  
  		Возврат Неопределено;
		
	КонецЕсли;
	
	ДанныеФайла = Запрос.Содержимое.ДанныеФайла;
	Возврат ДанныеФайла;

КонецФункции

&НаКлиенте
Процедура ВыгрузитьПоSOAPКнопкаНажатие(Команда)
	
	Для Каждого СтрокаТ из ЗаголовкиДокументов Цикл
		
		ОбработкаПрерыванияПользователя();
		Если СТрокат.Флажок Тогда
			ВыгрузитьПоSOAP(СтрокаТ);
		КонецЕсли;
		
	КонецЦикла;
	ОбновитьТаблицу();
КонецПроцедуры
&НаКлиенте
Процедура ВосстановитьНастройкиПриОткрытии()
	
	Организация = ПолучитьТекущуюОрганизацию();
	Если ЗначениеЗаполнено(Организация) Тогда
		Объект.Организация = Организация;
	Иначе
		Сообщить("Не удалось получить текущую орагнизацию");
		Возврат;
	КонецЕсли;

	
	ТекущийПользователь = ПолучитьТекущегоПользователя();
	ПользовательСтрока = ЗначениеВСтрокуВнутрСервер(ТекущийПользователь);
	Сообщить("Получаем настройки для пользователя " + ТекущийПользователь);
	
	Отбор = ЭДИ_РаботаСБазойДанных.ПолучитьПустуюЗапись();	
	Отбор.Объект = ПользовательСтрока;			
	Отбор.Владелец = ЗначениеВСтрокуВнутрСервер(Объект.Организация);
	Отбор.Тип = "SETTINGS";
	Запрос = ЭДИ_РаботаСБазойДанных.ПолучитьСписокСвойств(Отбор);	
	Если Запрос.Результат=0 тогда
		Сообщить("Не удалось получить настройки для данного пользователя. Возможно, это первый случай использования данного модуля текущим пользователем. Ошибка 01");//нет записей по заданному отбору
		Возврат;
	Иначе
		СписокДанных = Запрос.Содержимое;
		Для Сч=0 По СписокДанных.Верхнийиндекс() Цикл
			Свойство = СписокДанных.Получить(Сч);
			Попытка
				ВосстановитьНастройкиПриОткрытииСервер(Свойство.ДопАтрибуты);	
			Исключение
				СОобщить(ОписаниеОшибки());
			КонецПопытки;
			Продолжить
		КонецЦикла; 
		//Возврат (Сч);
	КонецЕсли;
		
	КонецПроцедуры
&НаКлиенте
Процедура СохранитьНастройкиПриЗакрытии()
	СохранитьНастройкиПриЗакрытииСервер();		
КонецПроцедуры
&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
//	ОбновитьСписокИсходящихДокументов(ЭтаФорма.ПодчиненныеЭлементы.Исходящие.ТекущаяСтраница.Имя);
КонецПроцедуры
&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
//	ОбновитьСписокИсходящихДокументов(ЭтаФорма.ПодчиненныеЭлементы.Исходящие.ТекущаяСтраница.Имя);
КонецПроцедуры
&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьСписокИсходящихДокументов(Объект.ПоследнийТипДействия);
КонецПроцедуры
/////////////////////////

////////////Серверные методы. Обращение из них к библиотеке, или внешне бд исключено
&НаСервере
Функция ПолучитьТипЗаказа()
	Попытка
		Если Объект.Бухгалтерия Тогда
			
			ТипДокумента = "РеализацияТоваровУслуг";
				
		Иначе
			ДокуметЗаказ = Документы.ЗаказКлиента.ПустаяСсылка();
			ТипДокумента = "ЗаказКлиента";
		КонецЕсли;
	Исключение
		ДокументЗаказ = Документы.ЗаказПокупателя.ПустаяСсылка();
		ТипДокумента = "ЗаказПокупателя";
	КонецПопытки;
	Возврат ТипДокумента;
КонецФункции

Функция СопоставитьСтрокиДокументаСПаллетнымЛистом(СтруктураТЧ, СтруктураПаллет)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("КодSSCC");
	ТаблицаЗначений.Колонки.Добавить("КоличествоНаПалете");
	ТаблицаЗначений.Колонки.Добавить("Номенклатура");
	ТаблицаЗначений.Колонки.Добавить("ВесПалеты");
	КоличествоНоменклатур = СтруктураПаллет.Количество();
	
	Для Сч = 0 По КоличествоНоменклатур - 1 Цикл		
		
		КлючНоменклатуры = "Стр" + Строка(сч);
		Номенклатура = СтруктураПаллет[КлючНоменклатуры].Номенклатура;
		СтруктураSSCC = СтруктураПаллет[КлючНоменклатуры].СтруктураSSCC;
		КоличествоПаллет = СтруктураSSCC.Количество();
		
		Для СчПалет = 0 По КоличествоПаллет - 1 Цикл
			
			КлючПалеты = "Стр" + Строка(СчПалет);
			Палета = СтруктураSSCC[КлючПалеты];
			НоваяСтрокаSSCC = ТаблицаЗначений.Добавить();
			НоваяСтрокаSSCC.КодSSCC = Палета.КодSSCC;
			НоваяСтрокаSSCC.КоличествоНаПалете = Палета.Количество;
			НоваяСтрокаSSCC.Номенклатура = Номенклатура;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаЗначений.Сортировать("КодSSCC");
	ПредПалета = Неопределено;
	ВесПалеты = 0;
	
	Для Каждого СтрокаПалета из ТаблицаЗначений ЦИкл
		
		Если СтрокаПалета.КодSSCC = ПредПалета Тогда
			
			КоличествоВКоробке = СтрокаПалета.Номенклатура.КоэффициентЕдиницыДляОтчетов;
			Коробок =  СтрокаПалета.КоличествоНаПалете;
			КоличествоШтук = КоличествоВКоробке*Коробок;
			Вес1Шт = СтрокаПалета.Номенклатура.ВесЗнаменатель;
			
			Если Не ЗначениеЗаполнено(Вес1Шт) Тогда
				Сообщить("Для номенклатуры " + СтрокаПалета.Номенклатура + " не указан вес. Выгрузка невозможна.");
			КонецЕсли;
			
			ВесНаПалете = КоличествоШтук*Вес1Шт;
			ВесПалеты = ВесПалеты+ВесНаПалете;
			
		Иначе
			
			Если ЗначениеЗаполнено(ПредПалета) Тогда
				
				СтрокиЭтойПалеты = ТаблицаЗначений.НайтиСтроки(Новый Структура("КодSSCC",ПредПалета));
				
				Для каждого СтрокаПредПалета Из СтрокиЭтойПалеты ЦИкл
					СтрокаПредПалета.ВесПалеты = ВесПалеты;
				КонецЦикла;
				
			КонецЕсли;
			
			ВесПалеты = 0;
			ПредПалета = СтрокаПалета.КодSSCC;
			КоличествоВКоробке = СтрокаПалета.Номенклатура.КоэффициентЕдиницыДляОтчетов;
			Коробок =  СтрокаПалета.КоличествоНаПалете;
			КоличествоШтук = КоличествоВКоробке*Коробок;
			Вес1Шт = СтрокаПалета.Номенклатура.ВесЗнаменатель;
			
			Если Не ЗначениеЗаполнено(Вес1Шт) Тогда
				Сообщить("Для номенклатуры " + СтрокаПалета.Номенклатура + " не указан вес. Выгрузка невозможна.");
			КонецЕсли;
			
			ВесНаПалете = КоличествоШтук*Вес1Шт;
			ВесПалеты = ВесПалеты+ВесНаПалете;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокиЭтойПалеты = ТаблицаЗначений.НайтиСтроки(Новый Структура("КодSSCC",ПредПалета));
				
	Для каждого СтрокаПредПалета Из СтрокиЭтойПалеты ЦИкл
		СтрокаПредПалета.ВесПалеты = ВесПалеты;
	КонецЦикла;
	
	КоличествоСтрокТЧ = СтруктураТЧ.Количество();
	
	Для сч = 0 По КоличествоСтрокТЧ - 1 Цикл
		
		Ключ = "Строка" + Строка(Сч);		
		СтрокаТЧ = СтруктураТЧ[Ключ];
		НоменклатураДок = СтрокаТЧ.Номенклатура;
		СТрокиSSCC = ТаблицаЗначений.НайтиСтроки(Новый СТруктура("Номенклатура", НоменклатураДок));
		СчПаллет = 0;
		SSCCСтруктура = Новый Структура;
		
		Для Каждого СтрокаSSCC Из СТрокиSSCC ЦИкл
			
			Ключ = "Строка" + Строка(СчПаллет);
			SSCCСтруктураСтрока = Новый Структура;
			SSCCСтруктураСтрока.Вставить("SSCC", СокрЛП(СтрокаSSCC.КодSSCC));
			SSCCСтруктураСтрока.Вставить("КоличествоНаПаллете", СтрокаSSCC.КоличествоНаПалете);
			SSCCСтруктураСтрока.Вставить("ВесПалеты",СтрокаSSCC.ВесПалеты);
			SSCCСтруктура.Вставить(Ключ,SSCCСтруктураСтрока); 
			СчПаллет = СчПаллет + 1;
			
		КонецЦикла;
		
		СтрокаТЧ.Вставить("SSCC", SSCCСтруктура);
		
	КонецЦикла;
	
	Возврат СТруктураТЧ;	
	
КонецФункции

Функция ПолучитьДокументы1С(Тип, ТипДокумента,ДатаНачала,ДатаОкончания, КОнтрагентФИльтр)
	СтруктураВозврата = Новый Структура;
	ТабЗаголовкиДокументов = ЗаголовкиДокументов;
	ТабЗаголовкиДокументов.Очистить();
	Если КонтрагентФильтр.Количество() > 0 Тогда
		Для Каждого КонтрагентДляФильтра Из КонтрагентФильтр ЦИкл
			ПолучитьДокументыЗапросом(Тип, ТипДокумента,ДатаНачала,ДатаОкончания, КонтрагентДляФильтра.Значение, СТруктураВОзврата);
		КонецЦикла;
	Иначе
		ПолучитьДокументыЗапросом(Тип, ТипДокумента,ДатаНачала,ДатаОкончания, КОнтрагентФИльтр, СТруктураВОзврата);
	КонецЕсли;
	Возврат СтруктураВозврата;
КонецФункции

Процедура ПолучитьДокументыЗапросом(Тип, ТипДокумента,ДатаНачала,ДатаОкончания, КонтрагентДляФильтра = Неопределено, СТруктураВОзврата)
	
	Запрос=новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.Текст = "ВЫБРАТЬ
	|"+	ТипДокумента + ".Ссылка КАК Ссылка,
	|"+	ТипДокумента + ".Контрагент КАК Контрагент
	|ИЗ
	|	Документ."+	ТипДокумента + " КАК "+	ТипДокумента + "
	|ГДЕ
	|" +ТипДокумента+".Дата >= &ДатаНачала
	| И " +ТипДокумента+".Дата <= &ДатаОкончания
	| И " +ТипДокумента+".Организация <= &Организация
	| И "+ТипДокумента+".ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	
	Если Тип = "ON_KORSCHFDOPPR" ТОгда
		
		Запрос.Текст = Запрос.Текст+"	И "+ТипДокумента+".Корректировочный = ИСТИНА";
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтрагентДляФильтра) Тогда
		Запрос.Текст = Запрос.Текст+";"
	Иначе
		Если ТипДокумента = "СчетФактураВыданный" Тогда
			Запрос.Текст = Запрос.Текст+"	И ("+ТипДокумента+".ДокументОснование.Контрагент = &Контрагент ИЛИ "+ТипДокумента+".ДокументОснование.Партнер = &Партнер);";
		Иначе
			Запрос.Текст = Запрос.Текст+"	И ("+ТипДокумента+".Контрагент = &Контрагент ИЛИ "+ТипДокумента+".Партнер = &Партнер);";
		КонецЕсли;
		Запрос.УстановитьПараметр("Контрагент",КонтрагентДляФильтра);
		Запрос.УстановитьПараметр("Партнер",КонтрагентДляФильтра.Партнер);
	КонецЕсли;
	Результат = Запрос.Выполнить().Выбрать();	
	сч = 0;
	Пока Результат.Следующий() Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("document_type");
		СтруктураСтроки.Вставить("Контрагент");
		СтруктураСтроки.Вставить("document_date");
		СтруктураСтроки.Вставить("document_number");
		СтруктураСтроки.Вставить("Документ");
		СтруктураСтроки.document_type = Тип;
		Попытка         
			СтруктураСтроки.Контрагент = Результат.Контрагент;
		Исключение
			Попытка
				СтруктураСтроки.Контрагент = Результат.Ссылка.ДокументОснование.Контрагент;
			Исключение
			КонецПопытки;
		КонецПопытки; 
		
		СтруктураСтроки.document_date = Результат.Ссылка.Дата;
		СтруктураСтроки.document_number = Результат.Ссылка.Номер;
		СтруктураСтроки.Документ = Результат.Ссылка;
		Ключ = "Строка"+Строка(сч);
		СтруктураВозврата.Вставить(Ключ, СтруктураСтроки);
		Сч = Сч + 1;
	КонецЦикла;
КонецПроцедуры

Функция СформироватьИзвещениеОПолучении(РезультатЗагрузки, Base64ДанныеПодписи,НомерСтатуса,ИзвещениеОператора) Экспорт//,ИзвещениеСетью
			
	БезОшибки = Истина;
	ТекстОшибки = "";
	
	Попытка
		
		Документ = РезультатЗагрузки.Документ;
		ИмяПОстФАйла = РезультатЗагрузки.ИмяПостФайла;
		ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел();
		
		УИДДокумента = Прав("000"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(0,65535),16))),4)
		+Прав("000"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(0,65535),16))),4)
		+"-"+Прав("000"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(0,65535),16))),4)
		+"-"+Прав("000"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(0,65535),16))),4)
		+"-"+Прав("000"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(0,65535),16))),4)
		+"-"+Прав("000"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(0,65535),16))),4)
		+Прав("000"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(0,65535),16))),4)
		+Прав("000"+НРег(Строка(Из_10_В_Любую(ГенераторСлучайныхЧисел.СлучайноеЧисло(0,65535),16))),4);
		
		Дата = Формат(ТекущаяДата(),"ДФ=ггггММдд");
		idSender = РезультатЗагрузки.idSender;
		
		Если ИзвещениеОператора = Истина Тогда
			idReceiver = "2IJ";
		Иначе
			idReceiver = РезультатЗагрузки.idReceiver;
		КонецЕсли;
		
		ИдФайл = "DP_IZVPOL_"+idReceiver+"_"+idSender+"_"+Дата+"_"+УИДДокумента;//?(ИзвещениеОператора = Истина,"2IJ",idReceiver)
		
		ИмяФайлаИзв = ИдФайл+".xml";
		Receiver = РезультатЗагрузки.Receiver;
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("windows-1251");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
			ЗаписьXML.ЗаписатьАтрибут("ИдФайл",ИдФайл);
			ЗаписьXML.ЗаписатьАтрибут("ВерсПрог","1.0");
			ЗаписьXML.ЗаписатьАтрибут("ВерсФорм","1.01");
			ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");	
				ЗаписьXML.ЗаписатьАтрибут("КНД","1115110");
				ЗаписьXML.ЗаписатьНачалоЭлемента("УчастЭДО");	
					ЗаписьXML.ЗаписатьАтрибут("ИдУчастЭДО",idSender);
					ЗаписьXML.ЗаписатьНачалоЭлемента("ЮЛ");
						ЗаписьXML.ЗаписатьАтрибут("НаимОрг",Документ.Организация.Наименование);
						ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Документ.Организация.ИНН);
						ЗаписьXML.ЗаписатьАтрибут("КПП",Документ.Организация.КПП);	
					ЗаписьXML.ЗаписатьКонецЭлемента();//ЮЛ
				ЗаписьXML.ЗаписатьКонецЭлемента();//УчастЭДО			
				ЗаписьXML.ЗаписатьНачалоЭлемента("СвИзвПолуч");	
					ЗаписьXML.ЗаписатьАтрибут("ДатаПол",Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy"));
					ЗаписьXML.ЗаписатьАтрибут("ВремяПол",Формат(ТекущаяДата(),"ДФ=hh.mm.ss"));
					ЗаписьXML.ЗаписатьНачалоЭлемента("СведПолФайл");
						ЗаписьXML.ЗаписатьАтрибут("ИмяПостФайла",ИмяПостФайла);
						ЗаписьXML.ЗаписатьНачалоЭлемента("ЭЦППолФайл");
							ЗаписьXML.ЗаписатьБезОбработки(Base64ДанныеПодписи);							
						ЗаписьXML.ЗаписатьКонецЭлемента();//ЭЦППолФайл						
					ЗаписьXML.ЗаписатьКонецЭлемента();//СведПолФайл			
				ЗаписьXML.ЗаписатьКонецЭлемента();//СвИзвПолуч
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("ОтпрДок");
					ЗаписьXML.ЗаписатьАтрибут("ИдУчастЭДО",idReceiver);//idReceiver//?(ИзвещениеСетью = Истина,idReceiver,idSender)
					
					Если ИзвещениеОператора = Истина Тогда
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("ЮЛ");
							ЗаписьXML.ЗаписатьАтрибут("НаимОрг","ООО Эдисофт");//Документ.Контрагент.Наименование
							ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ","7801471082");//Документ.Контрагент.ИНН
							ЗаписьXML.ЗаписатьАтрибут("КПП","780101001");//Документ.Контрагент.КПП
						ЗаписьXML.ЗаписатьКонецЭлемента();//ЮЛ
						
					Иначе
						
						ОтпрДок = "Контрагент";
						ЗаписьXML.ЗаписатьНачалоЭлемента("ЮЛ");
							ЗаписьXML.ЗаписатьАтрибут("НаимОрг",Документ[ОтпрДок].Наименование);//Документ.Контрагент.Наименование
							ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Документ[ОтпрДок].ИНН);//Документ.Контрагент.ИНН
							ЗаписьXML.ЗаписатьАтрибут("КПП",Документ[ОтпрДок].КПП);//Документ.Контрагент.КПП
						ЗаписьXML.ЗаписатьКонецЭлемента();//ЮЛ	
						
					КонецЕсли; 
					
				ЗаписьXML.ЗаписатьКонецЭлемента();//ОтпрДок
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Подписант");
					ЗаписьXML.ЗаписатьАтрибут("НаимОрг",Документ.Организация.Наименование);
					ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Документ.Организация.ИНН);
					ЗаписьXML.ЗаписатьАтрибут("КПП",Документ.Организация.КПП);
					ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");	
						ЗаписьXML.ЗаписатьАтрибут("Фамилия",Объект.Фамилия);
						ЗаписьXML.ЗаписатьАтрибут("Имя",Объект.Имя);
						ЗаписьXML.ЗаписатьАтрибут("Отчество",Объект.Отчество);									
					ЗаписьXML.ЗаписатьКонецЭлемента();//ФИО			
				ЗаписьXML.ЗаписатьКонецЭлемента();//Подписант
			ЗаписьXML.ЗаписатьКонецЭлемента();//Документ
		ЗаписьXML.ЗаписатьКонецЭлемента();//Файл
		ДанныеXML = ЗаписьXML.Закрыть();
		
	Исключение
		
		БезОшибки = Ложь;
		ТекстОшибки = ОписаниеОшибки();
		
	КонецПопытки;
	
	СтруктураВозврата = Новый СТруктура;
	СтруктураВозврата.Вставить("БезОшибки",БезОшибки);
	СтруктураВозврата.Вставить("ТекстОшибки",ТекстОшибки);
	СтруктураВозврата.Вставить("ИмяФайлаИзв",ИмяФайлаИзв);
	СтруктураВозврата.Вставить("ДанныеXML",ДанныеXML);
			
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ВыгрузитьORDERСервер(Документ,  Buyer_ILN, DeliveryPoint_ILN, Receiver_ILN,Seller_ILN, СписокНоменклатур)//от покупателя
	Если Ложь Тогда
		Документ = Документы.ЗаказПоставщику.ПустаяСсылка();
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	OrderNumber = СокрЛП(Документ.Номер);//1234567890
	OrderDate = Формат(Документ.Дата,"ДФ = гггг-ММ-дд");//2009-02-03
	OrderCurrency = Неопределено;//RUB
	ExpectedDeliveryDate = Формат(Документ.ЖелаемаяДатаПоступления,"ДФ = гггг-ММ-дд");//2011-02-07
	Если Не ЗначениеЗаполнено(ExpectedDeliveryDate) Тогда
		ExpectedDeliveryDate = Формат(Документ.ДатаПоступления,"ДФ = гггг-ММ-дд");//2011-02-07
		Если Не ЗначениеЗаполнено(ExpectedDeliveryDate) Тогда
			Сообщить("Не указана желаемая дата отгрузки. Выгрузка невозможна.");
			ВОзврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	DocumentFunctionCode = "O";//O
	DocumentNameCode = "220";//Неопределено;//220
	
	//OrderReferenceNumber = ПолучитьЗначениеСвойстваОбъектаДФормы("EDISoft_НомерВходящего",Документ);///если нужен номер обратного заказа
	
	
	Если Объект.УТАП Тогда
		Buyer_Name = Лев(СтрЗаменить(Документ.Партнер.Наименование,"""",""),175);//1234567890123
		Попытка DeliveryPoint_Name = Лев(СтрЗаменить(Документ.алкПунктРазгрузки.Наименование,"""",""),175);Исключение DeliveryPoint_Name = Неопределено; КонецПопытки;//1234567890123 
	Иначе
		Попытка DeliveryPoint_Name = Лев(СтрЗаменить(Документ.Грузополучатель.Наименование,"""",""),175);Исключение DeliveryPoint_Name = Неопределено; КонецПопытки;//1234567890123 	
		Buyer_Name = Лев(СтрЗаменить(Документ.Контрагент.Наименование,"""",""),175);
	КонецЕсли;
	Seller_Name = Лев(СтрЗаменить(Документ.Организация.Наименование,"""",""),175);//1234567890123
	
	

	StreetAndNumber = Неопределено;//Бурятское ш. влад.112
	CityName = Неопределено;//ЧО, г.Конючинск
	PostalCode = Неопределено;//123456
	Country = Неопределено;//RU
	
	ЦенаВключаетНДС = Документ.ЦенаВключаетНДС;
	ВсегоНДС = Документ.Товары.Итог("СуммаНДС");
	TotalLines = Формат(Документ.Товары.Количество(),"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");//115
	TotalOrderedAmount = Формат(Документ.Товары.Итог("Количество"),"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//5138.000
	Если ЦенаВключаетНДС Тогда
		TotalNetAmount = Формат(Документ.Товары.Итог("Сумма")-ВсегоНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//260000.3100
		TotalGrossAmount = Формат(Документ.Товары.Итог("Сумма"),"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//8339.2600
	Иначе
		TotalNetAmount = Формат(Документ.Товары.Итог("Сумма"),"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//260000.3100
		TotalGrossAmount = Формат(Документ.Товары.Итог("Сумма")+ВсегоНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//8339.2600
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document-Order");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Order-Header");//Order_Header.Reference.OrderReferenceNumber
		Если ЗначениеЗаполнено(OrderNumber) Тогда ЗаписатьXML(ЗаписьXML,OrderNumber,"OrderNumber") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //OrderNumber"); КонецЕсли;
		Если ЗначениеЗаполнено(OrderDate) Тогда ЗаписатьXML(ЗаписьXML,OrderDate,"OrderDate") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //OrderDate"); КонецЕсли;
		Если ЗначениеЗаполнено(OrderCurrency) Тогда ЗаписатьXML(ЗаписьXML,OrderCurrency,"OrderCurrency") КонецЕсли;
		Если ЗначениеЗаполнено(ExpectedDeliveryDate) Тогда ЗаписатьXML(ЗаписьXML,ExpectedDeliveryDate,"ExpectedDeliveryDate") КонецЕсли;
		Если ЗначениеЗаполнено(DocumentFunctionCode) Тогда ЗаписатьXML(ЗаписьXML,DocumentFunctionCode,"DocumentFunctionCode") КонецЕсли;
		Если ЗначениеЗаполнено(DocumentNameCode) Тогда ЗаписатьXML(ЗаписьXML,DocumentNameCode,"DocumentNameCode") КонецЕсли;
		//Если ЗначениеЗаполнено(OrderReferenceNumber) Тогда
		//	ЗаписьXML.ЗаписатьНачалоЭлемента("Reference");
		//		 ЗаписатьXML(ЗаписьXML,OrderReferenceNumber,"OrderReferenceNumber");
		//	ЗаписьXML.ЗаписатьКонецЭлемента();
		//КонецЕсли; 
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Order-Header
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document-Parties");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Sender");
		Если ЗначениеЗаполнено(Seller_ILN) Тогда ЗаписатьXML(ЗаписьXML,Seller_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Sender/ILN"); КонецЕсли;//4607166039996
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Sender

	ЗаписьXML.ЗаписатьНачалоЭлемента("Receiver");
		Если ЗначениеЗаполнено(Receiver_ILN) Тогда ЗаписатьXML(ЗаписьXML,Receiver_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Receiver/ILN"); КонецЕсли;//4606038000003
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Receiver

	ЗаписьXML.ЗаписатьКонецЭлемента();//*Document-Parties
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Order-Parties");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Buyer");
		Если ЗначениеЗаполнено(Buyer_ILN) Тогда ЗаписатьXML(ЗаписьXML,Buyer_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Buyer/ILN"); КонецЕсли;
		Если ЗначениеЗаполнено(Buyer_Name) Тогда ЗаписатьXML(ЗаписьXML,Buyer_Name,"Name") КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Buyer
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Seller");
		Если ЗначениеЗаполнено(Seller_ILN) Тогда ЗаписатьXML(ЗаписьXML,Seller_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Seller/ILN"); КонецЕсли;
		Если ЗначениеЗаполнено(Seller_Name) Тогда ЗаписатьXML(ЗаписьXML,Seller_Name,"Name") КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Seller
	
	Если ЗначениеЗаполнено(DeliveryPoint_ILN) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("DeliveryPoint");
			Если ЗначениеЗаполнено(DeliveryPoint_ILN) Тогда ЗаписатьXML(ЗаписьXML,DeliveryPoint_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //DeliveryPoint/ILN"); КонецЕсли;
			Если ЗначениеЗаполнено(DeliveryPoint_Name) Тогда ЗаписатьXML(ЗаписьXML,DeliveryPoint_Name,"Name") КонецЕсли;
			Если ЗначениеЗаполнено(StreetAndNumber) Тогда ЗаписатьXML(ЗаписьXML,StreetAndNumber,"StreetAndNumber") КонецЕсли;
			Если ЗначениеЗаполнено(CityName) Тогда ЗаписатьXML(ЗаписьXML,CityName,"CityName") КонецЕсли;
			Если ЗначениеЗаполнено(PostalCode) Тогда ЗаписатьXML(ЗаписьXML,PostalCode,"PostalCode") КонецЕсли;
			Если ЗначениеЗаполнено(Country) Тогда ЗаписатьXML(ЗаписьXML,Country,"Country") КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();//*DeliveryPoint
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Order-Parties
	
	//Выгрузка табличной части
	ЗаписьXML.ЗаписатьНачалоЭлемента("Order-Lines");
	//Для каждого СтрокаТаблицы Из Документ.Товары Цикл
		
	Для Сч = 0 По СписокНоменклатур.Количество()-1 Цикл
		
		Ключ = "Строка" + Строка(сч);
		СтрукутураСтрока = СписокНоменклатур[Ключ];
		LineNumber = СтрукутураСтрока.LineNumber;
		EAN = СтрукутураСтрока.EAN;
		КодНоменклатурыПоставщика = СтрукутураСтрока.КодНоменклатурыПоставщика;
		КодНоменклатурыПокупателя = СтрукутураСтрока.КодНоменклатурыПокупателя;
		ОписаниеНоменклатурыПоставщика = СтрукутураСтрока.ОписаниеНоменклатурыПоставщика;
		КоличествоВДокументе = СтрукутураСтрока.КоличествоВДокументе;		
		КоэффициентВДокументе = СтрукутураСтрока.КоэффициентВДокументе;
		Если Число(КОэффициентВДокументе) = 0 Тогда
			КоэффициентВДокументе = "";
		КонецЕсли;
		UnitOfMeasure = СтрукутураСтрока.UnitOfMeasure;
		ЦенаБезНДС = Формат(Число(СтрукутураСтрока.ЦенаБезНДС),"ЧДЦ=2; ЧРГ=''");
		ЦенаСНДС = Формат(Число(СтрукутураСтрока.ЦенаСНДС),"ЧДЦ=2; ЧРГ=''");
		СтавкаНДС = СтрукутураСтрока.СтавкаНДС;
		СуммаБезНДС = СтрукутураСтрока.СуммаБезНДС;
		СуммаСНДС = СтрукутураСтрока.СуммаСНДС;
		СуммаНДС = СуммаСНДС-СуммаБезНДС;
		ЗаписьXML.ЗаписатьНачалоЭлемента("Line");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Line-Item");
			Если ЗначениеЗаполнено(LineNumber) Тогда ЗаписатьXML(ЗаписьXML,LineNumber,"LineNumber") КонецЕсли;
			Если ЗначениеЗаполнено(EAN) Тогда ЗаписатьXML(ЗаписьXML,EAN,"EAN") КонецЕсли;
			Если ЗначениеЗаполнено(КодНоменклатурыПокупателя) Тогда ЗаписатьXML(ЗаписьXML,КодНоменклатурыПокупателя,"BuyerItemCode") КонецЕсли;
			Если ЗначениеЗаполнено(КодНоменклатурыПоставщика) Тогда ЗаписатьXML(ЗаписьXML,КодНоменклатурыПоставщика,"SupplierItemCode") КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеНоменклатурыПоставщика) Тогда ЗаписатьXML(ЗаписьXML,ОписаниеНоменклатурыПоставщика,"ItemDescription") КонецЕсли;
			
			Если ЗначениеЗаполнено(КоличествоВДокументе) Тогда ЗаписатьXML(ЗаписьXML,КоличествоВДокументе,"OrderedQuantity") КонецЕсли;
			//Если ЗначениеЗаполнено(КоличествоВДокументе) Тогда ЗаписатьXML(ЗаписьXML,КоличествоВДокументе,"AllocatedDelivered") КонецЕсли;
			Если ЗначениеЗаполнено(КоэффициентВДокументе) Тогда ЗаписатьXML(ЗаписьXML,КоэффициентВДокументе,"OrderedUnitPacksize") КонецЕсли;
			Если ЗначениеЗаполнено(UnitOfMeasure) Тогда ЗаписатьXML(ЗаписьXML,UnitOfMeasure,"UnitOfMeasure") КонецЕсли;
			Если ЗначениеЗаполнено(ЦенаБезНДС) Тогда ЗаписатьXML(ЗаписьXML,ЦенаБезНДС,"OrderedUnitNetPrice") КонецЕсли;
			Если ЗначениеЗаполнено(ЦенаСНДС) Тогда ЗаписатьXML(ЗаписьXML,ЦенаСНДС,"OrderedUnitGrossPrice") КонецЕсли;			
			Если ЗначениеЗаполнено(СуммаБезНДС) Тогда ЗаписатьXML(ЗаписьXML,СуммаБезНДС,"OrderedNetAmount") КонецЕсли;
			Если ЗначениеЗаполнено(СуммаНДС) Тогда ЗаписатьXML(ЗаписьXML, СуммаНДС, "OrderedTaxAmount") КонецЕсли;
			Если ЗначениеЗаполнено(СуммаСНДС) Тогда ЗаписатьXML(ЗаписьXML,СуммаСНДС,"OrderedGrossAmount") КонецЕсли;
			Если ЗначениеЗаполнено(СтавкаНДС) Тогда ЗаписатьXML(ЗаписьXML,СтавкаНДС,"TaxRate") КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();//*Line-Item
		
		ЗаписьXML.ЗаписатьКонецЭлемента();//*Line
		
		
		////////////////////
		//СтавкаНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);//УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
		//ЦенаБезНДС = ?(ЦенаВключаетНДС,СтрокаТаблицы.Цена/(1+СтавкаНДС/100),СтрокаТаблицы.Цена);
		//ЦенаСНДС = ?(ЦенаВключаетНДС,СтрокаТаблицы.Цена,СтрокаТаблицы.Цена*(1+СтавкаНДС/100));
		//СуммаБезНДС = ЦенаБезНДС * СтрокаТаблицы.Количество;
		//СуммаСНДС = ЦенаСНДС * СтрокаТаблицы.Количество;
		//СуммаНДС = СуммаСНДС - СуммаБезНДС;
		//
		//LineNumber = Формат(СтрокаТаблицы.НомерСтроки,"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");//1
		//EAN = "";//ПолучитьКодТовара("EAN", СтрокаТаблицы.Номенклатура);
		//КодНоменклатурыПокупателя = "";//ПолучитьКодТовара("BuyerItemCode", СтрокаТаблицы.Номенклатура);
		//ОписаниеНоменклатурыПокупателя = Неопределено;
		//КодНоменклатурыПоставщика = "";//ПолучитьКодТовара("SupplierItemCode", СтрокаТаблицы.Номенклатура);
		//ОписаниеНоменклатурыПоставщика = Лев(СтрокаТаблицы.Номенклатура.Наименование,100);//BOBRIK Cereal 18x375g RU
		//		
		//UnitOfMeasure = ПолучитьЕдиницуИзмерения(СтрокаТаблицы);		
		//КоличествоВДокументе = Формат(СтрокаТаблицы.Количество,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0");//126.000
		//КоэффициентВДокументе = Формат(СтрокаТаблицы.Упаковка.Коэффициент,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0");//1.000
		//ЦенаБезНДС = Формат(ЦенаБезНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//74.9500
		//СуммаБезНДС = Формат(СуммаБезНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//9446.2200
		//ЦенаСНДС = Формат(ЦенаСНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//74.9500
		//СуммаСНДС = Формат(СуммаСНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//9446.2200
		//СтавкаНДС = Формат(СтавкаНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
		//
		//ЗаписьXML.ЗаписатьНачалоЭлемента("Line");
		//ЗаписьXML.ЗаписатьНачалоЭлемента("Line-Item");
		//	Если ЗначениеЗаполнено(LineNumber) Тогда ЗаписатьXML(ЗаписьXML,LineNumber,"LineNumber") КонецЕсли;
		//	Если ЗначениеЗаполнено(EAN) Тогда ЗаписатьXML(ЗаписьXML,EAN,"EAN") КонецЕсли;
		//	Если ЗначениеЗаполнено(КодНоменклатурыПокупателя) Тогда ЗаписатьXML(ЗаписьXML,КодНоменклатурыПокупателя,"BuyerItemCode") КонецЕсли;
		//	Если ЗначениеЗаполнено(КодНоменклатурыПоставщика) Тогда ЗаписатьXML(ЗаписьXML,КодНоменклатурыПоставщика,"SupplierItemCode") КонецЕсли;
		//	Если ЗначениеЗаполнено(ОписаниеНоменклатурыПокупателя) Тогда ЗаписатьXML(ЗаписьXML,ОписаниеНоменклатурыПокупателя,"ItemDescription") КонецЕсли;
		//	Если ЗначениеЗаполнено(ОписаниеНоменклатурыПоставщика) Тогда ЗаписатьXML(ЗаписьXML,ОписаниеНоменклатурыПоставщика,"SupplierItemDescription") КонецЕсли;
		//	
		//	Если ЗначениеЗаполнено(КоличествоВДокументе) Тогда ЗаписатьXML(ЗаписьXML,КоличествоВДокументе,"OrderedQuantity") КонецЕсли;
		//	Если ЗначениеЗаполнено(КоэффициентВДокументе) Тогда ЗаписатьXML(ЗаписьXML,КоэффициентВДокументе,"OrderedUnitPacksize") КонецЕсли;
		//	Если ЗначениеЗаполнено(UnitOfMeasure) Тогда ЗаписатьXML(ЗаписьXML,UnitOfMeasure,"UnitOfMeasure") КонецЕсли;
		//	Если ЗначениеЗаполнено(ЦенаБезНДС) Тогда ЗаписатьXML(ЗаписьXML,ЦенаБезНДС,"OrderedUnitNetPrice") КонецЕсли;
		//	Если ЗначениеЗаполнено(ЦенаСНДС) Тогда ЗаписатьXML(ЗаписьXML,ЦенаСНДС,"OrderedUnitGrossPrice") КонецЕсли;
		//	Если ЗначениеЗаполнено(СуммаБезНДС) Тогда ЗаписатьXML(ЗаписьXML,СуммаБезНДС,"OrderedNetAmount") КонецЕсли;
		//	Если ЗначениеЗаполнено(СуммаСНДС) Тогда ЗаписатьXML(ЗаписьXML,СуммаСНДС,"OrderedGrossAmount") КонецЕсли;
		//	
		//	Если ЗначениеЗаполнено(СтавкаНДС) Тогда ЗаписатьXML(ЗаписьXML,СтавкаНДС,"TaxRate") КонецЕсли;
		//ЗаписьXML.ЗаписатьКонецЭлемента();//*Line-Item
		//
		//ЗаписьXML.ЗаписатьКонецЭлемента();//*Line
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Order-Lines
	//*
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Order-Summary");
		Если ЗначениеЗаполнено(TotalLines) Тогда ЗаписатьXML(ЗаписьXML,TotalLines,"TotalLines") КонецЕсли;
		Если ЗначениеЗаполнено(TotalOrderedAmount) Тогда ЗаписатьXML(ЗаписьXML,TotalOrderedAmount,"TotalOrderedAmount") КонецЕсли;
		Если ЗначениеЗаполнено(TotalNetAmount) Тогда ЗаписатьXML(ЗаписьXML,TotalNetAmount,"TotalNetAmount") КонецЕсли;
		Если ЗначениеЗаполнено(TotalGrossAmount) Тогда ЗаписатьXML(ЗаписьXML,TotalGrossAmount,"TotalGrossAmount") КонецЕсли;//8339.2600
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Order-Summary
	
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Document-Order
	
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОснованиеСФ(Документ)
	
	Возврат Документ.ДокументОснование;
	
КонецФункции

Функция ПолучитьОбъектСвойстваСервер(Тип, Структура)
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Объект");	
	СтруктураДокумента = ЗначениеИзСтрокиВнутр(Структура);
	Попытка
		СтруктураВозврата.Вставить("buyer_iln", СТруктураДокумента.ПокупательГЛН);
	Исключение
	КонецПопытки;
	Если Тип = "RECADV" Тогда
		СтруктураВозврата.Вставить("НомерДесадв");
		СтруктураВозврата.Вставить("ДатаДесадв");
		СтруктураВозврата.Вставить("НомерРекадв");
		СтруктураВозврата.Вставить("НомерЗаказа");
		СтруктураВозврата.Вставить("ДатаЗаказа");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РеализацияТоваровУслуг.Ссылка
		               |ИЗ
		               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		               |ГДЕ
		               |	РеализацияТоваровУслуг.Номер = &Номер";
		
		Запрос.УстановитьПараметр("Номер", СтруктураДокумента.НомерОтгрузки);
		СтруктураВозврата.НомерДесадв = СтруктураДокумента.НомерОтгрузки;
		СтруктураВозврата.НомерЗаказа = СтруктураДокумента.НомерЗаказа;
		СтруктураВозврата.ДатаЗаказа = СтруктураДокумента.ДатаДокумента;
		СтруктураВозврата.ДатаДесадв = "";
	//	СтруктураВозврата.НомерРекадв = СтруктураДокумента.
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			СтруктураВозврата.Объект = ЗначениеВСтрокуВнутр(РезультатЗапроса.Ссылка);
			Возврат СтруктураВозврата;
		Иначе		
			Возврат "";
		КонецЕсли;
	Иначе
		Попытка
			СтруктураВозврата.Объект = СтруктураДокумента.НомерДокумента+СтруктураДокумента.ДатаДокумента;
		Исключение
			СтруктураВозврата.Объект = СтруктураДокумента + СтруктураДокумента;
		КонецПопытки;
		Возврат СтруктураВозврата;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАлкПунктРазгрузки(Документ)
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	Возврат ДокументОбъект.алкПунктРазгрузки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКОнтрагента(Документ)
	ДокументОбъект = Документ.ПолучитьОбъект();
	Возврат ДокументОбъект.Контрагент;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьГРузоолучателя(Документ)
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	Возврат ДокументОбъект.Грузополучатель;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОрганизацию(Документ)
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	Возврат ДокументОбъект.Организация;
	
КонецФункции

&НаСервере
Функция ПолучитьПартнера(Документ)
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	Если Объект.Бухгалтерия Тогда
		Возврат ДокументОбъект.Контрагент;
	Иначе
		Возврат ДокументОбъект.Партнер;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокНоменклатурДокумента(Документ, Десадв = Ложь,ALCDES = Ложь,Торг = Ложь, On_KORSFAKT = Ложь,Свернуть = Ложь)
	
	СтруктураВозврата = Новый СТруктура;
	Сч = 0;
	Если Объект.Бухгалтерия Тогда
		ЦенаВключаетНДС = Документ.СуммаВключаетНДС;
	Иначе
		ЦенаВключаетНДС = Документ.ЦенаВключаетНДС;
	КонецЕсли;
	Если On_KORSFAKT и Объект.Бухгалтерия = Ложь Тогда
		ТЧДоИзменения = Документ.ДокументОснование.Товары;
	КонецЕсли;
	Если On_KORSFAKT и Объект.Бухгалтерия Тогда
		ТЧДоИзменения = Документ.Товары;
	КонецЕсли;
	
	НомерСтроки = 1;
	ВремТаб = Документ.Товары.Выгрузить();
	Если Свернуть и Объект.Бухгалтерия=Ложь и On_KORSFAKT=Ложь Тогда
		ВремТаб.Свернуть("Номенклатура,СтавкаНДС,Цена","Сумма,СуммаНДС,СуммаСНДС,Количество,КоличествоУпаковок");
	ИначеЕсли Свернуть и Объект.Бухгалтерия и On_KORSFAKT=Ложь Тогда
		ВремТаб.Свернуть("Номенклатура,СтавкаНДС,Цена","Сумма,СуммаНДС,Количество");	
	ИначеЕсли Свернуть и Объект.Бухгалтерия=Истина и On_KORSFAKT Тогда  
		ВремТаб.Свернуть("Номенклатура,СтавкаНДС,Цена,ЦенаДоИзменения,СтавкаНДСДоИзменения","КоличествоДоИзменения,Сумма,СуммаНДС,СуммаСНДС,СуммаДоИзменения,СуммаНДСДоИзменения");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ВремТаб ЦИкл
		СТруктураСтроки = Новый СТруктура;
		СТруктураСтроки.Вставить("Номенклатура",СтрокаТаблицы.Номенклатура);
		СТруктураСтроки.Вставить("Контрагент", Документ.Контрагент);
						
		СтавкаНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
		ЦенаБезНДС = ?(ЦенаВключаетНДС,СтрокаТаблицы.Цена/(1+СтавкаНДС/100),СтрокаТаблицы.Цена);
		ЦенаСНДС = ?(ЦенаВключаетНДС,СтрокаТаблицы.Цена,СтрокаТаблицы.Цена*(1+СтавкаНДС/100));
		Если Объект.Бухгалтерия Тогда
			СуммаБезНДС = ?(ЦенаВключаетНДС, СтрокаТаблицы.Сумма-СтрокаТаблицы.СуммаНДС,СтрокаТаблицы.Сумма);
			СуммаСНДС = ?(ЦенаВключаетНДС, СтрокаТаблицы.Сумма,СтрокаТаблицы.Сумма+СтрокаТаблицы.СуммаНДС);
		Иначе
			СуммаБезНДС = ?(ЦенаВключаетНДС, СтрокаТаблицы.СуммаСНДС-СтрокаТаблицы.СуммаНДС,СтрокаТаблицы.Сумма);
		КонецЕсли;
		//СуммаСНДС = СтрокаТаблицы.СуммаСНДС;//ЦенаСНДС * СтрокаТаблицы.Количество;
		СуммаНДС = СтрокаТаблицы.СуммаНДС;
		
		//Если On_KORSFAKT Тогда
			LineNumber = Формат(НомерСтроки,"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");//1
		//Иначе
			//LineNumber = Формат(СтрокаТаблицы.НомерСтроки,"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");//1
		//КонецЕсли;
		
		ОписаниеНоменклатурыПоставщика = Лев(СтрокаТаблицы.Номенклатура.Наименование,100);//BOBRIK Cereal 18x375g RU
				
		UnitOfMeasure = ПолучитьЕдиницуИзмерения(СтрокаТаблицы);			
		
		КоличествоВДокументе = Формат(СтрокаТаблицы.Количество,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0");//126.000
		КоэффициентВДокументе = Формат(1,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0");//1.000
		ЦенаБезНДС = Формат(ЦенаБезНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//74.9500
		СуммаБезНДС = Формат(СуммаБезНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//9446.2200
		ЦенаСНДС = Формат(ЦенаСНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//74.9500
		СуммаСНДС = Формат(СуммаСНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//9446.2200
		СтавкаНДС = Формат(СтавкаНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");//18.00
		
		
		Если  On_KORSFAKT и Объект.Бухгалтерия = Ложь Тогда
			ТабРасход = Документ.Расхождения.Выгрузить();
			Если Свернуть Тогда
				 ТабРасход.Свернуть("Номенклатура,СтавкаНДС,Цена","Сумма,СуммаНДС,СуммаСНДС");
			КонецЕсли;
			СтрокаРасхождение = Документ.Расхождения.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаблицы.Номенклатура));
			
			Если СтрокаРасхождение.Количество()>0 Тогда
				СтрокиДоИзменения = ВремТаб.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаблицы.Номенклатура));
				//СтрокиДоИзменения = ТЧДоИзменения.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаблицы.Номенклатура));
				Если СтрокиДоИзменения.Количество() = 0 Тогда
					Сообщить("Не найдена строка с товаром " + СтрокаТаблицы.Номенклатура + " в реализации " + Документ.ДокументОснование);
					Возврат неопределено;
				КонецЕсли;
				СтрокаДоИзменения = СтрокиДоИзменения[0];
				КоличествоДоИзменения = Формат(СтрокаДоИзменения.КоличествоУпаковок,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0");//126.000
				СтавкаНДСДоИзменения = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаДоИзменения.СтавкаНДС);
				СтавкаНДСДоИзменения =Формат(СтавкаНДСДоИзменения,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
				ЦенаБезНДСДоИзменения = Формат(?(ЦенаВключаетНДС,СтрокаДоИзменения.Цена/(1+СтавкаНДС/100),СтрокаДоИзменения.Цена),"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
				ЦенаСНДСДоИзменения = Формат(?(ЦенаВключаетНДС,СтрокаДоИзменения.Цена,СтрокаДоИзменения.Цена*(1+СтавкаНДС/100)),"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
			
				СуммаБезНДСДоИзменения = Формат(?(ЦенаВключаетНДС, СтрокаДоИзменения.СуммаСНДС-СтрокаДоИзменения.СуммаНДС,СтрокаДоИзменения.Сумма),"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");//?(ЦенаВключаетНДС, СтрокаТаблицы.СуммаСНДС-СтрокаТаблицы.СуммаНДС,СтрокаТаблицы.Сумма);
				СуммаСНДСДоИзменения = Формат(СтрокаДоИзменения.СуммаСНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
				СуммаНДСДоИзменения = СтрокаДоИзменения.СуммаНДС;
				//Если (КоличествоДоИзменения = КоличествоВДокументе) 
				//	И (СтавкаНДСДоИзменения = СтавкаНДС)
				//	И (ЦенаБезНДСДоИзменения = ЦенаБезНДС)
				//	И (ЦенаСНДСДоИзменения = ЦенаСНДС)
				//	И (СуммаБезНДСДоИзменения = СуммаБезНДС)
				//	И (СуммаСНДСДоИзменения = СуммаСНДС)
				//	И (СуммаНДСДоИзменения = СуммаНДС) Тогда
				//	Продолжить
				//КонецЕсли;
				
			Иначе
				
				КоличествоДоИзменения = Формат(КоличествоВДокументе,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0");//126.000				
				СтавкаНДСДоИзменения =Формат(СтавкаНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
				ЦенаБезНДСДоИзменения = ЦенаБезНДС;
				ЦенаСНДСДоИзменения = ЦенаСНДС;
			
				СуммаБезНДСДоИзменения = СуммаБезНДС;
				СуммаСНДСДоИзменения = СуммаСНДС;
				СуммаНДСДоИзменения = СуммаНДС;
				//Если (КоличествоДоИзменения = КоличествоВДокументе) 
				//	И (СтавкаНДСДоИзменения = СтавкаНДС)
				//	И (ЦенаБезНДСДоИзменения = ЦенаБезНДС)
				//	И (ЦенаСНДСДоИзменения = ЦенаСНДС)
				//	И (СуммаБезНДСДоИзменения = СуммаБезНДС)
				//	И (СуммаСНДСДоИзменения = СуммаСНДС)
				//	И (СуммаНДСДоИзменения = СуммаНДС) Тогда
				//	Продолжить
				//КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли On_KORSFAKT и Объект.Бухгалтерия Тогда
			КоличествоДоИзменения = Формат(СтрокаТаблицы.КоличествоДоИзменения,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0");//126.000
			СтавкаНДСДоИзменения = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДСДоИзменения);
			СтавкаНДСДоИзменения =Формат(СтавкаНДСДоИзменения,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
			ЦенаБезНДСДоИзменения = Формат(?(ЦенаВключаетНДС,СтрокаТаблицы.ЦенаДоИзменения/(1+СтавкаНДС/100),СтрокаДоИзменения.Цена),"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
			ЦенаСНДСДоИзменения = Формат(?(ЦенаВключаетНДС,СтрокаТаблицы.ЦенаДоИзменения,СтрокаДоИзменения.Цена*(1+СтавкаНДС/100)),"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
			
			СуммаНДСДоИзменения = СтрокаДоИзменения.СуммаНДСДоИзменения;
			
			СуммаБезНДСДоИзменения = ?(ЦенаВключаетНДС, СтрокаТаблицы.СуммаДоИзменения-СтрокаТаблицы.СуммаНДСДоИзменения,СтрокаТаблицы.СуммаДоИзменения);
			СуммаСНДС = ?(ЦенаВключаетНДС, СтрокаТаблицы.СуммаДоИзменения,СтрокаТаблицы.СуммаДоИзменения+СтрокаТаблицы.СтавкаНДСДоИзменения);
			
		КонецЕсли;
		
		Если Десадв  Тогда
			Если ALCDES Тогда
				Попытка
					TaxIDПроизв = СтрокаТаблицы.Серия.алкПроизводитель.ИНН;
					TaxRegistrationReasonCodeПроизв = СтрокаТаблицы.Серия.алкПроизводитель.КПП;
					NameПроизв = СтрокаТаблицы.Серия.алкПроизводитель.алкНаименованиеКраткое;
					TaxIDИмп = СтрокаТаблицы.Серия.алкИмпортер.ИНН;
					TaxRegistrationReasonCodeИмп = СтрокаТаблицы.Серия.алкИмпортер.КПП;
					NameИмп = СтрокаТаблицы.Серия.алкИмпортер.Наименование;
					СТруктураСтроки.Вставить("TaxIDПроизв", TaxIDПроизв);
					СТруктураСтроки.Вставить("TaxRegistrationReasonCodeПроизв", TaxRegistrationReasonCodeПроизв);
					СТруктураСтроки.Вставить("NameПроизв", NameПроизв);
					СТруктураСтроки.Вставить("TaxIDИмп", TaxIDИмп);
					СТруктураСтроки.Вставить("TaxRegistrationReasonCodeИмп", TaxRegistrationReasonCodeИмп);
					СТруктураСтроки.Вставить("NameИмп", NameИмп);
				Исключение
					ВызватьИсключение("Не удалось получить данные о производителе или о поставщике на основании серии номенклатуры. Проверьте заполненность этих реквизитов. Документ выгружен не будет");
					Возврат Неопределено;
				КонецПопытки;
				UnitVolume = Формат(СтрокаТаблицы.Номенклатура.алкЕмкость,"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
				AlcoholCode = СтрокаТаблицы.Серия.алкВидПродукции.Код;
				PackagingDate = Формат(СтрокаТаблицы.Серия.АХ_ДатаВвоза, "ДФ = гггг-ММ-дд" );
				СТруктураСтроки.Вставить("UnitVolume", UnitVolume);
				СТруктураСтроки.Вставить("AlcoholCode", AlcoholCode);
				СТруктураСтроки.Вставить("PackagingDate", PackagingDate);
				
				Reference_IdАлк = СокрЛП(СтрокаТаблицы.Серия.алкНомерГТД.Код);
				СТруктураСтроки.Вставить("Reference_IdАлк", Reference_IdАлк);
				
			КонецЕсли;
			
			Если Торг Тогда
				СтавкаНдс = УчетНДСПереопределяемый.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНдс);
				НаимЕдИзм = СтрокаТаблицы.Упаковка.ЕдиницаИзмерения.Наименование;
				СТруктураСтроки.Вставить("СтавкаНдс",СтавкаНдс);
				СТруктураСтроки.Вставить("НаимЕдИзм",НаимЕдИзм);
				//Нетто = СтрокаСчета.Нетто;
			КонецЕсли;
			Reference_Type = "ABT";//ГТД
			CountryOfOrigin = Неопределено;
			Попытка
				Reference_Id = СокрЛП(СтрокаТаблицы.СерияНоменклатуры.НомерГТД.Код);
				КодСтраны = СокрЛП(СтрокаТаблицы.СерияНоменклатуры.СтранаПроисхождения.Код);
			Исключение
				Попытка
					Reference_Id = СокрЛП(СтрокаТаблицы.НомерГТД.Код);
					КодСтраны = СокрЛП(СтрокаТаблицы.СтранаПроисхождения.Код);
				Исключение
					Попытка 
						Reference_Id = СокрЛП(СтрокаТаблицы.Номенклатура.НомерГТД.Код); 
						КодСтраны = СокрЛП(СтрокаТаблицы.Номенклатура.СтранаПроисхождения.Код);
					Исключение 
					КонецПопытки;
				КонецПопытки; 
			КонецПопытки;
			Если Не ЗначениеЗаполнено(Reference_Id) Тогда
				Попытка
					Reference_Id = СтрокаТаблицы.Серия.алкНомерГТД.Код;
				Исключение
				КонецПопытки;
			КонецЕсли;
		
			Попытка
				CountryOfOrigin = "RU";//СтрокаТаблицы.Серия.алкНомерГТД.СтранаПроисхождения.КодАльфа2;
				//МакетКС = ЭтотОбъект.ПолучитьМакет("КлассификаторКодовСтран");
				//СтрТД = МакетКС.НайтиТекст(СокрЛП(КодСтраны));
				//CountryOfOrigin = СокрЛП(МакетКС.Область("R"+СтрТД.Верх+"C"+2).Текст);
			Исключение
			КонецПопытки;

			СТруктураСтроки.Вставить("Reference_Type", Reference_Type);
			СТруктураСтроки.Вставить("Reference_Id", Reference_Id);
			СТруктураСтроки.Вставить("КодСтраны", КодСтраны);
			СТруктураСтроки.Вставить("CountryOfOrigin", CountryOfOrigin);
		КонецЕсли;
		
		
		
		СТруктураСтроки.Вставить("LineNumber",LineNumber);
		CountryOfOrigin = "RU";
		СТруктураСтроки.Вставить("CountryOfOrigin", CountryOfOrigin);
		СТруктураСтроки.Вставить("КоличествоВДокументе",КоличествоВДокументе);
		СТруктураСтроки.Вставить("UnitOfMeasure",UnitOfMeasure);
		СТруктураСтроки.Вставить("КоэффициентВДокументе",КоэффициентВДокументе);
		СТруктураСтроки.Вставить("ЦенаБезНДС",ЦенаБезНДС);
		СТруктураСтроки.Вставить("СуммаБезНДС",СуммаБезНДС);
		СТруктураСтроки.Вставить("ЦенаСНДС",ЦенаСНДС);
		СТруктураСтроки.Вставить("СуммаСНДС",СуммаСНДС);
		СТруктураСтроки.Вставить("СтавкаНДС",СтавкаНДС);
		Попытка
			СтруктураСтроки.Вставить("Упаковка", СтрокаТаблицы.Упаковка);
		Исключение
		КонецПопытки;
		СТруктураСтроки.Вставить("СуммаНДС",СуммаНДС);		
		СТруктураСтроки.Вставить("ОписаниеНоменклатурыПоставщика",ОписаниеНоменклатурыПоставщика);
		
		Если On_KORSFAKT Тогда
			
			СТруктураСтроки.Вставить("КоличествоДоИзменения",КоличествоДоИзменения);//КоличествоДоИзменения = Формат(СтрокаТаблицы.КоличествоДоИзменения,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0");//126.000
			СТруктураСтроки.Вставить("СтавкаНДСДоИзменения",СтавкаНДСДоИзменения);// = УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДСДоИзменения);
			СТруктураСтроки.Вставить("ЦенаБезНДСДоИзменения",ЦенаБезНДСДоИзменения);// = ?(ЦенаВключаетНДС,СтрокаТаблицы.ЦенаДоИзменения/(1+СтавкаНДСДоИзменения/100),СтрокаТаблицы.ЦенаДоИзменения);
			СТруктураСтроки.Вставить("ЦенаСНДСДоИзменения",ЦенаСНДСДоИзменения);// = ?(ЦенаВключаетНДС,СтрокаТаблицы.ЦенаДоИзменения,СтрокаТаблицы.ЦенаДоИзменения*(1+СтавкаНДСДоИзменения/100));
			СТруктураСтроки.Вставить("СуммаБезНДСДоИзменения",СуммаБезНДСДоИзменения);// = ?(ЦенаВключаетНДС,СтрокаТаблицы.СуммаДоИзменения - СтрокаТаблицы.СуммаНДСДоИзменения,СтрокаТаблицы.СуммаДоИзменения);//?(ЦенаВключаетНДС, СтрокаТаблицы.СуммаСНДС-СтрокаТаблицы.СуммаНДС,СтрокаТаблицы.Сумма);
			СТруктураСтроки.Вставить("СуммаСНДСДоИзменения",СуммаСНДСДоИзменения);// = ?(ЦенаВключаетНДС,СтрокаТаблицы.СуммаДоИзменения,СтрокаТаблицы.СуммаДоИзменения + СтрокаТаблицы.СуммаНДСДоИзменения);
			СТруктураСтроки.Вставить("СуммаНДСДоИзменения",СуммаНДСДоИзменения);//
			СумНалРазн = СуммаНДС - СуммаНДСДоИзменения;
			СтТовУчНалРазн = СуммаСНДС - СуммаСНДСДоИзменения;
			СтТовБезНДСРазн = СуммаБезНДС - СуммаБезНДСДоИзменения;
			СТруктураСтроки.Вставить("СумНалРазн",СумНалРазн);//
			СТруктураСтроки.Вставить("СтТовУчНалРазн",СтТовУчНалРазн);//
			СТруктураСтроки.Вставить("СтТовБезНДСРазн",СтТовБезНДСРазн);//
			
		КонецЕсли;
		
		Ключ = "Строка" + Строка(СЧ);
		СтруктураВозврата.Вставить(Ключ, СТруктураСтроки);
		СЧ = СЧ + 1;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ВыгрузитьORDRSPСервер(Документ, НомерИДатаЗаказа, Buyer_ILN, DeliveryPoint_ILN, Receiver_ILN,Seller_ILN,СписокНоменклатур)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();	
	OrderResponseNumber = СокрЛП(Документ.Номер);//1234567890
	OrderResponseDate = Формат(Документ.Дата,"ДФ = гггг-ММ-дд");//2001-06-06
	
	Попытка
		
		ExpectedDeliveryDate = Формат(Документ.ДатаОтгрузки,"ДФ = гггг-ММ-дд");//2021-05-07
		
		Если Не ЗначениеЗаполнено(ExpectedDeliveryDate) Тогда
			ExpectedDeliveryDate = Формат(Документ.Дата+24*60*60,"ДФ = гггг-ММ-дд");//2021-05-07
		КонецЕсли;
		
	Исключение
		ExpectedDeliveryDate = Формат(Документ.Дата+24*60*60,"ДФ = гггг-ММ-дд");//2021-05-07
	КонецПопытки; 
	Если Объект.Бухгалтерия Тогда
		ВалютаДокумента = Документ.ВалютаДокумента.Наименование;
	Иначе
		ВалютаДокумента = Документ.Валюта.Наименование;
	КонецЕсли;
	OrderResponseCurrency = "RUR";//RUR
	DocumentFunctionCode = "O";//O
	Remarks = Неопределено;//Модель "Ракатанга-790" с инжектором	
	
	Если Не НомерИДатаЗаказа=Неопределено Тогда
		
		BuyerOrderNumber = НомерИДатаЗаказа.Номер;//1234567890
		BuyerOrderDate = НомерИДатаЗаказа.Дата;//2001-05-31
		
	Иначе
		
		BuyerOrderNumber = "";
		BuyerOrderDate = "";
		
	КонецЕсли;
		
	Если Объект.УТАП Тогда
		
		Buyer_Name = Лев(СтрЗаменить(Документ.Партнер.Наименование,"""",""),175);//1234567890123
		Попытка DeliveryPoint_Name = Лев(СтрЗаменить(Документ.алкПунктРазгрузки.Наименование,"""",""),175);Исключение DeliveryPoint_Name = Неопределено; КонецПопытки;//1234567890123 
		
	Иначе
		
		Попытка DeliveryPoint_Name = Лев(СтрЗаменить(Документ.Контрагент.Наименование,"""",""),175);Исключение DeliveryPoint_Name = Неопределено; КонецПопытки;//1234567890123 	
		Если Объект.Бухгалтерия Тогда
			 Buyer_Name = Лев(СтрЗаменить(Документ.Контрагент.Наименование,"""",""),175);
		Иначе
			Buyer_Name = Лев(СтрЗаменить(Документ.Партнер.Наименование,"""",""),175);
		Конецесли;
		
	КонецЕсли;
	
	Seller_Name = Лев(СтрЗаменить(Документ.Организация.Наименование,"""",""),175);//1234567890123	
	
	StreetAndNumber = Неопределено;
	CityName =Неопределено;
	PostalCode = Неопределено;
	Country = Неопределено;
	
	Попытка
		
		СтруктураАдреса = ПолучитьСтруктуруАдреса(Документ.АдресДоставки);//Город//Дом//Индекс//Квартира//Корпус//НаселенныйПункт//Район//Регион//Страна//ТипДома//ТипКвартиры//ТипКорпуса//Улица
		StreetAndNumber = ?(ЗначениеЗаполнено(СтруктураАдреса.Улица) и ЗначениеЗаполнено(СтруктураАдреса.Дом),СтруктураАдреса.Улица+", "+СтруктураАдреса.ТипДома+" "+СтруктураАдреса.Дом,Неопределено);//Бурятское ш. влад.112
		CityName = СтруктураАдреса.Город;//ЧО, г.Конючинск
		PostalCode = СтруктураАдреса.Индекс;//123456
		
	Исключение
		
		Попытка
			
			Если СтрДлина(Документ.АдресДоставки)<=140 Тогда
				StreetAndNumber = Документ.АдресДоставки;
			КонецЕсли;
			
		Исключение
		КонецПопытки; 
		
	КонецПопытки;
	Если Объект.Бухгалтерия Тогда
		ЦенаВключаетНДС = Документ.СуммаВключаетНДС;
	Иначе
		ЦенаВключаетНДС = Документ.ЦенаВключаетНДС;
	КонецЕсли;
	TotalLines = Формат(Документ.Товары.Количество(),"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");//115
	TotalAmount = Формат(Документ.Товары.Итог("Количество"),"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");//5138.000
	ВсегоНДС = Документ.Товары.Итог("СуммаНДС");
	
	Если ЦенаВключаетНДС Тогда
		
		TotalNetAmount = Формат(Документ.Товары.Итог("Сумма")-ВсегоНДС,"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");//260000.3100
		TotalGrossAmount = Формат(Документ.Товары.Итог("Сумма"),"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");//8339.2600
		
	Иначе
		
		TotalNetAmount = Формат(Документ.Товары.Итог("Сумма"),"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");//260000.3100
		TotalGrossAmount = Формат(Документ.Товары.Итог("Сумма")+ВсегоНДС,"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");//8339.2600
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document-OrderResponse");
	ЗаписьXML.ЗаписатьНачалоЭлемента("OrderResponse-Header");
		Если ЗначениеЗаполнено(OrderResponseNumber) Тогда ЗаписатьXML(ЗаписьXML,OrderResponseNumber,"OrderResponseNumber") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //OrderResponseNumber"); КонецЕсли;//1234567890
		Если ЗначениеЗаполнено(OrderResponseDate) Тогда ЗаписатьXML(ЗаписьXML,OrderResponseDate,"OrderResponseDate") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //OrderResponseDate"); КонецЕсли;//2001-06-06
		Если ЗначениеЗаполнено(ExpectedDeliveryDate) Тогда ЗаписатьXML(ЗаписьXML,ExpectedDeliveryDate,"ExpectedDeliveryDate") КонецЕсли;//2021-05-07
		Если ЗначениеЗаполнено(OrderResponseCurrency) Тогда ЗаписатьXML(ЗаписьXML,OrderResponseCurrency,"OrderResponseCurrency") КонецЕсли;//RUR
		Если ЗначениеЗаполнено(DocumentFunctionCode) Тогда ЗаписатьXML(ЗаписьXML,DocumentFunctionCode,"DocumentFunctionCode") КонецЕсли;//O
		Если ЗначениеЗаполнено(Remarks) Тогда ЗаписатьXML(ЗаписьXML,Remarks,"Remarks") КонецЕсли;//Модель "Ракатанга-790" с инжектором
	ЗаписьXML.ЗаписатьНачалоЭлемента("Order");
		Если ЗначениеЗаполнено(BuyerOrderNumber) Тогда ЗаписатьXML(ЗаписьXML,BuyerOrderNumber,"BuyerOrderNumber") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //BuyerOrderNumber"); КонецЕсли;//1234567890
		Если ЗначениеЗаполнено(BuyerOrderDate) Тогда ЗаписатьXML(ЗаписьXML,BuyerOrderDate,"BuyerOrderDate") КонецЕсли;//2001-05-31
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Order

	ЗаписьXML.ЗаписатьКонецЭлемента();//*OrderResponse-Header
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document-Parties");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Sender");
		Если ЗначениеЗаполнено(Seller_ILN) Тогда ЗаписатьXML(ЗаписьXML,Seller_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Sender/ILN"); КонецЕсли;//4607166039996
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Sender

	ЗаписьXML.ЗаписатьНачалоЭлемента("Receiver");
		Если ЗначениеЗаполнено(Receiver_ILN) Тогда ЗаписатьXML(ЗаписьXML,Receiver_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Receiver/ILN"); КонецЕсли;//4606038000003
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Receiver

	ЗаписьXML.ЗаписатьКонецЭлемента();//*Document-Parties
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("OrderResponse-Parties");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Buyer");
		Если ЗначениеЗаполнено(Buyer_ILN) Тогда ЗаписатьXML(ЗаписьXML,Buyer_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Buyer/ILN"); КонецЕсли;//1234567890123
		Если ЗначениеЗаполнено(Buyer_Name) Тогда ЗаписатьXML(ЗаписьXML,Buyer_Name,"Name") КонецЕсли;//ЗАО " ТД" Перекресток"
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Buyer

	ЗаписьXML.ЗаписатьНачалоЭлемента("Seller");
		Если ЗначениеЗаполнено(Seller_ILN) Тогда ЗаписатьXML(ЗаписьXML,Seller_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Seller/ILN"); КонецЕсли;//1234567890123
		Если ЗначениеЗаполнено(Seller_Name) Тогда ЗаписатьXML(ЗаписьXML,Seller_Name,"Name") КонецЕсли;//ЗАО "Три Поросёнка;
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Seller

	ЗаписьXML.ЗаписатьНачалоЭлемента("DeliveryPoint");
		Если ЗначениеЗаполнено(DeliveryPoint_ILN) Тогда ЗаписатьXML(ЗаписьXML,DeliveryPoint_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //DeliveryPoint/ILN"); КонецЕсли;//1234567890123
		Если ЗначениеЗаполнено(DeliveryPoint_Name) Тогда ЗаписатьXML(ЗаписьXML,DeliveryPoint_Name,"Name") КонецЕсли;//ЗАО " ТД" Перекресток"
		Если ЗначениеЗаполнено(StreetAndNumber) Тогда ЗаписатьXML(ЗаписьXML,StreetAndNumber,"StreetAndNumber") КонецЕсли;
		Если ЗначениеЗаполнено(CityName) Тогда ЗаписатьXML(ЗаписьXML,CityName,"CityName") КонецЕсли;
		Если ЗначениеЗаполнено(PostalCode) Тогда ЗаписатьXML(ЗаписьXML,PostalCode,"PostalCode") КонецЕсли;
		Если ЗначениеЗаполнено(Country) Тогда ЗаписатьXML(ЗаписьXML,Country,"Country") КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();//*DeliveryPoint

	ЗаписьXML.ЗаписатьКонецЭлемента();//*OrderResponse-Parties

	ЗаписьXML.ЗаписатьНачалоЭлемента("OrderResponse-Lines");
	
	Для Сч = 0 По СписокНоменклатур.Количество()-1 Цикл
		
		Ключ = "Строка" + Строка(сч);
		СтрукутураСтрока = СписокНоменклатур[Ключ];
		LineNumber = СтрукутураСтрока.LineNumber;
		EAN = СтрукутураСтрока.EAN;
		КодНоменклатурыПоставщика = СтрукутураСтрока.КодНоменклатурыПоставщика;
		КодНоменклатурыПокупателя = СтрукутураСтрока.КодНоменклатурыПокупателя;
		ОписаниеНоменклатурыПоставщика = СтрукутураСтрока.ОписаниеНоменклатурыПоставщика;
		КоличествоВДокументе = СтрукутураСтрока.КоличествоВДокументе;
		КоэффициентВДокументе = СтрукутураСтрока.КоэффициентВДокументе;
		UnitOfMeasure = СтрукутураСтрока.UnitOfMeasure;
		ЦенаБезНДС = Формат(Число(СтрукутураСтрока.ЦенаБезНДС),"ЧДЦ=2; ЧРД=.; ЧРГ=''");
		ЦенаСНДС = Формат(Число(СтрукутураСтрока.ЦенаСНДС),"ЧДЦ=2; ЧРД=.; ЧРГ=''");
		СтавкаНДС = СтрукутураСтрока.СтавкаНДС;
		СуммаБезНДС = Формат(Число(СтрукутураСтрока.СуммаБезНДС),"ЧДЦ=2; ЧРД=.; ЧРГ=; ЧГ=");
		СуммаСНДС = Формат(Число(СтрукутураСтрока.СуммаСНДС),"ЧДЦ=2; ЧРД=.; ЧРГ=; ЧГ=");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Line");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Line-Item");
			Если ЗначениеЗаполнено(LineNumber) Тогда ЗаписатьXML(ЗаписьXML,LineNumber,"LineNumber") КонецЕсли;
			Если ЗначениеЗаполнено(EAN) Тогда ЗаписатьXML(ЗаписьXML,EAN,"EAN") КонецЕсли;
			Если ЗначениеЗаполнено(КодНоменклатурыПокупателя) Тогда ЗаписатьXML(ЗаписьXML,КодНоменклатурыПокупателя,"BuyerItemCode") КонецЕсли;
			Если ЗначениеЗаполнено(КодНоменклатурыПоставщика) Тогда ЗаписатьXML(ЗаписьXML,КодНоменклатурыПоставщика,"SupplierItemCode") КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеНоменклатурыПоставщика) Тогда ЗаписатьXML(ЗаписьXML,ОписаниеНоменклатурыПоставщика,"ItemDescription") КонецЕсли;
			
			Если ЗначениеЗаполнено(КоличествоВДокументе) Тогда ЗаписатьXML(ЗаписьXML,КоличествоВДокументе,"OrderedQuantity") КонецЕсли;
			Если ЗначениеЗаполнено(КоличествоВДокументе) Тогда ЗаписатьXML(ЗаписьXML,КоличествоВДокументе,"AllocatedDelivered") КонецЕсли;
			Если ЗначениеЗаполнено(КоэффициентВДокументе) Тогда ЗаписатьXML(ЗаписьXML,КоэффициентВДокументе,"OrderedUnitPacksize") КонецЕсли;
			Если ЗначениеЗаполнено(UnitOfMeasure) Тогда ЗаписатьXML(ЗаписьXML,UnitOfMeasure,"UnitOfMeasure") КонецЕсли;
			Если ЗначениеЗаполнено(ЦенаБезНДС) Тогда ЗаписатьXML(ЗаписьXML,ЦенаБезНДС,"OrderedUnitNetPrice") КонецЕсли;
			Если ЗначениеЗаполнено(ЦенаСНДС) Тогда ЗаписатьXML(ЗаписьXML,ЦенаСНДС,"OrderedUnitGrossPrice") КонецЕсли;
			Если ЗначениеЗаполнено(СтавкаНДС) Тогда ЗаписатьXML(ЗаписьXML,СтавкаНДС,"TaxRate") КонецЕсли;
			Если ЗначениеЗаполнено(СуммаБезНДС) Тогда ЗаписатьXML(ЗаписьXML,СуммаБезНДС,"NetAmount") КонецЕсли;
			Если ЗначениеЗаполнено(СуммаСНДС) Тогда ЗаписатьXML(ЗаписьXML,СуммаСНДС,"GrossAmount") КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();//*Line-Item
		
		ЗаписьXML.ЗаписатьКонецЭлемента();//*Line
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();//*OrderResponse-Lines
	//*
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("OrderResponse-Summary");
		Если ЗначениеЗаполнено(TotalLines) Тогда ЗаписатьXML(ЗаписьXML,TotalLines,"TotalLines") КонецЕсли;//5
		Если ЗначениеЗаполнено(TotalAmount) Тогда ЗаписатьXML(ЗаписьXML,TotalAmount,"TotalAmount") КонецЕсли;//82.0000
		Если ЗначениеЗаполнено(TotalNetAmount) Тогда ЗаписатьXML(ЗаписьXML,TotalNetAmount,"TotalNetAmount") КонецЕсли;//0.0000
		Если ЗначениеЗаполнено(TotalGrossAmount) Тогда ЗаписатьXML(ЗаписьXML,TotalGrossAmount,"TotalGrossAmount") КонецЕсли;//8339.2600
	ЗаписьXML.ЗаписатьКонецЭлемента();//*OrderResponse-Summary

	ЗаписьXML.ЗаписатьКонецЭлемента();//*Document-OrderResponse
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

&НаСервере
Функция ПолучитьЗаказ(Документ)
	Если Объект.Бухгалтерия Тогда
		Попытка
			Если Объект.СчётВместоРеализацииБУХ Тогда
				Если Не ЗначениеЗаполнено(Документ.СчетНаОплатуПокупателю) Тогда
					ВызватьИсключение("Отсутствует ссылка на исходный заказ.");
				Иначе
					Возврат Документ.СчетНаОплатуПокупателю;
				КонецЕсли;
			Иначе
				Возврат Документ;
			КонецЕсли;
		Исключение
			ВызватьИсключение("Отсутствует ссылка на исходный заказ.");
		КонецПопытки;
		
	Иначе
		
		Попытка
			
			Если Не ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
				ВызватьИсключение("Отсутствует ссылка на исходный заказ.");
			Иначе
				Заказ = Документ.ДокументОснование;
			КонецЕсли;		
			
		Исключение
			
			Попытка
				
				Если Не ЗначениеЗаполнено(Документ.ЗаказПокупателя) Тогда
					ВызватьИсключение("Отсутствует ссылка на исходный заказ.");
				Иначе
					Заказ = Документ.ЗаказПокупателя;
				КонецЕсли;
				
			Исключение
				
				Если Не ЗначениеЗаполнено(Документ.ЗаказКлиента) Тогда
					ВызватьИсключение("Отсутствует ссылка на исходный заказ.");
				Иначе
					Заказ = Документ.ЗаказКлиента;
				КонецЕсли;
				
			КонецПопытки;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Заказ;
	
КонецФункции

Функция ВыгрузитьDESADVСервер(Документ, ALCDES, НомерИДатаЗаказа, Buyer_ILN, DeliveryPoint_ILN, Receiver_ILN,Seller_ILN, СписокНоменклатур, Заказ,СтруктПаллет=Неопределено)
			
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	DespatchAdviceNumber = СокрЛП(Документ.Номер);//ГМ-0039203
	DespatchAdviceDate = Формат(Документ.Дата,"ДФ = гггг-ММ-дд");//2011-05-27
	
	Попытка
		EstimatedDeliveryDate = Формат(Заказ.ДатаОтгрузки,"ДФ = гггг-ММ-дд");//2011-05-27
	Исключение
		EstimatedDeliveryDate = Формат(Документ.Дата+24*60*60,"ДФ = гггг-ММ-дд");//2011-05-27
	КонецПопытки; 
	
	Если Не ЗначениеЗаполнено(EstimatedDeliveryDate) ТОгда
		EstimatedDeliveryDate = Формат(Документ.Дата+24*60*60,"ДФ = гггг-ММ-дд");//2011-05-27
	КонецЕсли;
	
	Если ALCDES Тогда
		
		ДанныеТН = ПолучитьДанныеТНПоРеализации(Документ);
		WaybillNumber = ДанныеТН.Номер;
		WaybillDate = ДанныеТН.Дата;
		InvoiceNumber = DespatchAdviceNumber;
		InvoiceDate = DespatchAdviceDate;
		DespatchReferenceNumber = DespatchAdviceNumber; 
		DespatchReferenceDate = DespatchAdviceDate;
		
	Иначе
		
		Попытка
			
			ДанныеТН = ПолучитьДанныеТНПоРеализации(Документ);
			WaybillNumber = ДанныеТН.Номер;
			WaybillDate = ДанныеТН.Дата;
			
			Если Не ЗначениеЗаполнено(WaybillNumber) Тогда
				
				WaybillNumber = DespatchAdviceNumber;
				WaybillDate = DespatchAdviceDate;
				
			КонецЕсли;
			
		Исключение
			
			WaybillNumber = DespatchAdviceNumber;
			WaybillDate = DespatchAdviceDate;
			
		КонецПопытки;
		
		InvoiceNumber = "";
		InvoiceDate = "";
		DespatchReferenceNumber = ""; 
		DespatchReferenceDate = "";
		
	КонецЕсли;
		
	Если Не НомерИДатаЗаказа = Неопределено Тогда		
		
		BuyerOrderNumber = СокрЛП(НомерИДатаЗаказа.Номер);//4516751288	
		BuyerOrderDate = НомерИДатаЗаказа.Дата;
		
	КонецЕсли;
	
	DocumentFunctionCode = "9";//9
	DocumentNameCode = Неопределено;//351
	
	Если ALCDES Тогда
		
		Buyer_Name = Лев(СтрЗаменить(Документ.Партнер.Наименование,"""",""),175);//1234567890123
		ЛИцензия = ПолучитьЛицензию(Документ.Организация, Документ.Партнер);
		
		Если Не ЗначениеЗаполнено(Лицензия) Тогда 
			
			Сообщить("Не удалось получить данные лицензии. Выгрузка невозможна");
			Возврат Неопределено;
			
		КонецЕсли;
		
		Series = СокрЛП(Лицензия.Серия);
		License_Number = СокрЛП(ЛИцензия.Номер);
		IssuingAuthority = СокрЛП(Лицензия.ОрганВыдачи);
		DateOfIssue = Формат(Лицензия.ДатаВыдачи,"ДФ = гггг-ММ-дд");
		ExpirationDate = Формат(ЛИцензия.ДатаОкончанияСрокаДействия,"ДФ = гггг-ММ-дд");
		
	Иначе
		Если Объект.Бухгалтерия Тогда
			Buyer_Name = Лев(СтрЗаменить(Документ.Контрагент.Наименование,"""",""),175);
		Иначе
			Buyer_Name = Лев(СтрЗаменить(Документ.Партнер.Наименование,"""",""),175);//1234567890123
		КонецЕсли;
		
		Попытка 
			DeliveryPoint_Name = Лев(СтрЗаменить(Документ.Контрагент.Наименование,"""",""),175);
		Исключение 
			
			Попытка 
				DeliveryPoint_Name = Лев(СтрЗаменить(Документ.Грузополучатель.Наименование,"""",""),175);
			Исключение 
				DeliveryPoint_Name = Неопределено; 
			КонецПопытки; 
			
		КонецПопытки;
		
	КонецЕсли;
		
	Seller_Name = Лев(СтрЗаменить(Документ.Организация.Наименование,"""",""),175);//1234567890123
	
	StreetAndNumber = Неопределено;
	CityName =Неопределено;
	PostalCode = Неопределено;
	Country = Неопределено;
	
	Попытка
		
		СтруктураАдреса = ПолучитьСтруктуруАдреса(Документ.АдресДоставки);//Город//Дом//Индекс//Квартира//Корпус//НаселенныйПункт//Район//Регион//Страна//ТипДома//ТипКвартиры//ТипКорпуса//Улица
		StreetAndNumber = ?(ЗначениеЗаполнено(СтруктураАдреса.Улица) и ЗначениеЗаполнено(СтруктураАдреса.Дом),СтруктураАдреса.Улица+", "+СтруктураАдреса.ТипДома+" "+СтруктураАдреса.Дом,Неопределено);//Бурятское ш. влад.112
		CityName = СтруктураАдреса.Город;//ЧО, г.Конючинск
		PostalCode = СтруктураАдреса.Индекс;//123456
		
	Исключение
		
		Если СтрДлина(Документ.АдресДоставки)<=140 Тогда
			StreetAndNumber = Документ.АдресДоставки;
		КонецЕсли;
		
	КонецПопытки;
	
	TotalPSequence = "1";//1
	Если Объект.Бухгалтерия Тогда	
		ЦенаВключаетНДС = Документ.СуммаВключаетНДС;
	Иначе
		ЦенаВключаетНДС = Документ.ЦенаВключаетНДС;
	КонецЕсли;
	TotalLines = Формат(Документ.Товары.Количество(),"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");//115
	TotalGoodsDespatchedAmount = Формат(Документ.Товары.Итог("Количество"),"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");//5138.000
	ВсегоНДС = Документ.Товары.Итог("СуммаНДС");
	
	Если ЦенаВключаетНДС Тогда
		
		TotalNetAmount = Формат(Документ.Товары.Итог("Сумма")-ВсегоНДС,"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");//260000.3100
		TotalGrossAmount = Формат(Документ.Товары.Итог("Сумма"),"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");//8339.2600
		
	Иначе
		
		TotalNetAmount = Формат(Документ.Товары.Итог("Сумма"),"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");//260000.3100
		TotalGrossAmount = Формат(Документ.Товары.Итог("Сумма")+ВсегоНДС,"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");//8339.2600
		
	КонецЕсли;
	
	ВсегоНДС = Формат(ВсегоНДС, "ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");
	
	Если ALCDES Тогда		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Document-DespatchAdviceAlco");
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("Document-DespatchAdvice");
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("DespatchAdvice-Header");
	
		Если ЗначениеЗаполнено(DespatchAdviceNumber) Тогда ЗаписатьXML(ЗаписьXML,DespatchAdviceNumber,"DespatchAdviceNumber") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //DespatchAdviceNumber"); КонецЕсли;//ГМ-0039203
		
		Если ЗначениеЗаполнено(DespatchAdviceDate) Тогда ЗаписатьXML(ЗаписьXML,DespatchAdviceDate,"DespatchAdviceDate") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //DespatchAdviceDate"); КонецЕсли;//2011-05-27
		
		Если ЗначениеЗаполнено(WaybillNumber) Тогда ЗаписатьXML(ЗаписьXML,WaybillNumber,"WaybillNumber") Иначе  КонецЕсли;//2011-05-27ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //DespatchAdviceDate");
		
		Если ЗначениеЗаполнено(WaybillDate) Тогда ЗаписатьXML(ЗаписьXML,WaybillDate,"WaybillDate") Иначе  КонецЕсли;//2011-05-27//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //DespatchAdviceDate");
		
		Если ЗначениеЗаполнено(EstimatedDeliveryDate) Тогда ЗаписатьXML(ЗаписьXML,EstimatedDeliveryDate,"EstimatedDeliveryDate") КонецЕсли;//2011-05-27
		
		Если ЗначениеЗаполнено(InvoiceNumber) Тогда ЗаписатьXML(ЗаписьXML,InvoiceNumber,"InvoiceNumber") КонецЕсли;//4516751288
		
		Если ЗначениеЗаполнено(InvoiceDate) Тогда ЗаписатьXML(ЗаписьXML,InvoiceDate,"InvoiceDate") КонецЕсли;//4516751288			
		
		Если ЗначениеЗаполнено(BuyerOrderNumber) Тогда ЗаписатьXML(ЗаписьXML,BuyerOrderNumber,"BuyerOrderNumber") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //BuyerOrderNumber"); КонецЕсли;//4516751288
		
		Если ЗначениеЗаполнено(BuyerOrderDate) Тогда ЗаписатьXML(ЗаписьXML,BuyerOrderDate,"BuyerOrderDate") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //BuyerOrderDate"); КонецЕсли;//4516751288			
		
		Если ЗначениеЗаполнено(DespatchReferenceNumber) Тогда ЗаписатьXML(ЗаписьXML,DespatchReferenceNumber,"DespatchReferenceNumber") Иначе КонецЕсли;//4516751288//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //BDespatchReferenceNumber"); 
		
		Если ЗначениеЗаполнено(DespatchReferenceDate) Тогда ЗаписатьXML(ЗаписьXML,DespatchReferenceDate,"DespatchReferenceDate") Иначе КонецЕсли;//4516751288//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //DespatchReferenceDate"); 
		
		Если ЗначениеЗаполнено(DocumentFunctionCode) Тогда ЗаписатьXML(ЗаписьXML,DocumentFunctionCode,"DocumentFunctionCode") КонецЕсли;//9
		
		Если ЗначениеЗаполнено(DocumentNameCode) Тогда ЗаписатьXML(ЗаписьXML,DocumentNameCode,"DocumentNameCode") КонецЕсли;//351
		
		Если НЕ ALCDES Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Reference");
				ЗаписьXML.ЗаписатьНачалоЭлемента("Reference-Elements");
					ЗаписьXML.ЗаписатьНачалоЭлемента("Reference-Element");
						ЗаписатьXML(ЗаписьXML,"Z01","Reference-Type");//351
						
						Если ЗначениеЗаполнено(TotalGoodsDespatchedAmount) Тогда ЗаписатьXML(ЗаписьXML,TotalGoodsDespatchedAmount,"Reference-Id") КонецЕсли;//351
						
					ЗаписьXML.ЗаписатьКонецЭлемента();
					ЗаписьXML.ЗаписатьНачалоЭлемента("Reference-Element");
						ЗаписатьXML(ЗаписьXML,"Z02","Reference-Type");//351
						
						Если ЗначениеЗаполнено(TotalLines) Тогда ЗаписатьXML(ЗаписьXML,TotalLines,"Reference-Id") КонецЕсли;//351
						
					ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();//*DespatchAdvice-Header
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document-Parties");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Sender");
		
			Если ЗначениеЗаполнено(Seller_ILN) Тогда ЗаписатьXML(ЗаписьXML,Seller_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Sender/ILN"); КонецЕсли;//4607166039996
		
		ЗаписьXML.ЗаписатьКонецЭлемента();//*Sender

		ЗаписьXML.ЗаписатьНачалоЭлемента("Receiver");
		
			Если ЗначениеЗаполнено(Receiver_ILN) Тогда ЗаписатьXML(ЗаписьXML,Receiver_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Receiver/ILN"); КонецЕсли;//4606038000003
		
		ЗаписьXML.ЗаписатьКонецЭлемента();//*Receiver

	ЗаписьXML.ЗаписатьКонецЭлемента();//*Document-Parties
	
	Если ALCDES Тогда
		
		ConveyanceReferenceNumber = ДанныеТН.ГосНомер;
		ModeOfTransport = ДанныеТН.ТИпАвто;
		Track = "true";
		ЗаписьXML.ЗаписатьНачалоЭлемента("DespatchAdvice-Transport");
		
			Если ЗначениеЗаполнено(ConveyanceReferenceNumber) Тогда ЗаписатьXML(ЗаписьXML,ConveyanceReferenceNumber,"ConveyanceReferenceNumber") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега ConveyanceReferenceNumber"); КонецЕсли;//4606038000003
			
			Если ЗначениеЗаполнено(Track) Тогда ЗаписатьXML(ЗаписьXML,Track,"Track") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега Track"); КонецЕсли;//4606038000003
			
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	//из паллетного листа
	Если Объект.ИспользоватьSSCC Тогда
		Если ЗначениеЗаполнено(СтруктПаллет) Тогда 
			Если ЗначениеЗаполнено(СтруктПаллет.НомерМашины) Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("DespatchAdvice-Transport");
					Если ЗначениеЗаполнено(СтруктПаллет.НомерМашины) Тогда ЗаписатьXML(ЗаписьXML,СтруктПаллет.НомерМашины,"ConveyanceReferenceNumber") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //ConveyanceReferenceNumber"); КонецЕсли;//30
					Если ЗначениеЗаполнено(СтруктПаллет.Марка) Тогда ЗаписатьXML(ЗаписьXML,СтруктПаллет.Марка,"VehicleType") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //VehicleType"); КонецЕсли;//30
					Если ЗначениеЗаполнено(СтруктПаллет.Водитель) Тогда ЗаписатьXML(ЗаписьXML,СтруктПаллет.Водитель,"CarrierName") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //CarrierName"); КонецЕсли;//true
				ЗаписьXML.ЗаписатьКонецЭлемента();//*DespatchAdvice-Transport
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("DespatchAdvice-Parties");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Buyer");
		
			Если ЗначениеЗаполнено(Buyer_ILN) Тогда ЗаписатьXML(ЗаписьXML,Buyer_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Buyer/ILN"); КонецЕсли;//4607070199991
			
			Если ЗначениеЗаполнено(Buyer_Name) Тогда ЗаписатьXML(ЗаписьXML,Buyer_Name,"Name") КонецЕсли;//МЕТРО Кэш энд Керри, ООО
			
		ЗаписьXML.ЗаписатьКонецЭлемента();//*Buyer

		ЗаписьXML.ЗаписатьНачалоЭлемента("Seller");
		
			Если ЗначениеЗаполнено(Seller_ILN) Тогда ЗаписатьXML(ЗаписьXML,Seller_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Seller/ILN"); КонецЕсли;//1234567890123
			
			Если ЗначениеЗаполнено(Seller_Name) Тогда ЗаписатьXML(ЗаписьXML,Seller_Name,"Name") КонецЕсли;//Кукку-Рукку, ООО
			
			Если ALCDES Тогда
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("License");					
				
					Если ЗначениеЗаполнено(Series) Тогда ЗаписатьXML(ЗаписьXML,Series,"Series") КонецЕсли;//Кукку-Рукку, ООО
					
					Если ЗначениеЗаполнено(License_Number) Тогда ЗаписатьXML(ЗаписьXML,License_Number,"Number") КонецЕсли;//Кукку-Рукку, ООО
					
					Если ЗначениеЗаполнено(IssuingAuthority) Тогда ЗаписатьXML(ЗаписьXML,IssuingAuthority,"IssuingAuthority") КонецЕсли;//Кукку-Рукку, ООО
					
					Если ЗначениеЗаполнено(DateOfIssue) Тогда ЗаписатьXML(ЗаписьXML,DateOfIssue,"DateOfIssue") КонецЕсли;//Кукку-Рукку, ООО
					
					Если ЗначениеЗаполнено(ExpirationDate) Тогда ЗаписатьXML(ЗаписьXML,ExpirationDate,"ExpirationDate") КонецЕсли;//Кукку-Рукку, ООО
					
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
			
		ЗаписьXML.ЗаписатьКонецЭлемента();//*Seller

		ЗаписьXML.ЗаписатьНачалоЭлемента("DeliveryPoint");
		
			Если ЗначениеЗаполнено(DeliveryPoint_ILN) Тогда ЗаписатьXML(ЗаписьXML,DeliveryPoint_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //DeliveryPoint/ILN"); КонецЕсли;//1234567890123
			
			Если ЗначениеЗаполнено(DeliveryPoint_Name) Тогда ЗаписатьXML(ЗаписьXML,DeliveryPoint_Name,"Name") КонецЕсли;//Nazvanie magazina
			
			Если ЗначениеЗаполнено(StreetAndNumber) Тогда ЗаписатьXML(ЗаписьXML,StreetAndNumber,"StreetAndNumber") КонецЕсли;//Бурятское ш. влад.112
			
			Если ЗначениеЗаполнено(CityName) Тогда ЗаписатьXML(ЗаписьXML,CityName,"CityName") КонецЕсли;//ЧО, г.Конючинск
			
			Если ЗначениеЗаполнено(PostalCode) Тогда ЗаписатьXML(ЗаписьXML,PostalCode,"PostalCode") КонецЕсли;//123456
			
			Если ЗначениеЗаполнено(Country) Тогда ЗаписатьXML(ЗаписьXML,Country,"Country") КонецЕсли;//RU
			
		ЗаписьXML.ЗаписатьКонецЭлемента();//*DeliveryPoint
		
		Если ALCDES Тогда
			
			TaxRegistrationReasonCode = СокрЛП(Документ.Организация.КПП);
			ЗаписьXML.ЗаписатьНачалоЭлемента("ShipFrom");
			
				Если ЗначениеЗаполнено(Seller_ILN) Тогда ЗаписатьXML(ЗаписьXML,Seller_ILN,"ILN") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Buyer/ILN"); КонецЕсли;//4607070199991//iln  поставщика
				
				Если ЗначениеЗаполнено(Seller_Name) Тогда ЗаписатьXML(ЗаписьXML,Seller_Name,"Name") КонецЕсли;//МЕТРО Кэш энд Керри, ООО				
				
				Если ЗначениеЗаполнено(TaxRegistrationReasonCode) Тогда ЗаписатьXML(ЗаписьXML,TaxRegistrationReasonCode,"TaxRegistrationReasonCode") КонецЕсли;//МЕТРО Кэш энд Керри, ООО   //кпп грузоотправителя				
				
			ЗаписьXML.ЗаписатьКонецЭлемента();//*Buyer
			Carrier_TaxID = ДанныеТН.Перевозчик.ИНН;
			Carrier_TaxRegistrationReasonCode = ДанныеТН.Перевозчик.КПП;
			
			Попытка
				Carrier_Name = ДанныеТН.Перевозчик.Наименование;
			Исключение
				Carrier_Name = "";
			КонецПопытки;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Carrier"); //информация о перевозчике
			
				Если ЗначениеЗаполнено(Carrier_TaxID) Тогда ЗаписатьXML(ЗаписьXML,Carrier_TaxID,"TaxID") Иначе ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Buyer/ILN"); КонецЕсли;//4607070199991//iln  поставщика
				
				Если ЗначениеЗаполнено(Carrier_TaxRegistrationReasonCode) Тогда ЗаписатьXML(ЗаписьXML,Carrier_TaxRegistrationReasonCode,"TaxRegistrationReasonCode") КонецЕсли;//МЕТРО Кэш энд Керри, ООО   //кпп грузоотправителя
				
				Если ЗначениеЗаполнено(Carrier_Name) Тогда ЗаписатьXML(ЗаписьXML,Carrier_Name,"Name") КонецЕсли;//МЕТРО Кэш энд Керри, ООО				
				
			ЗаписьXML.ЗаписатьКонецЭлемента();//*Buyer

		КонецЕсли;

	ЗаписьXML.ЗаписатьКонецЭлемента();//*DespatchAdvice-Parties
	
	//Выгрузка табличной части
	ЗаписьXML.ЗаписатьНачалоЭлемента("DespatchAdvice-Consignment");
		ЗаписьXML.ЗаписатьНачалоЭлемента("Packing-Sequence");
		СчетчикSSCC = 1;
		
		Для сч = 0 ПО СписокНоменклатур.Количество()-1 Цикл
			
			Ключ = "Строка" + Строка(Сч);
			СтруктураСтроки = СписокНоменклатур[Ключ];
			СтавкаНДС = СтруктураСтроки.СтавкаНДС;
			ЦенаБезНДС = СтруктураСтроки.ЦенаБезНДС;
			ЦенаСНДС = СтруктураСтроки.ЦенаСНДС;					
			
			СуммаБезНДС = СтруктураСтроки.СуммаБезНДС;
			СуммаСНДС = СтруктураСтроки.СуммаСНДС;
			СуммаНДС = СуммаСНДС - СуммаБезНДС;
			
			LineNumber = СтруктураСтроки.LineNumber;//1
			EAN = СтруктураСТроки.EAN;
			КодНоменклатурыПокупателя = СтруктураСТроки.КодНоменклатурыПокупателя;
			КодНоменклатурыПоставщика = СтруктураСТроки.КодНоменклатурыПоставщика;
			ОписаниеНоменклатурыПоставщика = СтруктураСтроки.ОписаниеНоменклатурыПоставщика;
					
			UnitOfMeasure = СтруктураСтроки.UnitOfMeasure;
			
			КоличествоВДокументе = СтруктураСтроки.КоличествоВДокументе;//126.000
			КоэффициентВДокументе = СтруктураСтроки.КоэффициентВДокументе;//1.000
			ЦенаБезНДС = Формат(Число(ЦенаБезНДС),"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");//74.9500
			СуммаБезНДС = Формат(Число(СуммаБезНДС),"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");//9446.2200
			ЦенаСНДС = Формат(Число(ЦенаСНДС),"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");//74.9500
			СуммаСНДС = Формат(Число(СуммаСНДС),"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");//9446.2200
			СтавкаНДС = Формат(Число(СтавкаНДС),"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");//18.00
			
			Reference_Type = "ABT";//ГТД
			CountryOfOrigin = Неопределено;
			
			Попытка
				
				Reference_Id = СтруктураСтроки.Reference_Id;
				КодСтраны = СтруктураСтроки.КодСтраны;
				
			Исключение		
			КонецПопытки;
			
			Попытка
				CountryOfOrigin = СтруктураСтроки.CountryOfOrigin;			
			Исключение
			КонецПопытки;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Line");
			ЗаписьXML.ЗаписатьНачалоЭлемента("Line-Item");
			
				Если ЗначениеЗаполнено(LineNumber) Тогда ЗаписатьXML(ЗаписьXML,LineNumber,"LineNumber") КонецЕсли;
				
				Если ЗначениеЗаполнено(EAN) Тогда ЗаписатьXML(ЗаписьXML,EAN,"EAN") КонецЕсли;
				
				Если ЗначениеЗаполнено(КодНоменклатурыПокупателя) Тогда ЗаписатьXML(ЗаписьXML,КодНоменклатурыПокупателя,"BuyerItemCode") КонецЕсли;
				
				Если ЗначениеЗаполнено(КодНоменклатурыПоставщика) Тогда ЗаписатьXML(ЗаписьXML,КодНоменклатурыПоставщика,"SupplierItemCode") КонецЕсли;
				
				Если ЗначениеЗаполнено(ОписаниеНоменклатурыПоставщика) Тогда ЗаписатьXML(ЗаписьXML,ОписаниеНоменклатурыПоставщика,"ItemDescription") КонецЕсли;			
				
				Если ЗначениеЗаполнено(КоличествоВДокументе) Тогда ЗаписатьXML(ЗаписьXML,КоличествоВДокументе,"QuantityDespatched") КонецЕсли;
				
				Если ЗначениеЗаполнено(КоэффициентВДокументе) Тогда ЗаписатьXML(ЗаписьXML,КоэффициентВДокументе,"UnitPacksize") КонецЕсли;
				
				Если ALCDES Тогда
					
					UnitVolume = СтруктураСтроки.UnitVolume;//Формат(СтрокаТаблицы.Номенклатура.алкЕмкость,"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
					AlcoholCode = СтруктураСтроки.AlcoholCode;//AlcoholCode;СтрокаТаблицы.Серия.алкВидПродукции.Код;
					PackagingDate = СтруктураСтроки.PackagingDate;//Формат(СтрокаТаблицы.Серия.АХ_ДатаВвоза, "ДФ = гггг-ММ-дд" );
					
					Если ЗначениеЗаполнено(UnitVolume) Тогда ЗаписатьXML(ЗаписьXML,UnitVolume,"UnitVolume") КонецЕсли;
					
					Если ЗначениеЗаполнено(AlcoholCode) Тогда ЗаписатьXML(ЗаписьXML,AlcoholCode,"AlcoholCode") КонецЕсли;
					
					Если ЗначениеЗаполнено(UnitOfMeasure) Тогда ЗаписатьXML(ЗаписьXML,UnitOfMeasure,"UnitOfMeasure") КонецЕсли;
					
					Если ЗначениеЗаполнено(PackagingDate) Тогда ЗаписатьXML(ЗаписьXML,PackagingDate,"PackagingDate") КонецЕсли;
					
				Иначе
					Если ЗначениеЗаполнено(UnitOfMeasure) Тогда ЗаписатьXML(ЗаписьXML,UnitOfMeasure,"UnitOfMeasure") КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЦенаБезНДС) Тогда ЗаписатьXML(ЗаписьXML,ЦенаБезНДС,"UnitNetPrice") КонецЕсли;
				
				Если ЗначениеЗаполнено(ЦенаСНДС) Тогда ЗаписатьXML(ЗаписьXML,ЦенаСНДС,"UnitGrossPrice") КонецЕсли;
							
				Если ЗначениеЗаполнено(СтавкаНДС) Тогда ЗаписатьXML(ЗаписьXML,СтавкаНДС,"TaxRate") КонецЕсли;
				
				Если ЗначениеЗаполнено(СуммаБезНДС) Тогда ЗаписатьXML(ЗаписьXML,СуммаБезНДС,"NetAmount") КонецЕсли;
				
				Если ЗначениеЗаполнено(СуммаСНДС) Тогда ЗаписатьXML(ЗаписьXML,СуммаСНДС,"GrossAmount") КонецЕсли;
							
			ЗаписьXML.ЗаписатьКонецЭлемента();//*Line-Item
			//SSCC////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		Если Объект.ИспользоватьSSCC Тогда

			Если Объект.ТаблицаРаспределения.Количество()<>0 Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("Package-Identification");
					
					СтрокиПаллет = Объект.ТаблицаРаспределения.Выгрузить(Новый Структура("Номенклатура",СтруктураСтроки.Номенклатура));
					КодыПаллетСНоменклатурой = СтрокиПаллет.ВыгрузитьКолонку("SSCC");
					Для каждого Паллета Из Объект.ТаблицаПаллет Цикл
						Если КодыПаллетСНоменклатурой.Найти(Паллета.SSCC)=Неопределено Тогда
							Продолжить;
						КонецЕсли;
						ID_Begin = Паллета.SSCC;
						
						LengthP = Формат(Паллета.Длина,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0");
						WidthP = Формат(Паллета.Ширина,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0");
						HeightP = ?(ЗначениеЗаполнено(Паллета.Высота),Формат(Паллета.Высота,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0"),Неопределено);
						UnitOfMeasureS = СтруктПаллет.ЕдиницаИзмеренияРазмеров;	//ЕдИзРазм;
						
						PalletWeight = Формат(Паллета.Вес,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0");
						UnitOfMeasure = "KGM";
						QuantityPerPack = Формат(СтрокиПаллет.Скопировать(Новый Структура("SSCC",Паллета.SSCC)).Итог("Упаковано"),"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");//количество данной номенклатуры на паллете
						//QuantityPerPack = Формат(ТаблицаРаспределения.Выгрузить(Новый Структура("SSCC",Паллета.SSCC)).Итог("Упаковано"),"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");//количество всей номенклатуры на паллете
						//QuantityPerPack = Формат(ТаблицаРаспределения.Выгрузить(Новый Структура("SSCC",Паллета.SSCC)).Количество(),"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");//количество отдельных позиций на паллете
						PackagingUnit = Паллета.ТипПаллеты;					
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("Goods-Identity");
							ЗаписатьXML(ЗаписьXML,"BJ","Type");
							
							ЗаписьXML.ЗаписатьНачалоЭлемента("Range");
								ЗаписатьXML(ЗаписьXML,ID_Begin,"ID-Begin");
							ЗаписьXML.ЗаписатьКонецЭлемента();//*Range
							
							ЗаписатьXML(ЗаписьXML,QuantityPerPack,"QuantityPerPack");
							ЗаписатьXML(ЗаписьXML,PackagingUnit,"PackagingUnit");
							
							ЗаписьXML.ЗаписатьНачалоЭлемента("Package-Measurements");
							
								ЗаписьXML.ЗаписатьНачалоЭлемента("Size");
									ЗаписатьXML(ЗаписьXML,LengthP,"Length");
									ЗаписатьXML(ЗаписьXML,WidthP,"Width");
									Если ЗначениеЗаполнено(HeightP) Тогда ЗаписатьXML(ЗаписьXML,HeightP,"Height"); КонецЕсли;   
									ЗаписатьXML(ЗаписьXML,UnitOfMeasureS,"UnitOfMeasure");
								ЗаписьXML.ЗаписатьКонецЭлемента();//*Size
								
								ЗаписьXML.ЗаписатьНачалоЭлемента("Weight");
									ЗаписатьXML(ЗаписьXML,UnitOfMeasure,"UnitOfMeasure");
									ЗаписатьXML(ЗаписьXML,PalletWeight,"PalletWeight");
								ЗаписьXML.ЗаписатьКонецЭлемента();//*Weight
							ЗаписьXML.ЗаписатьКонецЭлемента();//*Package-Measurements
							
						ЗаписьXML.ЗаписатьКонецЭлемента();//*Goods-Identity
					КонецЦикла;
				ЗаписьXML.ЗаписатьКонецЭлемента();//*Package-Identification
			КонецЕсли;
		Конецесли;
		//SSCC////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			//Если Объект.ИспользоватьSSCC Тогда
			//	ЗаписьXML.ЗаписатьНачалоЭлемента("Package-Identification");
			//		КоличествоSSCC = СтруктураСтроки.SSCC.Количество();
			//		
			//		Для СчетчикSSCC = 0  По КоличествоSSCC -1 Цикл						
			//			
			//			КлючSSCC = "Строка" + Строка(СчетчикSSCC);				
			//			СтруктураSSCC = СтруктураСтроки.SSCC[КлючSSCC];
			//			ID_Begin = СтруктураSSCC.SSCC;									
			//			Goods_Type = "BJ";//Вид упаковки паллета/коробка/контейнер (BJ=паллет)
			//			QuantityPerPack = СтруктураSSCC.КоличествоНаПаллете;
			//			PackagingUnit = "201";
			//			Destination_ILN = "";//конечная точка доставки
			//			EDI_Length = ФОрмат(Число(0.8),"ЧДЦ=3; ЧРД=.");										
			//			EDI_Width = Формат(Число(1.2),"ЧДЦ=3; ЧРД=.");
			//			EDI_Height = "";									
			//			EDI_PalletWeight = СтруктураSSCC.ВесПалеты;//(QuantityPerPack/СтруктураСтроки.Номенклатура.КоэффициентЕдиницыДляОтчетов)*СтруктураСтроки.Номенклатура.ОсновнаяУпаковка.Вес;
			//			EDI_PalletWeight = Формат(EDI_PalletWeight,"ЧДЦ=3; ЧРД=.");
			//			
			//			Если ЗначениеЗаполнено(ID_Begin) Тогда			
			//				
			//				ЗаписьXML.ЗаписатьНачалоЭлемента("Goods-Identity");
			//					ЗаписатьXML(ЗаписьXML,Goods_Type,"Type");
			//					ЗаписьXML.ЗаписатьНачалоЭлемента("Range");
			//						ЗаписатьXML(ЗаписьXML,ID_Begin,"ID-Begin");
			//					ЗаписьXML.ЗаписатьКонецЭлемента();//*Range
			//					ЗаписатьXML(ЗаписьXML,QuantityPerPack,"QuantityPerPack");
			//					ЗаписатьXML(ЗаписьXML,PackagingUnit,"PackagingUnit");
			//				
			//					Если ЗначениеЗаполнено(EDI_Length) ИЛИ ЗначениеЗаполнено(EDI_Width) ИЛИ ЗначениеЗаполнено(EDI_Height) ИЛИ ЗначениеЗаполнено(EDI_PalletWeight) Тогда
			//						
			//						ЗаписьXML.ЗаписатьНачалоЭлемента("Package-Measurements");
			//						
			//							Если ЗначениеЗаполнено(EDI_Length) ИЛИ ЗначениеЗаполнено(EDI_Width) ИЛИ ЗначениеЗаполнено(EDI_Height) Тогда
			//							
			//								ЗаписьXML.ЗаписатьНачалоЭлемента("Size");
			//								
			//									Если ЗначениеЗаполнено(EDI_Length) Тогда ЗаписатьXML(ЗаписьXML,"80","Length"); КонецЕсли;
			//									
			//									Если ЗначениеЗаполнено(EDI_Width) Тогда ЗаписатьXML(ЗаписьXML,"120","Width"); КонецЕсли;
			//									
			//									Если ЗначениеЗаполнено(EDI_Height) Тогда ЗаписатьXML(ЗаписьXML,EDI_Height,"Height"); КонецЕсли;
			//									
			//									UnitOfMeasure = "CMT";//MTR
			//									ЗаписатьXML(ЗаписьXML,UnitOfMeasure,"UnitOfMeasure");
			//								ЗаписьXML.ЗаписатьКонецЭлемента();//*Size
			//								
			//							КонецЕсли;
			//							
			//							Если ЗначениеЗаполнено(EDI_PalletWeight) Тогда
			//								
			//								ЗаписьXML.ЗаписатьНачалоЭлемента("Weight");
			//								    UnitOfMeasure = "KGM";
			//									ЗаписатьXML(ЗаписьXML,UnitOfMeasure,"UnitOfMeasure");
			//									ЗаписатьXML(ЗаписьXML,EDI_PalletWeight,"PalletWeight");												
			//								ЗаписьXML.ЗаписатьКонецЭлемента();//*Weight
			//								
			//							КонецЕсли;
			//						
			//						ЗаписьXML.ЗаписатьКонецЭлемента();//*Package-Measurements
			//						
			//					КонецЕсли;
			//					
			//					Если ЗначениеЗаполнено(Destination_ILN) Тогда
			//						
			//						ЗаписьXML.ЗаписатьНачалоЭлемента("Destination");
			//							ЗаписатьXML(ЗаписьXML,Destination_ILN,"ILN");
			//						ЗаписьXML.ЗаписатьКонецЭлемента();//*Destination
			//						
			//					КонецЕсли;
			//					
			//				ЗаписьXML.ЗаписатьКонецЭлемента();//*Goods-Identity
			//				
			//			КонецЕсли; 
			//			
			//		КонецЦикла;
			//	ЗаписьXML.ЗаписатьКонецЭлемента();//*Package-Identification	
			//	
			//КонецЕсли;
			//
			Если ЗначениеЗаполнено(CountryOfOrigin) Тогда 
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Line-AdditionalInformation");
					ЗаписатьXML(ЗаписьXML,CountryOfOrigin,"CountryOfOrigin");
				ЗаписьXML.ЗаписатьКонецЭлемента();//*Line-AdditionalInformation
				
			КонецЕсли;//RU
			
			Если ALCDES Тогда
				
				Попытка
					
					TaxIDПроизв = СтруктураСтроки.TaxIDПроизв;//СтрокаТаблицы.Серия.алкПроизводитель.ИНН;
					TaxRegistrationReasonCodeПроизв = СтруктураСтроки.TaxRegistrationReasonCodeПроизв;//СтрокаТаблицы.Серия.алкПроизводитель.КПП;
					NameПроизв = СтруктураСтроки.NameПроизв;//СтрокаТаблицы.Серия.алкПроизводитель.алкНаименованиеКраткое;
					TaxIDИмп = СтруктураСтроки.TaxIDИмп;//СтрокаТаблицы.Серия.алкИмпортер.ИНН;
					TaxRegistrationReasonCodeИмп = СтруктураСтроки.TaxRegistrationReasonCodeИмп;//СтрокаТаблицы.Серия.алкИмпортер.КПП;
					NameИмп = СтруктураСтроки.NameИмп;//СтрокаТаблицы.Серия.алкИмпортер.Наименование;
					
				Исключение
					
					ВызватьИсключение("Не удалось получить данные о производителе или о поставщике на основании серии номенклатуры. Проверьте заполненность этих реквизитов. Документ выгружен не будет");
					Возврат Неопределено;
					
				КонецПопытки;
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Line-Parties");
					ЗаписьXML.ЗаписатьНачалоЭлемента("Line-Party");
						ЗаписатьXML(ЗаписьXML,"MF", "Party-Type");
						ЗаписатьXML(ЗаписьXML,TaxIDПроизв, "TaxID"); //инн производителя 
						ЗаписатьXML(ЗаписьXML,TaxRegistrationReasonCodeПроизв, "TaxRegistrationReasonCode");//кпп производителя
						
						Если ЗначениеЗаполнено(NameПроизв) ТОгда ЗаписатьXML(ЗаписьXML,NameПроизв, "Name"); КонецЕсли;
						
					ЗаписьXML.ЗаписатьКонецЭлемента();	
					ЗаписьXML.ЗаписатьНачалоЭлемента("Line-Party");
						ЗаписатьXML(ЗаписьXML,"IM", "Party-Type");
						ЗаписатьXML(ЗаписьXML,TaxIDИмп, "TaxID"); //инн Импортера
						ЗаписатьXML(ЗаписьXML,TaxRegistrationReasonCodeИмп, "TaxRegistrationReasonCode");//кпп Импортера
						
						Если ЗначениеЗаполнено(NameИмп) ТОгда ЗаписатьXML(ЗаписьXML,NameИмп, "Name"); КонецЕсли;
						
					ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
				Reference_Type = "ABT";			
				
				Если ЗначениеЗаполнено(Reference_Id) Тогда
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("Line-Reference");
					ЗаписьXML.ЗаписатьНачалоЭлемента("Reference-Elements");
					ЗаписьXML.ЗаписатьНачалоЭлемента("Reference-Element");
					
						Если ЗначениеЗаполнено(Reference_Type) Тогда ЗаписатьXML(ЗаписьXML,Reference_Type,"Reference-Type") КонецЕсли;//ABT
						
						Если ЗначениеЗаполнено(Reference_Id) Тогда ЗаписатьXML(ЗаписьXML,Reference_Id,"Reference-Id") КонецЕсли;//00000/00000/000000/0
						
					ЗаписьXML.ЗаписатьКонецЭлемента();//*Reference-Element
					ЗаписьXML.ЗаписатьКонецЭлемента();//*Reference-Elements
					ЗаписьXML.ЗаписатьКонецЭлемента();//*Line-Reference
					
				КонецЕсли; 

			Иначе						
				
				Reference_Type = "ABT";
				
				Попытка
					Reference_Id = СтруктураСтроки.Reference_IdАлк;//СокрЛП(СтрокаТаблицы.Серия.алкНомерГТД.Код);
				Исключение
					Reference_Id = СтруктураСтроки.Reference_Id;
				КонецПопытки;

				Если ЗначениеЗаполнено(Reference_Id) Тогда
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("Line-Reference");
						ЗаписьXML.ЗаписатьНачалоЭлемента("Reference-Elements");
							ЗаписьXML.ЗаписатьНачалоЭлемента("Reference-Element");
							
								Если ЗначениеЗаполнено(Reference_Type) Тогда ЗаписатьXML(ЗаписьXML,Reference_Type,"Reference-Type") КонецЕсли;//ABT
								
								Если ЗначениеЗаполнено(Reference_Id) Тогда ЗаписатьXML(ЗаписьXML,Reference_Id,"Reference-Id") КонецЕсли;//00000/00000/000000/0
								
							ЗаписьXML.ЗаписатьКонецЭлемента();//*Reference-Element
							Reference_Type = "Z01";
							Reference_Id = КоличествоВДокументе;
							ЗаписьXML.ЗаписатьНачалоЭлемента("Reference-Element");
							
								Если ЗначениеЗаполнено(Reference_Type) Тогда ЗаписатьXML(ЗаписьXML,Reference_Type,"Reference-Type") КонецЕсли;//ABT
								
								Если ЗначениеЗаполнено(Reference_Id) Тогда ЗаписатьXML(ЗаписьXML,Reference_Id,"Reference-Id") КонецЕсли;//00000/00000/000000/0
								
							ЗаписьXML.ЗаписатьКонецЭлемента();//*Reference-Element
						ЗаписьXML.ЗаписатьКонецЭлемента();//*Reference-Elements
					ЗаписьXML.ЗаписатьКонецЭлемента();//*Line-Reference
					
				КонецЕсли; 
				
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();//*Line	
			
		КонецЦикла;
				
		ЗаписьXML.ЗаписатьКонецЭлемента();//*Packing-Sequence

	ЗаписьXML.ЗаписатьКонецЭлемента();//*DespatchAdvice-Consignment
	//*
	
		ЗаписьXML.ЗаписатьНачалоЭлемента("DespatchAdvice-Summary");
		
			Если ЗначениеЗаполнено(TotalPSequence) Тогда ЗаписатьXML(ЗаписьXML,TotalPSequence,"TotalPSequence") КонецЕсли;//1
			
			Если ЗначениеЗаполнено(TotalLines) Тогда ЗаписатьXML(ЗаписьXML,TotalLines,"TotalLines") КонецЕсли;//2
			
			Если ЗначениеЗаполнено(TotalGoodsDespatchedAmount) Тогда ЗаписатьXML(ЗаписьXML,TotalGoodsDespatchedAmount,"TotalGoodsDespatchedAmount") КонецЕсли;//44.000
			
			Если ЗначениеЗаполнено(TotalNetAmount) Тогда ЗаписатьXML(ЗаписьXML,TotalNetAmount,"TotalNetAmount") КонецЕсли;//2
			
			Если ЗначениеЗаполнено(TotalGrossAmount) Тогда ЗаписатьXML(ЗаписьXML,TotalGrossAmount,"TotalGrossAmount") КонецЕсли;//2
			
			Если ЗначениеЗаполнено(ВсегоНДС) Тогда ЗаписатьXML(ЗаписьXML,ВсегоНДС,"TotalTaxAmount") КонецЕсли;//2		
			
		ЗаписьXML.ЗаписатьКонецЭлемента();//*DespatchAdvice-Summary

	ЗаписьXML.ЗаписатьКонецЭлемента();//*Document-DespatchAdvice

	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // ВыгрузитьDESADV()

&НаСервере
Функция ПолучитьСвязанныеДокументыСФ(Документ, Торг = Ложь, Корректировка = Ложь,Лог = "",Отказ = Ложь)
	
	СТруктураВОзврата = Новый Структура;
	
	Если Торг Тогда
		
		Если Не ЗначениеЗаполнено(Документ.ЗаказКЛиента) Тогда
			ВызватьИсключение("У документа "+Документ+" отсутствует ссылка на исходный заказ.");
		КонецЕсли;
		
		ИсходныйЗаказ = Документ.ЗаказКЛиента;		
		СТруктураВОзврата.Вставить("ИсходныйЗаказ",ИсходныйЗаказ);
		
	Иначе
		
		Если Документ.Исправление = Истина Тогда
			ТекущийДокумент = Документ.ИсправляемыйСчетФактура;
		Иначе
			ТекущийДокумент = Документ;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
			Лог = Лог + "У документа "+Документ+" отсутствует ссылка на скорректированную реализацию товаров." + Символы.ПС;
			Отказ = Истина;
			//ВызватьИсключение("У документа "+Документ+" отсутствует ссылка на скорректированную реализацию товаров.");
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(ТекущийДокумент.ДокументОснование) Тогда
			Лог = Лог + "У документа "+Документ+" отсутствует ссылка на исходную реализацию товаров." + Символы.ПС;
			Отказ = Истина;
			//ВызватьИсключение("У документа "+Документ+" отсутствует ссылка на исходную реализацию товаров.");
		КонецЕсли;
		
		Если Корректировка Тогда
			ИсходнаяРеализация = Документ.ДокументОснование;
		Иначе		
			ИсходнаяРеализация = ТекущийДокумент.ДокументОснование;
		КонецЕсли;
		
		Если Объект.Бухгалтерия Тогда
			Если Объект.СчётВместоРеализацииБУХ Тогда
				ИсходныйЗаказ = ИсходнаяРеализация.СчетНаОплатуПокупателю;
			Иначе
				ИсходныйЗаказ = ИсходнаяРеализация;
			КонецЕсли;
		Иначе			
			Если Не ЗначениеЗаполнено(ИсходнаяРеализация.ЗаказКлиента) Тогда
				Лог = Лог + "У документа "+Документ+" отсутствует ссылка на исходный заказ." + Символы.ПС;
				Отказ = Истина;
				//ВызватьИсключение("У документа "+Документ+" отсутствует ссылка на исходный заказ.");
			Иначе
				ИсходныйЗаказ = ИсходнаяРеализация.ЗаказКЛиента;
			КонецЕсли;
		КонецЕсли;
		
		СкорректированнаяРеализация = Документ.ДокументОснование;
		
		//ИсходныйЗаказ = ИсходнаяРеализация.ЗаказКЛиента;
		СТруктураВОзврата = Новый Структура;
		СТруктураВОзврата.Вставить("СкорректированнаяРеализация",СкорректированнаяРеализация);
		СТруктураВОзврата.Вставить("ИсходнаяРеализация",ИсходнаяРеализация);
		СТруктураВОзврата.Вставить("ИсходныйЗаказ",ИсходныйЗаказ);
		СТруктураВОзврата.Вставить("ТекущийДокумент",ТекущийДокумент);
		
	КонецЕсли;
	
	Возврат СТруктураВОзврата;
	
КонецФункции

Функция ВыгрузитьINVOICEСервер(Документ,ЯвляетсяКорректировкой = Ложь,НомерИДатаЗаказа, СтруктураДанныхСФ, СписокНоменклатур, СвязанныеДокументы,НомерИДатаРекадва,Отказ = Ложь,Лог = "")
	//Если Ложь Тогда
	//	Документ = Документы.СчетФактураВыданный.ПустаяСсылка();
	//КонецЕсли;
	
	Если Документ.Исправление = Истина Тогда
		InvoiceVersionNumber = Формат(Число(Документ.НомерИсправления),"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");
		InvoiceVersionDate = Формат(Документ.Дата,"ДФ = гггг-ММ-дд");//2011-05-27		
	Иначе
		InvoiceVersionNumber = Неопределено;
		InvoiceVersionDate = Неопределено;//2011-05-27		
	КонецЕсли;
	ТекущийДокумент = СвязанныеДокументы.ТекущийДокумент;
	
	Если ЯвляетсяКорректировкой = Ложь Тогда//СФ//ИСФ
		СкорректированнаяРеализация = СвязанныеДокументы.СкорректированнаяРеализация;
		ИсходнаяРеализация = СвязанныеДокументы.ИсходнаяРеализация;
		ИсходныйЗаказ = СвязанныеДокументы.ИсходныйЗаказ;

	Иначе//КСФ//ИКСФ
		Если Не ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
			Лог = Лог + "У документа "+Документ+" отсутствует ссылка на скорректированную реализацию товаров."+Символы.ПС;
			Отказ = Истина;
			//ВызватьИсключение("У документа "+Документ+" отсутствует ссылка на скорректированную реализацию товаров.");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекущийДокумент.ДокументОснование.ДокументРеализации.ИсправляемыйДокументРеализации) Тогда
			Лог = Лог + "У документа "+Документ+" отсутствует ссылка на исходную реализацию товаров." + Символы.ПС;
			Отказ = Истина;
			//ВызватьИсключение("У документа "+Документ+" отсутствует ссылка на исходную реализацию товаров.");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекущийДокумент.ДокументОснование.ДокументРеализации.ИсправляемыйДокументРеализации.Сделка) Тогда
			Лог = Лог + ("У документа "+Документ+" отсутствует ссылка на исходный заказ.");
			Отказ = Истина;
			//ВызватьИсключение("У документа "+Документ+" отсутствует ссылка на исходный заказ.");
		КонецЕсли;
		
		СкорректированнаяРеализация = Документ.ДокументОснование;
		ИсходнаяРеализация = ТекущийДокумент.ДокументОснование.ДокументРеализации.ИсправляемыйДокументРеализации;
		ИсходныйЗаказ = ТекущийДокумент.ДокументОснование.ДокументРеализации.ИсправляемыйДокументРеализации.Сделка;
		InvoiceReferenceNumber = СокрЛП(ТекущийДокумент.ИсправляемыйСчетФактура.Номер);
		InvoiceReferenceDate = Формат(ТекущийДокумент.ИсправляемыйСчетФактура.Дата,"ДФ = гггг-ММ-дд");
	КонецЕсли;
	
	InvoiceNumber = СокрЛП(ТекущийДокумент.Номер);//ГМ-0039203
	InvoiceDate = Формат(ТекущийДокумент.Дата,"ДФ = гггг-ММ-дд");//2011-05-27
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	Если Объект.Бухгалтерия Тогда
		Если ИсходнаяРеализация.ВалютаДокумента.Код = "810" Тогда
			InvoiceCurrency = "RUB";//RUB
		ИначеЕсли ИсходнаяРеализация.ВалютаДокумента.Код = "840" Тогда
			InvoiceCurrency = "USD";//RUB
		Иначе
			InvoiceCurrency = "RUB";//RUB
		КонецЕсли;
	Иначе		
		Если ИсходнаяРеализация.Валюта.Код = "810" Тогда
			InvoiceCurrency = "RUB";//RUB
		ИначеЕсли ИсходнаяРеализация.Валюта.Код = "840" Тогда
			InvoiceCurrency = "USD";//RUB
		Иначе
			InvoiceCurrency = "RUB";//RUB
		КонецЕсли; 
	КонецЕсли;
	InvoicePaymentDueDate = Формат(ТекущийДокумент.Дата+24*60*60,"ДФ = гггг-ММ-дд");//2011-05-27	
	Если Не НомерИДатаЗаказа = Неопределено Тогда
		BuyerOrderNumber = НомерИДатаЗаказа.Номер;//4516751288
		BuyerOrderDate = НомерИДатаЗаказа.Дата;//2010-01-22
	Иначе
		BuyerOrderNumber = "";
		BuyerOrderDate = "";
	КонецЕсли;
	
	Попытка
		ReceivingAdviceNumber = НомерИДатаРекадва.Номер;//4516751288
		ReceivingAdviceDate = НомерИДатаРекадва.Дата;//2010-01-22
	Исключение
		ReceivingAdviceNumber = "";//4516751288
		ReceivingAdviceDate = "";//2010-01-22
	КонецПопытки;
	
	Попытка
		DeliveryDate = Формат(ИсходныйЗаказ.ДатаОтгрузки,"ДФ = гггг-ММ-дд");//2010-01-26
		Если Не ЗначениеЗаполнено(DeliveryDate) Тогда
			DeliveryDate = Формат(ИсходныйЗаказ.ЖелаемаяДатаОтгрузки,"ДФ = гггг-ММ-дд");
		КонецЕсли;
	Исключение
		DeliveryDate = Формат(ИсходныйЗаказ.Дата+24*60*60,"ДФ = гггг-ММ-дд");//2010-01-26
	КонецПопытки; 
	DespatchNumber = СокрЛП(ИсходнаяРеализация.Номер);//2004311800

	DocumentFunctionCode = "9";//9
	DocumentNameCode = "270";//351
		
	Если Объект.УТАП Тогда		
		Buyer_Name = Лев(СтрЗаменить(СкорректированнаяРеализация.Партнер.Наименование,"""",""),175);//1234567890123		
		Попытка DeliveryPoint_Name = Лев(СтрЗаменить(СкорректированнаяРеализация.алкПунктРазгрузки.Наименование,"""",""),175);Исключение DeliveryPoint_Name = Неопределено; КонецПопытки;//1234567890123 
	Иначе				
		Buyer_Name = Лев(СтрЗаменить(ИсходнаяРеализация.Контрагент.Наименование,"""",""),175);//1234567890123				
		Попытка DeliveryPoint_Name = Лев(СтрЗаменить(ИсходнаяРеализация.Грузополучатель.Наименование,"""",""),175);Исключение DeliveryPoint_Name = Неопределено; КонецПопытки;//1234567890123 
	КонецЕсли;
	Buyer_ILN = СтруктураДанныхСФ.Buyer_ILN;
	Receiver_ILN = СтруктураДанныхСФ.Receiver_ILN;
	DeliveryPoint_ILN = СтруктураДанныхСФ.DeliveryPoint_ILN;
	Seller_ILN = СтруктураДанныхСФ.Seller_ILN;
	Seller_Name = Лев(СтрЗаменить(Документ.Организация.Наименование,"""",""),175);//1234567890123
	

		
	//Buyer_Name = Лев(СтрЗаменить(ИсходнаяРеализация.Контрагент.Наименование,"""",""),175);//1234567890123
	//Seller_ILN = ПолучитьGLNОрганизации(Документ.Организация);//1234567890123
	//Seller_Name = Лев(СтрЗаменить(ТекущийДокумент.Организация.Наименование,"""",""),175);//1234567890123
	//DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(СкорректированнаяРеализация.Грузополучатель);//1234567890123
	//Если Не ЗначениеЗаполнено(DeliveryPoint_ILN) Тогда
	//	DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(СкорректированнаяРеализация.Партнер);
	//КонецЕсли;
	//Попытка DeliveryPoint_Name = Лев(СтрЗаменить(СкорректированнаяРеализация.Грузополучатель.Наименование,"""",""),175);Исключение DeliveryPoint_Name = Неопределено; КонецПопытки;//1234567890123 
	//
	StreetAndNumber = Неопределено;
	CityName =Неопределено;
	PostalCode = Неопределено;
	Country = Неопределено;
	State = Неопределено;//Тульская область
	StateCode = "";//СокрЛП(ПолучитьЗначениеСвойстваОбъектаДФормы("Edisoft_КодРегиона",СкорректированнаяРеализация));//71
	Попытка
		СтруктураАдреса = ПолучитьСтруктуруАдреса(СкорректированнаяРеализация.АдресДоставки);//Город//Дом//Индекс//Квартира//Корпус//НаселенныйПункт//Район//Регион//Страна//ТипДома//ТипКвартиры//ТипКорпуса//Улица
		StreetAndNumber = ?(ЗначениеЗаполнено(СтруктураАдреса.Улица) и ЗначениеЗаполнено(СтруктураАдреса.Дом),СтруктураАдреса.Улица+", "+СтруктураАдреса.ТипДома+" "+СтруктураАдреса.Дом,Неопределено);//Бурятское ш. влад.112
		PostalCode = СтруктураАдреса.Индекс;//123456
		Если ЗначениеЗаполнено(СтруктураАдреса.Город) Тогда
			CityName = СтруктураАдреса.Город;//ЧО, г.Конючинск
		ИначеЕсли ЗначениеЗаполнено(СтруктураАдреса.НаселенныйПункт) Тогда
			CityName = СтруктураАдреса.НаселенныйПункт;//ЧО, г.Конючинск
		ИначеЕсли ЗначениеЗаполнено(СтруктураАдреса.Район) Тогда
			CityName = СтруктураАдреса.Район;//ЧО, г.Конючинск
		ИначеЕсли ЗначениеЗаполнено(СтруктураАдреса.Регион) Тогда
			CityName = СтруктураАдреса.Регион;//ЧО, г.Конючинск
		КонецЕсли; 
	Исключение
		Если СтрДлина(СкорректированнаяРеализация.АдресДоставки)<=140 Тогда
			StreetAndNumber = СкорректированнаяРеализация.АдресДоставки;
		КонецЕсли;
	КонецПопытки;
	Если Объект.Бухгалтерия Тогда
		ЦенаВключаетНДС = СкорректированнаяРеализация.СуммаВключаетНДС;
	Иначе
		ЦенаВключаетНДС = СкорректированнаяРеализация.ЦенаВключаетНДС;
	КонецЕсли;
	TotalLines = Формат(СкорректированнаяРеализация.Товары.Количество(),"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");//115
	TotalInvoicedAmount = Формат(СкорректированнаяРеализация.Товары.Итог("Количество"),"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//5138.000
	ВсегоНДС = СкорректированнаяРеализация.Товары.Итог("СуммаНДС");
	TotalTaxAmount = Формат(ВсегоНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//8339.2600
	Если ЦенаВключаетНДС Тогда
		TotalNetAmount = Формат(СкорректированнаяРеализация.Товары.Итог("Сумма")-ВсегоНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//260000.3100
		TotalGrossAmount = Формат(СкорректированнаяРеализация.Товары.Итог("Сумма"),"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//8339.2600
	Иначе
		TotalNetAmount = Формат(СкорректированнаяРеализация.Товары.Итог("Сумма"),"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//260000.3100
		TotalGrossAmount = Формат(СкорректированнаяРеализация.Товары.Итог("Сумма")+ВсегоНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//8339.2600
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document-Invoice");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Invoice-Header");
	Если ЗначениеЗаполнено(InvoiceNumber) Тогда ЗаписатьXML(ЗаписьXML,InvoiceNumber,"InvoiceNumber") Иначе
		Лог = Лог + "Ошибка в "+Документ+" Не удалось получить данные для тега //InvoiceNumber" + Символы.ПС;
		Отказ = Истина;
		//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //InvoiceNumber");
	КонецЕсли;//5500454746
	Если ЗначениеЗаполнено(InvoiceDate) Тогда ЗаписатьXML(ЗаписьXML,InvoiceDate,"InvoiceDate") Иначе
	    Лог = Лог + "Ошибка в "+Документ+" Не удалось получить данные для тега //InvoiceDate" + Символы.ПС;
		Отказ = Истина;
		//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //InvoiceDate"); 
	КонецЕсли;//2011-01-26
	Если ЗначениеЗаполнено(InvoiceVersionNumber) Тогда ЗаписатьXML(ЗаписьXML,InvoiceVersionNumber,"InvoiceVersionNumber") КонецЕсли;//5500454746
		Если ЗначениеЗаполнено(InvoiceVersionDate) Тогда ЗаписатьXML(ЗаписьXML,InvoiceVersionDate,"InvoiceVersionDate") КонецЕсли;//2011-01-26
		Если ЗначениеЗаполнено(InvoiceCurrency) Тогда ЗаписатьXML(ЗаписьXML,InvoiceCurrency,"InvoiceCurrency") КонецЕсли;//RUB
		Если ЗначениеЗаполнено(InvoicePaymentDueDate) Тогда ЗаписатьXML(ЗаписьXML,InvoicePaymentDueDate,"InvoicePaymentDueDate") КонецЕсли;//2011-02-26
		Если ЗначениеЗаполнено(DocumentFunctionCode) Тогда ЗаписатьXML(ЗаписьXML,DocumentFunctionCode,"DocumentFunctionCode") КонецЕсли;//9
		Если ЗначениеЗаполнено(DocumentNameCode) Тогда ЗаписатьXML(ЗаписьXML,DocumentNameCode,"DocumentNameCode") КонецЕсли;//9
	ЗаписьXML.ЗаписатьНачалоЭлемента("Order");
	Если ЗначениеЗаполнено(BuyerOrderNumber) Тогда ЗаписатьXML(ЗаписьXML,BuyerOrderNumber,"BuyerOrderNumber") Иначе
		Лог = Лог + "Ошибка в "+Документ+" Не удалось получить данные для тега //BuyerOrderNumber" + Символы.ПС; 
		Отказ = Истина;
		//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //BuyerOrderNumber");
	КонецЕсли;//4740002225
		Если ЗначениеЗаполнено(BuyerOrderDate) Тогда ЗаписатьXML(ЗаписьXML,BuyerOrderDate,"BuyerOrderDate") КонецЕсли;//2010-01-22
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Order

	ЗаписьXML.ЗаписатьНачалоЭлемента("Reference");
		Если ЗначениеЗаполнено(InvoiceReferenceNumber) Тогда ЗаписатьXML(ЗаписьXML,InvoiceReferenceNumber,"InvoiceReferenceNumber") КонецЕсли;//23423432
		Если ЗначениеЗаполнено(InvoiceReferenceDate) Тогда ЗаписатьXML(ЗаписьXML,InvoiceReferenceDate,"InvoiceReferenceDate") КонецЕсли;//2010-11-08
		
		Если ЗначениеЗаполнено(ReceivingAdviceNumber) Тогда ЗаписатьXML(ЗаписьXML,ReceivingAdviceNumber,"ReceivingAdviceNumber") КонецЕсли;//23423432
		Если ЗначениеЗаполнено(ReceivingAdviceDate) Тогда ЗаписатьXML(ЗаписьXML,ReceivingAdviceDate,"ReceivingAdviceDate") КонецЕсли;//2010-11-08
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Reference
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Delivery");
		Если ЗначениеЗаполнено(DeliveryPoint_ILN) Тогда ЗаписатьXML(ЗаписьXML,DeliveryPoint_ILN,"DeliveryLocationNumber") КонецЕсли;//9950202661251
		Если ЗначениеЗаполнено(DeliveryPoint_Name) Тогда ЗаписатьXML(ЗаписьXML,DeliveryPoint_Name,"Name") КонецЕсли;//Имя Места доставки
		Если ЗначениеЗаполнено(StreetAndNumber) Тогда ЗаписатьXML(ЗаписьXML,StreetAndNumber,"StreetAndNumber") КонецЕсли;//Адрес Места доставки
		Если ЗначениеЗаполнено(CityName) Тогда ЗаписатьXML(ЗаписьXML,CityName,"CityName") КонецЕсли;//Город Места доставки
		Если ЗначениеЗаполнено(State) Тогда ЗаписатьXML(ЗаписьXML,State,"State") КонецЕсли;//Тульская область
		Если ЗначениеЗаполнено(StateCode) Тогда ЗаписатьXML(ЗаписьXML,StateCode,"StateCode") КонецЕсли;//71
		Если ЗначениеЗаполнено(PostalCode) Тогда ЗаписатьXML(ЗаписьXML,PostalCode,"PostalCode") КонецЕсли;//410180
		Если ЗначениеЗаполнено(Country) Тогда ЗаписатьXML(ЗаписьXML,Country,"Country") КонецЕсли;//RU
	Если ЗначениеЗаполнено(DeliveryDate) Тогда ЗаписатьXML(ЗаписьXML,DeliveryDate,"DeliveryDate") Иначе
		Лог = Лог + "Ошибка в "+Документ+" Не удалось получить данные для тега //Delivery/DeliveryDate" + Символы.ПС;
		Отказ = Истина;
		//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Delivery/DeliveryDate");
	КонецЕсли;//2010-01-26
		Если ЗначениеЗаполнено(DespatchNumber) Тогда ЗаписатьXML(ЗаписьXML,DespatchNumber,"DespatchNumber") КонецЕсли;//2004311800
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Delivery

	ЗаписьXML.ЗаписатьКонецЭлемента();//*Invoice-Header
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document-Parties");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Sender");
	Если ЗначениеЗаполнено(Seller_ILN) Тогда ЗаписатьXML(ЗаписьXML,Seller_ILN,"ILN") Иначе
		Лог = Лог + "Ошибка в "+Документ+" Не удалось получить данные для тега //Sender/ILN" + Символы.ПС;
		Отказ = Истина;
		//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Sender/ILN");
	КонецЕсли;//4607166039996
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Sender

	ЗаписьXML.ЗаписатьНачалоЭлемента("Receiver");
	Если ЗначениеЗаполнено(Receiver_ILN) Тогда ЗаписатьXML(ЗаписьXML,Receiver_ILN,"ILN") Иначе
		Лог = Лог + "Ошибка в "+Документ+" Не удалось получить данные для тега //Receiver/ILN" + Символы.ПС;
		Отказ = Истина;
		//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Receiver/ILN"); КонецЕсли;//4606038000003
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Receiver

	ЗаписьXML.ЗаписатьКонецЭлемента();//*Document-Parties
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Invoice-Parties");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Buyer");
	Если ЗначениеЗаполнено(Buyer_ILN) Тогда ЗаписатьXML(ЗаписьXML,Buyer_ILN,"ILN") Иначе
		Лог = Лог + "Ошибка в "+Документ+" Не удалось получить данные для тега //Buyer/ILN" + Символы.ПС;
		Отказ = Истина;
		//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Buyer/ILN");
	КонецЕсли;//4606038008351
		Если ЗначениеЗаполнено(Buyer_Name) Тогда ЗаписатьXML(ЗаписьXML,Buyer_Name,"Name") КонецЕсли;//ТД Перекресток, ЗАО (X5)
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Buyer

	ЗаписьXML.ЗаписатьНачалоЭлемента("Payer");
	Если ЗначениеЗаполнено(Buyer_ILN) Тогда ЗаписатьXML(ЗаписьXML,Buyer_ILN,"ILN") Иначе
		Лог = Лог + "Ошибка в "+Документ+" Не удалось получить данные для тега //Payer/ILN" + Символы.ПС;
		Отказ= Истина;
		//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Payer/ILN");
	КонецЕсли;//4606038008351
		Если ЗначениеЗаполнено(Buyer_Name) Тогда ЗаписатьXML(ЗаписьXML,Buyer_Name,"Name") КонецЕсли;//ТД Перекресток, ЗАО (X5)
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Payer

	ЗаписьXML.ЗаписатьНачалоЭлемента("Seller");
	Если ЗначениеЗаполнено(Seller_ILN) Тогда ЗаписатьXML(ЗаписьXML,Seller_ILN,"ILN") Иначе
		Лог = Лог + "Ошибка в "+Документ+" Не удалось получить данные для тега //Seller/ILN" + Символы.ПС;
		Отказ = Истина;
		//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //Seller/ILN");
	КонецЕсли;//9950202452369
		Если ЗначениеЗаполнено(Seller_Name) Тогда ЗаписатьXML(ЗаписьXML,Seller_Name,"Name") КонецЕсли;//Имя продавца
		ЗаписьXML.ЗаписатьНачалоЭлемента("ContactInformation");
			ЗаписьXML.ЗаписатьНачалоЭлемента("Contact");
				ЗаписатьXML(ЗаписьXML,"MGR","ContactFunctionCode");//MGR - код, обозначающий генерального директора
				ЗаписатьXML(ЗаписьXML,Объект.ФИОГенДир,"Name");//ФИО генерального директора
			ЗаписьXML.ЗаписатьКонецЭлемента();//*Contact
			ЗаписьXML.ЗаписатьНачалоЭлемента("Contact");
				ЗаписатьXML(ЗаписьXML,"AD","ContactFunctionCode");//AD - код, обозначающий главного бухгалтера
				ЗаписатьXML(ЗаписьXML,Объект.ФИОГлБух,"Name");//ФИО главного бухгалтера
			ЗаписьXML.ЗаписатьКонецЭлемента();//*Contact
		ЗаписьXML.ЗаписатьКонецЭлемента();//*ContactInformation
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Seller

	ЗаписьXML.ЗаписатьКонецЭлемента();//*Invoice-Parties

	//Выгрузка табличной части
	ЗаписьXML.ЗаписатьНачалоЭлемента("Invoice-Lines");
	
	Для Сч = 0 По СписокНоменклатур.Количество()-1 Цикл
		Ключ = "Строка" + Строка(СЧ);
		СтруктураСтроки = СписокНоменклатур[Ключ];
		
		
		СтавкаНДС = СтруктураСтроки.СтавкаНДС;//УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
		ЦенаБезНДС = СтруктураСтроки.ЦенаБезНДС;//?(ЦенаВключаетНДС,СтрокаТаблицы.Цена/(1+СтавкаНДС/100),СтрокаТаблицы.Цена);
		ЦенаСНДС = СтруктураСтроки.ЦенаСНДС;//?(ЦенаВключаетНДС,СтрокаТаблицы.Цена,СтрокаТаблицы.Цена*(1+СтавкаНДС/100));
		СуммаБезНДС = СтруктураСтроки.СуммаБезНДС;//ЦенаБезНДС * СтрокаТаблицы.Количество;
		СуммаСНДС = СтруктураСтроки.СуммаСНДС;//ЦенаСНДС * СтрокаТаблицы.Количество;
		СуммаНДС = СуммаСНДС - СуммаБезНДС;
		
		LineNumber = СтруктураСтроки.LineNumber;//Формат(СтрокаТаблицы.НомерСтроки,"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");//1
		EAN = СтруктураСтроки.EAN;//ПолучитьКодТовара("EAN", СтрокаТаблицы.Номенклатура);//1234567890123
		КодНоменклатурыПокупателя = СтруктураСтроки.КодНоменклатурыПокупателя;//ПолучитьКодТовара("BuyerItemCode", СтрокаТаблицы.Номенклатура);//1234
		ОписаниеНоменклатурыПокупателя = Неопределено;
		КодНоменклатурыПоставщика = СтруктураСтроки.КодНоменклатурыПоставщика;//ПолучитьКодТовара("SupplierItemCode",СтрокаТаблицы.Номенклатура);//1234567
		ОписаниеНоменклатурыПоставщика = СтруктураСтроки.ОписаниеНоменклатурыПоставщика;//Лев(СтрокаТаблицы.Номенклатура.Наименование,100);//BOBRIK Cereal 18x375g RU
				
		UnitOfMeasure = СтруктураСтроки.UnitOfMeasure;//ПолучитьЕдиницуИзмерения(СтрокаТаблицы);
		
		КоличествоВДокументе = СтруктураСтроки.КоличествоВДокументе;//Формат(СтрокаТаблицы.Количество,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0");//126.000
		КоэффициентВДокументе = СтруктураСтроки.КоэффициентВДокументе;//Формат(СтрокаТаблицы.Упаковка.Коэффициент,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0");//1.000
		ЦенаБезНДС = Формат(ЦенаБезНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//74.9500
		СуммаБезНДС = Формат(СуммаБезНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//9446.2200
		ЦенаСНДС = Формат(ЦенаСНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//74.9500
		СуммаСНДС = Формат(СуммаСНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//9446.2200
		СтавкаНДС = Формат(СтавкаНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");//18.00
		СуммаНДС = Формат(СуммаНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//9446.2200
		
		TaxCategoryCode = "S";
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Line");
		
			ЗаписьXML.ЗаписатьНачалоЭлемента("Line-Item");
				Если ЗначениеЗаполнено(LineNumber) Тогда ЗаписатьXML(ЗаписьXML,LineNumber,"LineNumber") КонецЕсли;
				Если ЗначениеЗаполнено(EAN) Тогда ЗаписатьXML(ЗаписьXML,EAN,"EAN") КонецЕсли;
				Если ЗначениеЗаполнено(КодНоменклатурыПокупателя) Тогда ЗаписатьXML(ЗаписьXML,КодНоменклатурыПокупателя,"BuyerItemCode") КонецЕсли;
				Если ЗначениеЗаполнено(КодНоменклатурыПоставщика) Тогда ЗаписатьXML(ЗаписьXML,КодНоменклатурыПоставщика,"SupplierItemCode") КонецЕсли;
				
				Если ЗначениеЗаполнено(ОписаниеНоменклатурыПоставщика) Тогда ЗаписатьXML(ЗаписьXML,ОписаниеНоменклатурыПоставщика,"ItemDescription") КонецЕсли;
				//Если ЗначениеЗаполнено(ОписаниеНоменклатурыПоставщика) Тогда ЗаписатьXML(ЗаписьXML,ОписаниеНоменклатурыПоставщика,"SupplierItemDescription") КонецЕсли;
				
				Если ЗначениеЗаполнено(КоличествоВДокументе) Тогда ЗаписатьXML(ЗаписьXML,КоличествоВДокументе,"InvoiceQuantity") КонецЕсли;
				Если ЗначениеЗаполнено(ЦенаБезНДС) Тогда ЗаписатьXML(ЗаписьXML,ЦенаБезНДС,"InvoiceUnitNetPrice") КонецЕсли;
				Если ЗначениеЗаполнено(ЦенаСНДС) Тогда ЗаписатьXML(ЗаписьXML,ЦенаСНДС,"InvoiceUnitGrossPrice") КонецЕсли;
				Если ЗначениеЗаполнено(UnitOfMeasure) Тогда ЗаписатьXML(ЗаписьXML,UnitOfMeasure,"UnitOfMeasure") КонецЕсли;
				Если ЗначениеЗаполнено(КоэффициентВДокументе) Тогда ЗаписатьXML(ЗаписьXML,КоэффициентВДокументе,"InvoicedUnitPackSize") КонецЕсли;
				Если ЗначениеЗаполнено(СтавкаНДС) Тогда ЗаписатьXML(ЗаписьXML,СтавкаНДС,"TaxRate") КонецЕсли;
				Если ЗначениеЗаполнено(TaxCategoryCode) Тогда ЗаписатьXML(ЗаписьXML,TaxCategoryCode,"TaxCategoryCode") КонецЕсли;//S
				Если ЗначениеЗаполнено(СуммаНДС) Тогда ЗаписатьXML(ЗаписьXML,СуммаНДС,"TaxAmount") КонецЕсли;//7555.15
				Если ЗначениеЗаполнено(СуммаБезНДС) Тогда ЗаписатьXML(ЗаписьXML,СуммаБезНДС,"NetAmount") КонецЕсли;
				Если ЗначениеЗаполнено(СуммаСНДС) Тогда ЗаписатьXML(ЗаписьXML,СуммаСНДС,"GrossAmount") КонецЕсли;
				
			ЗаписьXML.ЗаписатьКонецЭлемента();//*Line-Item
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Line-AdditionalInformation");
				ЗаписатьXML(ЗаписьXML,СтруктураСтроки.CountryOfOrigin,"CountryOfOrigin");
			ЗаписьXML.ЗаписатьКонецЭлемента();//*Line-AdditionalInformation
		
		ЗаписьXML.ЗаписатьКонецЭлемента();//*Line
	
	КонецЦикла;
	
	//Для каждого СтрокаТаблицы Из СкорректированнаяРеализация.Товары Цикл
	//	СтавкаНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
	//	ЦенаБезНДС = ?(ЦенаВключаетНДС,СтрокаТаблицы.Цена/(1+СтавкаНДС/100),СтрокаТаблицы.Цена);
	//	ЦенаСНДС = ?(ЦенаВключаетНДС,СтрокаТаблицы.Цена,СтрокаТаблицы.Цена*(1+СтавкаНДС/100));
	//	СуммаБезНДС = ЦенаБезНДС * СтрокаТаблицы.Количество;
	//	СуммаСНДС = ЦенаСНДС * СтрокаТаблицы.Количество;
	//	СуммаНДС = СуммаСНДС - СуммаБезНДС;
	//	
	//	LineNumber = Формат(СтрокаТаблицы.НомерСтроки,"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");//1
	//	EAN = ПолучитьКодТовара("EAN", СтрокаТаблицы.Номенклатура);//1234567890123
	//	КодНоменклатурыПокупателя = ПолучитьКодТовара("BuyerItemCode", СтрокаТаблицы.Номенклатура);//1234
	//	ОписаниеНоменклатурыПокупателя = Неопределено;
	//	КодНоменклатурыПоставщика = ПолучитьКодТовара("SupplierItemCode",СтрокаТаблицы.Номенклатура);//1234567
	//	ОписаниеНоменклатурыПоставщика = Лев(СтрокаТаблицы.Номенклатура.Наименование,100);//BOBRIK Cereal 18x375g RU
	//			
	//	UnitOfMeasure = ПолучитьЕдиницуИзмерения(СтрокаТаблицы);
	//	
	//	КоличествоВДокументе = Формат(СтрокаТаблицы.Количество,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0");//126.000
	//	КоэффициентВДокументе = Формат(СтрокаТаблицы.Упаковка.Коэффициент,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0");//1.000
	//	ЦенаБезНДС = Формат(ЦенаБезНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//74.9500
	//	СуммаБезНДС = Формат(СуммаБезНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//9446.2200
	//	ЦенаСНДС = Формат(ЦенаСНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//74.9500
	//	СуммаСНДС = Формат(СуммаСНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//9446.2200
	//	СтавкаНДС = Формат(СтавкаНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");//18.00
	//	СуммаНДС = Формат(СуммаНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//9446.2200
	//	
	//	TaxCategoryCode = "S";
	//	
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("Line");
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("Line-Item");
	//		Если ЗначениеЗаполнено(LineNumber) Тогда ЗаписатьXML(ЗаписьXML,LineNumber,"LineNumber") КонецЕсли;
	//		Если ЗначениеЗаполнено(EAN) Тогда ЗаписатьXML(ЗаписьXML,EAN,"EAN") КонецЕсли;
	//		Если ЗначениеЗаполнено(КодНоменклатурыПокупателя) Тогда ЗаписатьXML(ЗаписьXML,КодНоменклатурыПокупателя,"BuyerItemCode") КонецЕсли;
	//		Если ЗначениеЗаполнено(КодНоменклатурыПоставщика) Тогда ЗаписатьXML(ЗаписьXML,КодНоменклатурыПоставщика,"SupplierItemCode") КонецЕсли;
	//		
	//		Если ЗначениеЗаполнено(ОписаниеНоменклатурыПоставщика) Тогда ЗаписатьXML(ЗаписьXML,ОписаниеНоменклатурыПоставщика,"ItemDescription") КонецЕсли;
	//		//Если ЗначениеЗаполнено(ОписаниеНоменклатурыПоставщика) Тогда ЗаписатьXML(ЗаписьXML,ОписаниеНоменклатурыПоставщика,"SupplierItemDescription") КонецЕсли;
	//		
	//		Если ЗначениеЗаполнено(КоличествоВДокументе) Тогда ЗаписатьXML(ЗаписьXML,КоличествоВДокументе,"InvoiceQuantity") КонецЕсли;
	//		Если ЗначениеЗаполнено(ЦенаБезНДС) Тогда ЗаписатьXML(ЗаписьXML,ЦенаБезНДС,"InvoiceUnitNetPrice") КонецЕсли;
	//		Если ЗначениеЗаполнено(ЦенаСНДС) Тогда ЗаписатьXML(ЗаписьXML,ЦенаСНДС,"InvoiceUnitGrossPrice") КонецЕсли;
	//		Если ЗначениеЗаполнено(UnitOfMeasure) Тогда ЗаписатьXML(ЗаписьXML,UnitOfMeasure,"UnitOfMeasure") КонецЕсли;
	//		Если ЗначениеЗаполнено(КоэффициентВДокументе) Тогда ЗаписатьXML(ЗаписьXML,КоэффициентВДокументе,"InvoicedUnitPackSize") КонецЕсли;
	//		Если ЗначениеЗаполнено(СтавкаНДС) Тогда ЗаписатьXML(ЗаписьXML,СтавкаНДС,"TaxRate") КонецЕсли;
	//		Если ЗначениеЗаполнено(TaxCategoryCode) Тогда ЗаписатьXML(ЗаписьXML,TaxCategoryCode,"TaxCategoryCode") КонецЕсли;//S
	//		Если ЗначениеЗаполнено(СуммаНДС) Тогда ЗаписатьXML(ЗаписьXML,СуммаНДС,"TaxAmount") КонецЕсли;//7555.15
	//		Если ЗначениеЗаполнено(СуммаБезНДС) Тогда ЗаписатьXML(ЗаписьXML,СуммаБезНДС,"NetAmount") КонецЕсли;
	//		Если ЗначениеЗаполнено(СуммаСНДС) Тогда ЗаписатьXML(ЗаписьXML,СуммаСНДС,"GrossAmount") КонецЕсли;
	//		
	//	ЗаписьXML.ЗаписатьКонецЭлемента();//*Line-Item
	//	
	//	ЗаписьXML.ЗаписатьКонецЭлемента();//*Line
	//КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Invoice-Lines
	//*
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Invoice-Summary");
		Если ЗначениеЗаполнено(TotalLines) Тогда ЗаписатьXML(ЗаписьXML,TotalLines,"TotalLines") КонецЕсли;//2
		Если ЗначениеЗаполнено(TotalInvoicedAmount) Тогда ЗаписатьXML(ЗаписьXML,TotalInvoicedAmount,"TotalInvoicedAmount") КонецЕсли;//128.000
		Если ЗначениеЗаполнено(TotalNetAmount) Тогда ЗаписатьXML(ЗаписьXML,TotalNetAmount,"TotalNetAmount") КонецЕсли;//75551.45
		Если ЗначениеЗаполнено(TotalTaxAmount) Тогда ЗаписатьXML(ЗаписьXML,TotalTaxAmount,"TotalTaxAmount") КонецЕсли;//7555.15
		Если ЗначениеЗаполнено(TotalGrossAmount) Тогда ЗаписатьXML(ЗаписьXML,TotalGrossAmount,"TotalGrossAmount") КонецЕсли;//83106.60
		
	ЗаписьXML.ЗаписатьНачалоЭлемента("Tax-Summary");
		СтруктураСрезаНдс = ПолучитьСрезДанныхНДС(СкорректированнаяРеализация, ЦенаВключаетНДС);				
		Для Сч = 0 По  СтруктураСрезаНдс.Количество()-1 Цикл
			КлючСтроки = "Строка" + Строка(Сч);
			СтрокаТаблицыСрезаНДС = СтруктураСрезаНдс[КлючСтроки];
			//ЦенаБезНДС = Формат(ЦенаБезНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//74.9500
			СуммаБезНДС = Формат(СтрокаТаблицыСрезаНДС.СуммаОблагаемаяНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//9446.2200
			//ЦенаСНДС = Формат(ЦенаСНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//74.9500
			//СуммаСНДС = Формат(СуммаСНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//9446.2200
			СтавкаНДС = Формат(СтрокаТаблицыСрезаНДС.СтавкаНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");//18.00
			СуммаНДС = Формат(СтрокаТаблицыСрезаНДС.СуммаНДС,"ЧДЦ=4; ЧН=0.0000; ЧРД=.; ЧГ=0");//9446.2200
			
			TaxCategoryCode = "S";
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Tax-Summary-Line");
				Если ЗначениеЗаполнено(СтавкаНДС) Тогда ЗаписатьXML(ЗаписьXML,СтавкаНДС,"TaxRate") КонецЕсли;//10.00
				Если ЗначениеЗаполнено(TaxCategoryCode) Тогда ЗаписатьXML(ЗаписьXML,TaxCategoryCode,"TaxCategoryCode") КонецЕсли;//S
				Если ЗначениеЗаполнено(СуммаНДС) Тогда ЗаписатьXML(ЗаписьXML,СуммаНДС,"TaxAmount") КонецЕсли;//7555.15
				Если ЗначениеЗаполнено(СуммаБезНДС) Тогда ЗаписатьXML(ЗаписьXML,СуммаБезНДС,"TaxableAmount") КонецЕсли;//75551.45
			ЗаписьXML.ЗаписатьКонецЭлемента();//*Tax-Summary-Line
		КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();//*Tax-Summary

	ЗаписьXML.ЗаписатьКонецЭлемента();//*Invoice-Summary

	//ЗаписьXML.ЗаписатьНачалоЭлемента("Signer");
	//	Если ЗначениеЗаполнено(FirstName) Тогда ЗаписатьXML(ЗаписьXML,FirstName,"FirstName") КонецЕсли;//Иван
	//	Если ЗначениеЗаполнено(LastName) Тогда ЗаписатьXML(ЗаписьXML,LastName,"LastName") КонецЕсли;//Иванов
	//	Если ЗначениеЗаполнено(PatronymicName) Тогда ЗаписатьXML(ЗаписьXML,PatronymicName,"PatronymicName") КонецЕсли;//Иванович
	//ЗаписьXML.ЗаписатьКонецЭлемента();//*Signer

	ЗаписьXML.ЗаписатьКонецЭлемента();//*Document-Invoice
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

Функция ВыгрузитьFNS_ARCHIVE(Документ,УИДДокумента, СТруктураДанныхДляВыгрузки)
	Если Ложь Тогда
		Документ = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;
	
	Если Документ.Исправление = Истина Тогда
		НомИспрСчФ = Формат(Число(Документ.НомерИсправления),"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");
		ДатаИспрСчФ = Формат(Документ.Дата,"ДФ = дд.ММ.гггг");
		ТекущийДокумент = Документ.ИсправляемыйСчетФактура;
	Иначе
		НомИспрСчФ = Неопределено;
		ДатаИспрСчФ = Неопределено;
		ТекущийДокумент = Документ;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийДокумент.ДокументОснование) Тогда
		ВызватьИсключение("У документа "+Документ+" отсутствует ссылка на исходную реализацию товаров.");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
		ВызватьИсключение("У документа "+Документ+" отсутствует ссылка на скорректированную реализацию товаров.");
	КонецЕсли;
	
	СкорректированнаяРеализация = Документ.ДокументОснование;
	Попытка
		ИсходнаяРеализация = ТекущийДокумент.ДокументОснование.ИсправляемыйДокументРеализации;
	Исключение
		ИсходнаяРеализация = ТекущийДокумент.ДокументОснование;
	КонецПопытки; 
	
	Если Ложь Тогда
		Документ = Документы.СчетФактураВыданный.ПустаяСсылка();
		ИсходнаяРеализация = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		СкорректированнаяРеализация = Документы.КорректировкаРеализации.ПустаяСсылка();
		ИсходныйЗаказ = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	КонецЕсли;
	
	Buyer_ILN = СТруктураДанныхДляВыгрузки.Buyer_ILN;//ПолучитьGLNКонтрагента(Документ);//1234567890123
	

	Если Не ЗначениеЗаполнено(Buyer_ILN) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные GLN покупателя"); КонецЕсли; 
	Seller_ILN = СТруктураДанныхДляВыгрузки.Seller_ILN;//ПолучитьGLNОрганизации(Документ);//1234567890123
	Если Не ЗначениеЗаполнено(Seller_ILN) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные GLN продавца"); КонецЕсли; 
	DeliveryPoint_ILN = СТруктураДанныхДляВыгрузки.DeliveryPoint_ILN;//ПолучитьGLNТочкиДоставки(ИсходнаяРеализация);//1234567890123
	Если Не ЗначениеЗаполнено(DeliveryPoint_ILN) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные GLN точки доставки"); КонецЕсли; 
	
	ИдОтпр = СТруктураДанныхДляВыгрузки.ИдОтпр;//ПолучитьFNSidОрганизации(Документ);
	Если Не ЗначениеЗаполнено(ИдОтпр) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //ИдОтпр"); КонецЕсли; 
	ИдПок = СТруктураДанныхДляВыгрузки.ИдПок;//ПолучитьFNSidКонтрагента(Документ);
	Если Не ЗначениеЗаполнено(ИдПок) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //ИдПок"); КонецЕсли; 
	
	Попытка
		ДанныеГрузополучателя = ПолучитьДанныеГП(ИсходнаяРеализация.Грузополучатель);
		НаимГП = ДанныеГрузополучателя.Наименование;
		Если Не ЗначениеЗаполнено(НаимГП) Тогда
			ВызватьИсключение("Не удалось получить наименование грузополучателя для документа " + Документ + ". Выгрузка невозможна");
		КонецЕсли;
		УлицаДомГП = ДанныеГрузополучателя.УлицаДом;
		ГородГП = ДанныеГрузополучателя.Город;
		ИндексГП = ДанныеГрузополучателя.Индекс;
	Исключение
		НаимГП = "";
		УлицаДомГП = "";
		ГородГП = "";
		ИндексГП = "";
	КонецПопытки;
	
	
	ИдФайл = "ON_SFAKT_"+ИдПок+"_"+ИдОтпр+"_"+Формат(ТекущаяДата(),"ДФ = ггггММдд")+"_"+УИДДокумента;
	
	НомерСчФ = СокрЛП(ТекущийДокумент.Номер);
	ДатаСчФ = Формат(ТекущийДокумент.Дата,"ДФ = дд.ММ.гггг");
	
	НомерПРД = СокрЛП(ИсходнаяРеализация.Номер);
	ДатаПРД = Формат(ИсходнаяРеализация.Дата,"ДФ = дд.ММ.гггг");
	НомерЗаказаПокупателя = СТруктураДанныхДляВыгрузки.НомерИДатаЗаказа.Номер;
	ДатаЗаказа  = Формат(ПреобразоватьСтрокуВДату(СТруктураДанныхДляВыгрузки.НомерИДатаЗаказа.Дата),"ДФ = гггг-ММ-дд");
	ReceivingAdviceNumber = СТруктураДанныхДляВыгрузки.НомерИДатаРекадв.Номер;
	ReceivingAdviceDate = Формат(ПреобразоватьСтрокуВДату(СТруктураДанныхДляВыгрузки.НомерИДатаРекадв.Дата),"ДФ = гггг-ММ-дд");
	DeliveryDate = ReceivingAdviceDate;
	DespatchDate = ReceivingAdviceDate;
	
	Если Не ЗначениеЗаполнено(НомерЗаказаПокупателя) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные номера заказа покупателя"); КонецЕсли; 
	
	ИнфПолСтр = ?(ЗначениеЗаполнено(НомерЗаказаПокупателя),"номер_заказа:"+НомерЗаказаПокупателя+";","")+?(ЗначениеЗаполнено(НомерПРД),"номер_накладной:"+НомерПРД+";","");
	
	Прод_НаимОрг = Документ.Организация.Наименование;
	Прод_ИНН = Документ.Организация.ИНН;
	Прод_КПП = Документ.Организация.КПП;
	Прод_КодРегион = СТруктураДанныхДляВыгрузки.Прод_КодРегион;//ПолучитьКодРегионаОрганизации(Документ);
	Если Не ЗначениеЗаполнено(Прод_КодРегион) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить код региона продавца"); КонецЕсли; 
	Покуп_НаимОрг = Документ.Контрагент.Наименование;
	Покуп_ИНН = Документ.Контрагент.ИНН;
	Покуп_КПП = Документ.Контрагент.КПП;
	Покуп_КодРегион = СТруктураДанныхДляВыгрузки.Покуп_КодРегион;//ПолучитьКодРегионаКонтрагента(Документ);
	Если Не ЗначениеЗаполнено(Покуп_КодРегион) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить код региона покупателя"); КонецЕсли; 
	
	Попытка
		ЦенаВключаетНДС = Документ.ДокументОснование.СуммаВключаетНДС;
	Исключение
		ЦенаВключаетНДС = Документ.ДокументОснование.ЦенаВключаетНДС;
	КонецПопытки;
	СумНДС_всего = Документ.ДокументОснование.Товары.Итог("СуммаНДС");
	Если ЦенаВключаетНДС Тогда
		СтТовБезНДСВсего = Документ.ДокументОснование.Товары.Итог("Сумма")-СумНДС_всего;//260000.3100
		СтТовУчНалВсего = Документ.ДокументОснование.Товары.Итог("Сумма");//8339.2600
	Иначе
		СтТовБезНДСВсего = Документ.ДокументОснование.Товары.Итог("Сумма");//260000.3100
		СтТовУчНалВсего = Документ.ДокументОснование.Товары.Итог("Сумма")+СумНДС_всего;//8339.2600
	КонецЕсли;
	
	Попытка
		ДанныеГрузоотправителя = ПолучитьДанныеГрузоотправителя(ИсходнаяРеализация.Грузоотправитель);
		НаимОргГрузОт = ДанныеГрузоотправителя.Наименование;
		Если Не ЗначениеЗаполнено(НаимОргГрузОт) Тогда
			ВызватьИсключение("Не удалось получить наименование Грузоотправителя для документа " + Документ + ". Выгрузка невозможна");
		КонецЕсли;				
		УлицаДомГОтпр = ДанныеГрузоотправителя.УлицаДом;
		ГородГОтпр = ДанныеГрузоотправителя.Город;
		ИндексГОтпр = ДанныеГрузоотправителя.Индекс;
	Исключение
		НаимОргГрузОт = Прод_НаимОрг;
		УлицаДомГОтпр = Прод_КодРегион;//ДанныеГрузоотправителя.УлицаДом;
		ГородГОтпр = "";
		ИндексГОтпр = "";
	КонецПопытки;

	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
		ЗаписьXML.ЗаписатьАтрибут("ИдФайл",ИдФайл);
		ЗаписьXML.ЗаписатьАтрибут("ВерсФорм","5.01");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвУчДокОбор");
			ЗаписьXML.ЗаписатьАтрибут("ИдОтпр",ИдОтпр);
			ЗаписьXML.ЗаписатьАтрибут("ИдПок",ИдПок);
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвОЭДОтпр");
				ЗаписьXML.ЗаписатьАтрибут("НаимОрг","ООО Эдисофт");
				ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ","7801471082");
				ЗаписьXML.ЗаписатьАтрибут("ИдЭДО","2IJ");
			ЗаписьXML.ЗаписатьКонецЭлемента();//СвОЭДОтпр
		ЗаписьXML.ЗаписатьКонецЭлемента();//СвУчДокОбор
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
				ЗаписьXML.ЗаписатьАтрибут("КНД","1115101");
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("СвСчФакт");
					ЗаписьXML.ЗаписатьАтрибут("НомерСчФ",НомерСчФ);
					ЗаписьXML.ЗаписатьАтрибут("ДатаСчФ",ДатаСчФ);
					ЗаписьXML.ЗаписатьАтрибут("КодОКВ","643");
					
					Если ЗначениеЗаполнено(НомИспрСчФ) и ЗначениеЗаполнено(ДатаИспрСчФ) Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("ИспрСчФ");
						ЗаписьXML.ЗаписатьАтрибут("ДатаИспрСчФ",ДатаИспрСчФ);
						ЗаписьXML.ЗаписатьАтрибут("НомИспрСчФ",НомИспрСчФ);
					ЗаписьXML.ЗаписатьКонецЭлемента();//ИспрСчФ
					КонецЕсли;
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("СвПрод");
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИдСв");
							ЗаписьXML.ЗаписатьНачалоЭлемента("СвЮЛ");
								ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Прод_ИНН);
								ЗаписьXML.ЗаписатьАтрибут("КПП",Прод_КПП);
								ЗаписьXML.ЗаписатьАтрибут("НаимОрг",Прод_НаимОрг);
							ЗаписьXML.ЗаписатьКонецЭлемента();//СвЮЛ
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИдСв
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("Адрес");
							ЗаписьXML.ЗаписатьНачалоЭлемента("АдрРФ");
								ЗаписьXML.ЗаписатьАтрибут("КодРегион",Прод_КодРегион);
							ЗаписьXML.ЗаписатьКонецЭлемента();//АдрРФ
						ЗаписьXML.ЗаписатьКонецЭлемента();//Адрес
					ЗаписьXML.ЗаписатьКонецЭлемента();//СвПрод
					
					
					///ГрузОтпр
					ЗаписьXML.ЗаписатьНачалоЭлемента("ГрузОт");
						ЗаписьXML.ЗаписатьНачалоЭлемента("ГрузОтпр");
							ЗаписьXML.ЗаписатьНачалоЭлемента("НаимГОП");
								ЗаписатьXML(ЗаписьXML,НаимОргГрузОт,"НаимОрг");
							ЗаписьXML.ЗаписатьКонецЭлемента();//НаимГОП
							ЗаписьXML.ЗаписатьНачалоЭлемента("Адрес");
								Если ЗначениеЗаполнено(ИндексГП) Тогда ЗаписьXML.ЗаписатьАтрибут("Индекс",ИндексГОтпр); КонецЕсли;
								Если ЗначениеЗаполнено(ГородГП) Тогда ЗаписьXML.ЗаписатьАтрибут("Город",ГородГОтпр); КонецЕсли;
								Если ЗначениеЗаполнено(УлицаДомГП) Тогда ЗаписьXML.ЗаписатьАтрибут("Улица",УлицаДомГОтпр); КонецЕсли;
							ЗаписьXML.ЗаписатьКонецЭлемента();//Адрес															
						ЗаписьXML.ЗаписатьКонецЭлемента();//ГрузОтпр
					ЗаписьXML.ЗаписатьКонецЭлемента();//ГрузОт
					//***
					
					
					Если ЗначениеЗаполнено(НаимГП) Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("ГрузПолуч");
							ЗаписьXML.ЗаписатьНачалоЭлемента("НаимГОП");
								Если ЗначениеЗаполнено(НаимГП) Тогда ЗаписатьXML(ЗаписьXML,НаимГП,"НаимОрг"); КонецЕсли;
							ЗаписьXML.ЗаписатьКонецЭлемента();
													
							Если ЗначениеЗаполнено(Строка(ИндексГП)+Строка(ГородГП)+Строка(УлицаДомГП)) Тогда
								ЗаписьXML.ЗаписатьНачалоЭлемента("Адрес");
									ЗаписьXML.ЗаписатьНачалоЭлемента("АдрРФ");
										Если ЗначениеЗаполнено(ИндексГП) Тогда ЗаписьXML.ЗаписатьАтрибут("Индекс",ИндексГП); КонецЕсли;
										Если ЗначениеЗаполнено(ГородГП) Тогда ЗаписьXML.ЗаписатьАтрибут("Город",ГородГП); КонецЕсли;
										Если ЗначениеЗаполнено(УлицаДомГП) Тогда ЗаписьXML.ЗаписатьАтрибут("Улица",УлицаДомГП); КонецЕсли;
									ЗаписьXML.ЗаписатьКонецЭлемента();//АдрРФ
								ЗаписьXML.ЗаписатьКонецЭлемента();//Адрес						
							КонецЕсли;
						ЗаписьXML.ЗаписатьКонецЭлемента();//ГрузПолуч
					КонецЕсли;
//////////////////////////////////////
					
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("СвПокуп");
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИдСв");
							ЗаписьXML.ЗаписатьНачалоЭлемента("СвЮЛ");
								ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Покуп_ИНН);
								ЗаписьXML.ЗаписатьАтрибут("КПП",Покуп_КПП);
								ЗаписьXML.ЗаписатьАтрибут("НаимОрг",Покуп_НаимОрг);
							ЗаписьXML.ЗаписатьКонецЭлемента();//СвЮЛ
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИдСв
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("Адрес");
							ЗаписьXML.ЗаписатьНачалоЭлемента("АдрРФ");
								ЗаписьXML.ЗаписатьАтрибут("КодРегион",Покуп_КодРегион);
							ЗаписьXML.ЗаписатьКонецЭлемента();//АдрРФ
						ЗаписьXML.ЗаписатьКонецЭлемента();//Адрес
					ЗаписьXML.ЗаписатьКонецЭлемента();//СвПокуп
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("ИнфПол");
						ЗаписьXML.ЗаписатьАтрибут("ТекстИнф","отправитель:"+Seller_ILN+";получатель:"+Buyer_ILN+";грузополучатель:"+DeliveryPoint_ILN+";дата_заказа:"+ДатаЗаказа+";дата_накладной:"+DespatchDate+";дата_акта_приемки:"+ReceivingAdviceDate+"");
					ЗаписьXML.ЗаписатьКонецЭлемента();//ИнфПол                                                                                                                                                                   
				ЗаписьXML.ЗаписатьКонецЭлемента();//СвСчФакт
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("ТаблСчФакт");
				
				Для Сч=0 По СТруктураДанныхДляВыгрузки.СписокНоменклатур.Количество()-1 Цикл
					Ключ = "Строка" + Строка(Сч);
					СтрокаСчета = СТруктураДанныхДляВыгрузки.СписокНоменклатур[Ключ];
					НомСтр = СтрокаСчета.LineNumber;//Формат(СтрокаСчета.НомерСтроки,"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0"); 
					НаимТов = СтрокаСчета.Номенклатура.Наименование; 
					Попытка
						ОКЕИ_Тов = СтрокаСчета.Номенклатура.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
					Исключение
						ОКЕИ_Тов = СтрокаСчета.Номенклатура.ЕдиницаИзмерения.Код;
					КонецПопытки; 
					КолТов = Формат(СтрокаСчета.КоличествоВДокументе,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0"); 
						
					СтавкаНдс = 0;
						
					ЦенаТов = Формат(СтрокаСчета.ЦенаБезНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
					СтТовБезНДС = Формат(СтрокаСчета.СуммаБезНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
					СтТовУчНал = Формат(СтрокаСчета.СуммаСНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
					НалСтВел = Формат(СтрокаСчета.СтавкаНДС,"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");//Строка(УчетНДС.ПолучитьСтавкуНДС(СтрокаСчета.СтавкаНДС));
					СумНДС = Формат(СтрокаСчета.СуммаСНДС - СтрокаСчета.СуммаБезНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
						
					ИнфПолСтрUPD = ИнфПолСтр;
						
					КодНоменклатурыПокупателя = СтрокаСчета.КодНоменклатурыПокупателя;//ПолучитьКодТовара("BuyerItemCode", СтрокаСчета.Номенклатура);
					ИнфПолСтрUPD = ИнфПолСтрUPD+?(ЗначениеЗаполнено(КодНоменклатурыПокупателя),"код_материала:"+КодНоменклатурыПокупателя+";","");
						
						
					ШК = СтрокаСчета.EAN;//"";//ПолучитьКодТовара("EAN", СтрокаСчета.Номенклатура);
					ИнфПолСтрUPD = ИнфПолСтрUPD+?(ЗначениеЗаполнено(ШК),"штрихкод:"+ШК+"","");//ИнфПолСтрUPD = ИнфПолСтрUPD+?(ЗначениеЗаполнено(ШК),"штрихкод:"+ШК+";","");
					ИнфПолСтрUPD = ИнфПолСтрUPD+?(ЗначениеЗаполнено(ReceivingAdviceNumber),";номер_акта:"+ReceivingAdviceNumber+"","");
					ЗаписьXML.ЗаписатьНачалоЭлемента("СведТов");
						Если ЗначениеЗаполнено(ИнфПолСтрUPD) Тогда ЗаписьXML.ЗаписатьАтрибут("ИнфПолСтр",ИнфПолСтрUPD); КонецЕсли; //ИнфПолСтр="номер_заказа:1234567890;номер_накладной:1234567890;код_материала:3390216;позиция_заказа:1;штрихкод:0000000000000"
						ЗаписьXML.ЗаписатьАтрибут("НомСтр",НомСтр);
						ЗаписьXML.ЗаписатьАтрибут("НаимТов",НаимТов);
						ЗаписьXML.ЗаписатьАтрибут("ОКЕИ_Тов",СокрЛП(ОКЕИ_Тов));
						ЗаписьXML.ЗаписатьАтрибут("КолТов",КолТов);
						ЗаписьXML.ЗаписатьАтрибут("ЦенаТов",ЦенаТов);//без НДС
						ЗаписьXML.ЗаписатьАтрибут("СтТовБезНДС",СтТовБезНДС);
						ЗаписьXML.ЗаписатьАтрибут("СтТовУчНал",СтТовУчНал);
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("Акциз");
							ЗаписьXML.ЗаписатьАтрибут("СумАкциз","без акциза");
						ЗаписьXML.ЗаписатьКонецЭлемента();//Акциз 
							
						ЗаписьXML.ЗаписатьНачалоЭлемента("НалСт");
							ЗаписьXML.ЗаписатьАтрибут("НалСтВел",НалСтВел);
							ЗаписьXML.ЗаписатьАтрибут("НалСтТип","процент");//процент//дробь//текст
						ЗаписьXML.ЗаписатьКонецЭлемента();//НалСт
							
						ЗаписьXML.ЗаписатьНачалоЭлемента("СумНал");
							ЗаписьXML.ЗаписатьАтрибут("СумНДС",СумНДС);
						ЗаписьXML.ЗаписатьКонецЭлемента();//СумНал
					ЗаписьXML.ЗаписатьКонецЭлемента();//СведТов 
				КонецЦикла;
				СтТовБезНДСВсего = Формат(СтТовБезНДСВсего,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"); 
				СтТовУчНалВсего = Формат(СтТовУчНалВсего,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"); 
				СумНДС_всего = Формат(СумНДС_всего,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
					
				ЗаписьXML.ЗаписатьНачалоЭлемента("ВсегоОпл");
					ЗаписьXML.ЗаписатьАтрибут("СтТовБезНДСВсего",СтТовБезНДСВсего);
					ЗаписьXML.ЗаписатьАтрибут("СтТовУчНалВсего",СтТовУчНалВсего);
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("СумНалВсего");
						ЗаписьXML.ЗаписатьАтрибут("СумНДС",СумНДС_всего);
					ЗаписьXML.ЗаписатьКонецЭлемента();//СумНалВсего 
				ЗаписьXML.ЗаписатьКонецЭлемента();//ВсегоОпл
			ЗаписьXML.ЗаписатьКонецЭлемента();//ТаблСчФакт
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Подписант");
					ЗаписьXML.ЗаписатьНачалоЭлемента("ЮЛ");
					ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Прод_ИНН);
					//ЗаписьXML.ЗаписатьАтрибут("Должн",Должность);
						ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");	
							//ЗаписьXML.ЗаписатьАтрибут("Фамилия",Фамилия);
							//ЗаписьXML.ЗаписатьАтрибут("Имя",Имя);
							//ЗаписьXML.ЗаписатьАтрибут("Отчество",Отчество);
						ЗаписьXML.ЗаписатьКонецЭлемента();//ФИО	
					ЗаписьXML.ЗаписатьКонецЭлемента();//ЮЛ
				ЗаписьXML.ЗаписатьКонецЭлемента();//Подписант
			ЗаписьXML.ЗаписатьКонецЭлемента();//Документ
	ЗаписьXML.ЗаписатьКонецЭлемента();//Файл
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКОнтрагентаПоПартнеру(Партнер)
	
	Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("Партнер", Партнер);
	Возврат Контрагент;
	
КонецФункции

Функция ВыгрузитьFNS_ARCHIVE_5_02(Документ, УИДДокумента, СТруктураДанныхДляВыгрузки)
	
	Если Ложь Тогда
		Документ = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;
	
	НомИспрСчФ = Неопределено;
	ДатаИспрСчФ = Неопределено;
	ТекущийДокумент = Документ;
	
	Если Не ЗначениеЗаполнено(ТекущийДокумент.ДокументОснование) Тогда
		ВызватьИсключение("У документа "+Документ+" отсутствует ссылка на исходную реализацию товаров.");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
		ВызватьИсключение("У документа "+Документ+" отсутствует ссылка на скорректированную реализацию товаров.");
	КонецЕсли;
	
	СкорректированнаяРеализация = Документ.ДокументОснование;
	
	Попытка
		ИсходнаяРеализация = ТекущийДокумент.ДокументОснование.ИсправляемыйДокументРеализации;
	Исключение
		ИсходнаяРеализация = ТекущийДокумент.ДокументОснование;
	КонецПопытки; 
	
	Если Ложь Тогда
		
		Документ = Документы.СчетФактураВыданный.ПустаяСсылка();
		ИсходнаяРеализация = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		СкорректированнаяРеализация = Документы.КорректировкаРеализации.ПустаяСсылка();
		ИсходныйЗаказ = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		
	КонецЕсли;
	
	Buyer_ILN = СТруктураДанныхДляВыгрузки.Buyer_ILN;//ПолучитьGLNКонтрагента(Документ);//1234567890123
		
	Если Не ЗначениеЗаполнено(Buyer_ILN) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные GLN покупателя"); КонецЕсли; 
	
	Seller_ILN = СТруктураДанныхДляВыгрузки.Seller_ILN;//ПолучитьGLNОрганизации(Документ);//1234567890123
	
	Если Не ЗначениеЗаполнено(Seller_ILN) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные GLN продавца"); КонецЕсли; 
	
	DeliveryPoint_ILN = СТруктураДанныхДляВыгрузки.DeliveryPoint_ILN;//ПолучитьGLNТочкиДоставки(ИсходнаяРеализация);//1234567890123
	
	Если Не ЗначениеЗаполнено(DeliveryPoint_ILN) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные GLN точки доставки"); КонецЕсли; 
		
	ИдОтпр = СТруктураДанныхДляВыгрузки.ИдОтпр;//ПолучитьFNSidОрганизации(Документ);
	
	Если Не ЗначениеЗаполнено(ИдОтпр) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //ИдОтпр"); КонецЕсли; 
	
	ИдПок = СТруктураДанныхДляВыгрузки.ИдПок;//ПолучитьFNSidКонтрагента(Документ);
	
	Если Не ЗначениеЗаполнено(ИдПок) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //ИдПок"); КонецЕсли; 
	
	АдресПолныйГрузополучателя = ИсходнаяРеализация.Контрагент.КонтактнаяИнформация[0];//ПолучитьАдресСтрокой(ИсходнаяРеализация.Партнер,Справочники.ВидыКонтактнойИнформации.АдресПартнера);
	ЗначениеяПолейГрузополучателя = АдресПолныйГрузополучателя.ЗначенияПолей;
	
	Попытка
		
		ДанныеАдресаГрузополучателя = РазложитьАдрес(ЗначениеяПолейГрузополучателя);//УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(АдресПолныйГрузополучателя);
		НаимГП = ИсходнаяРеализация.Партнер.Наименование;
		
		Если Не ЗначениеЗаполнено(НаимГП) Тогда
			ВызватьИсключение("Не удалось получить наименование грузополучателя для документа " + Документ + ". Выгрузка невозможна");
		КонецЕсли;
		
		УлицаДомГП = СокрЛП(ДанныеАдресаГрузополучателя.Улица) + ", " + СокрЛП(ДанныеАдресаГрузополучателя.Дом);
		ГородГП = СокрЛП(ДанныеАдресаГрузополучателя.Город);
		ИндексГП = СокрЛП(ДанныеАдресаГрузополучателя.Индекс);
		
	Исключение
		
		ДанныеАдресаГрузополучателя = РазложитьСтрокуВМассивПодстрок(АдресПолныйГрузополучателя.Представление, ",");
		ИндексГП = СокрЛП(ДанныеАдресаГрузополучателя[Объект.Гп_индекс]);
		ГородГП = СокрЛП(ДанныеАдресаГрузополучателя[Объект.ГП_Город]);
		УлицаДомГП = СокрЛП(ДанныеАдресаГрузополучателя[Объект.Гп_Улица]) + " "+СокрЛП(ДанныеАдресаГрузополучателя[Объект.Гп_дом]);
		
	КонецПопытки;
	
	Грузополучатель_КодРегион = СТруктураДанныхДляВыгрузки.Грузополучатель_КодРегион;
	
	ИдФайл = "ON_SFAKT_"+ИдПок+"_"+ИдОтпр+"_"+Формат(ТекущаяДата(),"ДФ = ггггММдд")+"_"+УИДДокумента;
	
	НомерСчФ = СокрЛП(ТекущийДокумент.Номер);
	ДатаСчФ = Формат(ТекущийДокумент.Дата,"ДФ = дд.ММ.гггг");
	
	НомерПРД = СокрЛП(ИсходнаяРеализация.Номер);
	ДатаПРД = Формат(ИсходнаяРеализация.Дата,"ДФ = дд.ММ.гггг");
	
	Если ЗначениеЗаполнено(СТруктураДанныхДляВыгрузки.НомерИДатаЗаказа) Тогда
		
		НомерЗаказаПокупателя = СТруктураДанныхДляВыгрузки.НомерИДатаЗаказа.Номер;
		ДатаЗаказа  = Формат(ПреобразоватьСтрокуВДату(СТруктураДанныхДляВыгрузки.НомерИДатаЗаказа.Дата),"ДФ = дд.ММ.гггг");
		
	Иначе
		
		НомерЗаказаПокупателя = "";
		ДатаЗаказа = "";
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СТруктураДанныхДляВыгрузки.НомерИДатаРекадв) Тогда
		
		ReceivingAdviceNumber = СТруктураДанныхДляВыгрузки.НомерИДатаРекадв.Номер;
		ReceivingAdviceDate = Формат(ПреобразоватьСтрокуВДату(СТруктураДанныхДляВыгрузки.НомерИДатаРекадв.Дата),"ДФ = дд.ММ.гггг");
		
	Иначе
		
		ReceivingAdviceNumber = "";
		ReceivingAdviceDate = "";
		
	КонецЕсли;
	
	DespatchDate = Формат(ИсходнаяРеализация.Дата,"ДФ = дд.ММ.гггг");
	
	Если Не ЗначениеЗаполнено(DespatchDate) Тогда
		
		Сообщить("Не удалось получить дату реализации. Выгрузка невозможна.");
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НомерЗаказаПокупателя) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные номера заказа покупателя"); КонецЕсли; 
	
	ИнфПолСтр = ?(ЗначениеЗаполнено(НомерЗаказаПокупателя),"номер_заказа:"+НомерЗаказаПокупателя+";","")+?(ЗначениеЗаполнено(НомерПРД),"номер_накладной:"+НомерПРД+";","");
	
	АдресПолныйПоставщика = Документ.Организация.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ДанныеАдресаПоставщика = РазложитьАдрес(АдресПолныйПоставщика.ЗначенияПолей);//УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(АдресПолныйПоставщика);
	
	Попытка // на случай если адрес вернулся не структурой, а строкой
		
		ПродИндекс=СокрЛП(ДанныеАдресаПоставщика.Индекс);
		ПродГород=СокрЛП(ДанныеАдресаПоставщика.Город);
		ПродРайон=СокрЛП(ДанныеАдресаПоставщика.Район);
		ПродНаселПункт=СокрЛП(ДанныеАдресаПоставщика.НаселенныйПункт);
		ПродУлица=СокрЛП(ДанныеАдресаПоставщика.Улица);
		ПродДом=СокрЛП(ДанныеАдресаПоставщика.Дом);
		
	Исключение
		
		ДанныеАдресаПоставщика = РазложитьСтрокуВМассивПодстрок(АдресПолныйПоставщика.Представление,",");
		ПродИндекс = ДанныеАдресаПоставщика[Объект.Орг_Индекс];
		ПродГород = ДанныеАдресаПоставщика[Объект.Орг_Город];
		ПродРайон="";
		ПродНаселПункт="";
		ПродУлица = ДанныеАдресаПоставщика[Объект.Орг_Улица];
		ПродДом = ДанныеАдресаПоставщика[Объект.Орг_Дом];
		
	КонецПопытки;
	
	Прод_НаимОрг = Документ.Организация.Наименование;
	Прод_ИНН = Документ.Организация.ИНН;
	Прод_КПП = Документ.Организация.КПП;
	Прод_КодРегион = СТруктураДанныхДляВыгрузки.Прод_КодРегион;//ПолучитьКодРегионаОрганизации(Документ);
	
	Если Не ЗначениеЗаполнено(Прод_КодРегион) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить код региона продавца"); КонецЕсли; 
	
	Покупатель = ПолучитьКОнтрагентаПоПартнеру(ИсходнаяРеализация.Партнер);
	АдресПолныйПокупателя = ИсходнаяРеализация.Партнер.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.АдресПартнера);//
	Если НЕ АдресПолныйПокупателя = Неопределено Тогда
		ДанныеАдресаПокупателя = РазложитьАдрес(АдресПолныйПокупателя.ЗначенияПолей);
	Иначе
		
		АдресПолныйПокупателя = Покупатель.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);//
		ДанныеАдресаПокупателя = РазложитьАдрес(АдресПолныйПокупателя.ЗначенияПолей);
	КонецЕсли;
	
	Попытка // на случай если адрес вернулся не структурой, а строкой
		
		ПокупИндекс=СокрЛП(ДанныеАдресаПокупателя.Индекс);
		ПокупГород=СокрЛП(ДанныеАдресаПокупателя.Город);
		ПокупРайон=СокрЛП(ДанныеАдресаПокупателя.Район);
		ПокупНаселПункт=СокрЛП(ДанныеАдресаПокупателя.НаселенныйПункт);
		ПокупУлица=СокрЛП(ДанныеАдресаПокупателя.Улица);
		ПокупДом=СокрЛП(ДанныеАдресаПокупателя.Дом);
		
	Исключение
		
		ДанныеАдресаПокупателя = РазложитьСтрокуВМассивПодстрок(АдресПолныйПокупателя.Представление, ",");
		ПокупИндекс= ДанныеАдресаПокупателя[Объект.Пок_индекс];
		ПокупГород= ДанныеАдресаПокупателя[Объект.Пок_Город];
		ПокупРайон="";
		ПокупНаселПункт="";
		ПокупУлица= ДанныеАдресаПокупателя[Объект.Пок_Улица];
		ПокупДом= ДанныеАдресаПокупателя[Объект.Пок_Дом];
		
	КонецПопытки;
	
	Покуп_НаимОрг = ИсходнаяРеализация.Партнер.Наименование;
	Покуп_ИНН = Покупатель.ИНН;
	Покуп_КПП = Покупатель.КПП;
	Покуп_КодРегион = СТруктураДанныхДляВыгрузки.Покуп_КодРегион;//ПолучитьКодРегионаКонтрагента(Документ);
	
	Если Не ЗначениеЗаполнено(Покуп_КодРегион) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить код региона покупателя"); КонецЕсли; 
	
	Попытка
		ЦенаВключаетНДС = Документ.ДокументОснование.СуммаВключаетНДС;
	Исключение
		ЦенаВключаетНДС = Документ.ДокументОснование.ЦенаВключаетНДС;
	КонецПопытки;
	
	СумНДС_всего = Документ.ДокументОснование.Товары.Итог("СуммаНДС");
	
	Если ЦенаВключаетНДС Тогда
		
		СтТовБезНДСВсего = Документ.ДокументОснование.Товары.Итог("Сумма")-СумНДС_всего;//260000.31
		СтТовУчНалВсего = Документ.ДокументОснование.Товары.Итог("Сумма");//8339.26
		
	Иначе
		
		СтТовБезНДСВсего = Документ.ДокументОснование.Товары.Итог("Сумма");//260000.31
		СтТовУчНалВсего = Документ.ДокументОснование.Товары.Итог("Сумма")+СумНДС_всего;//8339.26
		
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
		ЗаписьXML.ЗаписатьАтрибут("ИдФайл",ИдФайл);
		ЗаписьXML.ЗаписатьАтрибут("ВерсФорм","5.02");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвУчДокОбор");
			ЗаписьXML.ЗаписатьАтрибут("ИдПок",ИдПок);
			ЗаписьXML.ЗаписатьАтрибут("ИдОтпр",ИдОтпр);			
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвОЭДОтпр");
				ЗаписьXML.ЗаписатьАтрибут("НаимОрг","ООО Эдисофт");
				ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ","7801471082");
				ЗаписьXML.ЗаписатьАтрибут("ИдЭДО","2IJ");
			ЗаписьXML.ЗаписатьКонецЭлемента();//СвОЭДОтпр
		ЗаписьXML.ЗаписатьКонецЭлемента();//СвУчДокОбор
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
				ЗаписьXML.ЗаписатьАтрибут("КНД","1115101");
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("СвСчФакт");
					ЗаписьXML.ЗаписатьАтрибут("НомерСчФ",НомерСчФ);
					ЗаписьXML.ЗаписатьАтрибут("КодОКВ","643");
					ЗаписьXML.ЗаписатьАтрибут("ДатаСчФ",ДатаСчФ);					
					
					Если ЗначениеЗаполнено(НомИспрСчФ) и ЗначениеЗаполнено(ДатаИспрСчФ) Тогда
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИспрСчФ");
							ЗаписьXML.ЗаписатьАтрибут("ДатаИспрСчФ",ДатаИспрСчФ);
							ЗаписьXML.ЗаписатьАтрибут("НомИспрСчФ",НомИспрСчФ);
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИспрСчФ
						
					КонецЕсли;
										
					ЗаписьXML.ЗаписатьНачалоЭлемента("СвПрод");
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИдСв");
							ЗаписьXML.ЗаписатьНачалоЭлемента("СвЮЛ");
								ЗаписьXML.ЗаписатьАтрибут("КПП",Прод_КПП);
								ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Прод_ИНН);								
								ЗаписьXML.ЗаписатьАтрибут("НаимОрг",Прод_НаимОрг);
							ЗаписьXML.ЗаписатьКонецЭлемента();//СвЮЛ
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИдСв
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("Адрес");
							ЗаписьXML.ЗаписатьНачалоЭлемента("АдрРФ");
							
								Если ЗначениеЗаполнено(Прод_КодРегион) Тогда ЗаписьXML.ЗаписатьАтрибут("КодРегион",Прод_КодРегион); КонецЕсли;
								
								Если ЗначениеЗаполнено(ПродИндекс) Тогда ЗаписьXML.ЗаписатьАтрибут("Индекс",ПродИндекс); КонецЕсли;
								
								Если ЗначениеЗаполнено(ПродГород) Тогда ЗаписьXML.ЗаписатьАтрибут("Город",ПродГород); КонецЕсли;
								
								Если ЗначениеЗаполнено(ПродРайон) Тогда ЗаписьXML.ЗаписатьАтрибут("Район",ПродРайон); КонецЕсли;
								
								Если ЗначениеЗаполнено(ПродНаселПункт) Тогда ЗаписьXML.ЗаписатьАтрибут("НаселПункт",ПродНаселПункт); КонецЕсли;
								
								Если ЗначениеЗаполнено(ПродУлица) Тогда ЗаписьXML.ЗаписатьАтрибут("Улица",ПродУлица); КонецЕсли;
								
								Если ЗначениеЗаполнено(ПродДом) Тогда ЗаписьXML.ЗаписатьАтрибут("Дом",ПродДом); КонецЕсли;
								
							ЗаписьXML.ЗаписатьКонецЭлемента();//АдрРФ
						ЗаписьXML.ЗаписатьКонецЭлемента();//Адрес
					ЗаписьXML.ЗаписатьКонецЭлемента();//СвПрод
										
					Если ЗначениеЗаполнено(НаимГП) Тогда
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("ГрузПолуч");
							ЗаписьXML.ЗаписатьНачалоЭлемента("НаимГОП");
							
								Если ЗначениеЗаполнено(НаимГП) Тогда ЗаписатьXML(ЗаписьXML,НаимГП,"НаимОрг"); КонецЕсли;
							
							ЗаписьXML.ЗаписатьКонецЭлемента();
													
							Если ЗначениеЗаполнено(Строка(ИндексГП)+Строка(ГородГП)+Строка(УлицаДомГП)) Тогда
								
								ЗаписьXML.ЗаписатьНачалоЭлемента("Адрес");
									ЗаписьXML.ЗаписатьНачалоЭлемента("АдрРФ");
									
										Если ЗначениеЗаполнено(Грузополучатель_КодРегион) Тогда ЗаписьXML.ЗаписатьАтрибут("КодРегион",Грузополучатель_КодРегион); КонецЕсли;
										
										Если ЗначениеЗаполнено(ИндексГП) Тогда ЗаписьXML.ЗаписатьАтрибут("Индекс",ИндексГП); КонецЕсли;
										
										Если ЗначениеЗаполнено(ГородГП) Тогда ЗаписьXML.ЗаписатьАтрибут("Город",ГородГП); КонецЕсли;
										
										Если ЗначениеЗаполнено(УлицаДомГП) Тогда ЗаписьXML.ЗаписатьАтрибут("Улица",УлицаДомГП); КонецЕсли;
										
									ЗаписьXML.ЗаписатьКонецЭлемента();//АдрРФ
								ЗаписьXML.ЗаписатьКонецЭлемента();//Адрес						
								
							КонецЕсли;
							
						ЗаписьXML.ЗаписатьКонецЭлемента();//ГрузПолуч
						
					КонецЕсли;					
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("СвПокуп");
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИдСв");
							ЗаписьXML.ЗаписатьНачалоЭлемента("СвЮЛ");
								ЗаписьXML.ЗаписатьАтрибут("КПП",Покуп_КПП);
								ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Покуп_ИНН);								
								ЗаписьXML.ЗаписатьАтрибут("НаимОрг",Покуп_НаимОрг);
							ЗаписьXML.ЗаписатьКонецЭлемента();//СвЮЛ
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИдСв
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("Адрес");
							ЗаписьXML.ЗаписатьНачалоЭлемента("АдрРФ");
							
								Если ЗначениеЗаполнено(Покуп_КодРегион) Тогда ЗаписьXML.ЗаписатьАтрибут("КодРегион",Покуп_КодРегион); КонецЕсли;
								
								Если ЗначениеЗаполнено(ПокупИндекс) Тогда ЗаписьXML.ЗаписатьАтрибут("Индекс",ПокупИндекс); КонецЕсли;
								
								Если ЗначениеЗаполнено(ПокупГород) Тогда ЗаписьXML.ЗаписатьАтрибут("Город",ПокупГород); КонецЕсли;
								
								Если ЗначениеЗаполнено(ПокупРайон) Тогда ЗаписьXML.ЗаписатьАтрибут("Район",ПокупРайон); КонецЕсли;
								
								Если ЗначениеЗаполнено(ПокупНаселПункт) Тогда ЗаписьXML.ЗаписатьАтрибут("НаселПункт",ПокупНаселПункт); КонецЕсли;
								
								Если ЗначениеЗаполнено(ПокупУлица) Тогда ЗаписьXML.ЗаписатьАтрибут("Улица",ПокупУлица); КонецЕсли;
								
								Если ЗначениеЗаполнено(ПокупДом) Тогда ЗаписьXML.ЗаписатьАтрибут("Дом",ПокупДом); КонецЕсли;
								
							ЗаписьXML.ЗаписатьКонецЭлемента();//АдрРФ
						ЗаписьXML.ЗаписатьКонецЭлемента();//Адрес
					ЗаписьXML.ЗаписатьКонецЭлемента();//СвПокуп
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("ИнфПол");
						ЗаписьXML.ЗаписатьНачалоЭлемента("ТекстИнф");
						    ЗаписьXML.ЗаписатьАтрибут("Значен",Seller_ILN);
							ЗаписьXML.ЗаписатьАтрибут("Идентиф","отправитель");							
						ЗаписьXML.ЗаписатьКонецЭлемента();//ТекстИнф
						ЗаписьXML.ЗаписатьНачалоЭлемента("ТекстИнф");
						    ЗаписьXML.ЗаписатьАтрибут("Значен",Buyer_ILN);
							ЗаписьXML.ЗаписатьАтрибут("Идентиф","получатель");
						ЗаписьXML.ЗаписатьКонецЭлемента();//ТекстИнф
						ЗаписьXML.ЗаписатьНачалоЭлемента("ТекстИнф");
						    ЗаписьXML.ЗаписатьАтрибут("Значен",DeliveryPoint_ILN);
							ЗаписьXML.ЗаписатьАтрибут("Идентиф","грузополучатель");							
						ЗаписьXML.ЗаписатьКонецЭлемента();//ТекстИнф
						ЗаписьXML.ЗаписатьНачалоЭлемента("ТекстИнф");
							ЗаписьXML.ЗаписатьАтрибут("Значен",ДатаСчФ);
							ЗаписьXML.ЗаписатьАтрибут("Идентиф","оплата");							
						ЗаписьXML.ЗаписатьКонецЭлемента();//ТекстИнф
						ЗаписьXML.ЗаписатьНачалоЭлемента("ТекстИнф");
						    ЗаписьXML.ЗаписатьАтрибут("Значен",СокрЛП(ReceivingAdviceNumber));
							ЗаписьXML.ЗаписатьАтрибут("Идентиф","номер_акта");							
						ЗаписьXML.ЗаписатьКонецЭлемента();//ТекстИнф						
					ЗаписьXML.ЗаписатьКонецЭлемента();//ИнфПол                                                                                                                                                                   
				ЗаписьXML.ЗаписатьКонецЭлемента();//СвСчФакт
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("ТаблСчФакт");
				
				Для Сч=0 По СТруктураДанныхДляВыгрузки.СписокНоменклатур.Количество()-1 Цикл
					
					Ключ = "Строка" + Строка(Сч);
					СтрокаСчета = СТруктураДанныхДляВыгрузки.СписокНоменклатур[Ключ];
					НомСтр = СтрокаСчета.LineNumber;
					НаимТов = СтрокаСчета.Номенклатура.Наименование; 
					
					Попытка
						ОКЕИ_Тов = СокрЛП(СтрокаСчета.Номенклатура.ЕдиницаДляОтчетов.ЕдиницаПоКлассификатору.Код);
					Исключение
						ОКЕИ_Тов = СокрЛП(СтрокаСчета.Номенклатура.ЕдиницаДляОтчетов.Код);
					КонецПопытки; 
					
					КолТов = Формат(СтрокаСчета.КоличествоВДокументе,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0"); 
						
					СтавкаНдс = 0;
						
					ЦенаТов = Формат(СтрокаСчета.ЦенаБезНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
					СтТовБезНДС = Формат(СтрокаСчета.СуммаБезНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
					СтТовУчНал = Формат(СтрокаСчета.СуммаСНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
					НалСтВел = Формат(СтрокаСчета.СтавкаНДС,"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");
					СумНДС = Формат(СтрокаСчета.СуммаСНДС - СтрокаСчета.СуммаБезНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
						
					ИнфПолСтрUPD = ИнфПолСтр;
						
					КодНоменклатурыПокупателя = СтрокаСчета.КодНоменклатурыПокупателя;//ПолучитьКодТовара("BuyerItemCode", СтрокаСчета.Номенклатура);					
						
					КонтрагентПоиска = ИсходнаяРеализация.Контрагент.Ссылка;
					ШК = СтрокаСчета.EAN;
					ЗаписьXML.ЗаписатьНачалоЭлемента("СведТов");																							
						ЗаписьXML.ЗаписатьАтрибут("КолТов",КолТов);	
						ЗаписьXML.ЗаписатьАтрибут("НаимТов",НаимТов);
						ЗаписьXML.ЗаписатьАтрибут("НалСт",Формат(Число(НалСтВел),"ЧДЦ=")+ "%");//ставка ндс + "%"
						ЗаписьXML.ЗаписатьАтрибут("НомСтр",НомСтр);
						ЗаписьXML.ЗаписатьАтрибут("ОКЕИ_Тов",СокрЛП(ОКЕИ_Тов));
						ЗаписьXML.ЗаписатьАтрибут("СтТовБезНДС",Формат(Число(СтТовБезНДС),"ЧДЦ=2; ЧРД=.; ЧРГ=''"));
						ЗаписьXML.ЗаписатьАтрибут("СтТовУчНал",Формат(Число(СтТовУчНал),"ЧДЦ=2; ЧРД=.; ЧРГ=''"));
						ЗаписьXML.ЗаписатьАтрибут("ЦенаТов",Формат(Число(ЦенаТов),"ЧДЦ=2; ЧРД=.; ЧРГ=''"));//без НДС
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("Акциз");
							ЗаписатьXML(ЗаписьXML,"без акциза","БезАкциз");
						ЗаписьXML.ЗаписатьКонецЭлемента();//Акциз 
														
						ЗаписьXML.ЗаписатьНачалоЭлемента("СумНал");
							ЗаписатьXML(ЗаписьXML,СумНДС,"СумНДС");
						ЗаписьXML.ЗаписатьКонецЭлемента();//СумНал						
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИнфПолСтр");
						    ЗаписьXML.ЗаписатьАтрибут("Значен",НомерЗаказаПокупателя);
							ЗаписьXML.ЗаписатьАтрибут("Идентиф","номер_заказа");							
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИнфПолСтр
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИнфПолСтр");
							ЗаписьXML.ЗаписатьАтрибут("Значен",НомерПРД);
							ЗаписьXML.ЗаписатьАтрибут("Идентиф","номер_накладной");							
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИнфПолСтр
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИнфПолСтр");
							ЗаписьXML.ЗаписатьАтрибут("Значен",КодНоменклатурыПокупателя);
							ЗаписьXML.ЗаписатьАтрибут("Идентиф","код_материала");							
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИнфПолСтр
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИнфПолСтр");
							ПозицияЗаказа = Сч+1;
							ЗаписьXML.ЗаписатьАтрибут("Значен",Формат(ПозицияЗаказа,"ЧДЦ=; ЧРГ=''"));
							ЗаписьXML.ЗаписатьАтрибут("Идентиф","позиция_заказа");							
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИнфПолСтр
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИнфПолСтр");
							ЗаписьXML.ЗаписатьАтрибут("Значен",ШК);
							ЗаписьXML.ЗаписатьАтрибут("Идентиф","штрихкод");							
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИнфПолСтр
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИнфПолСтр");
							ЗаписьXML.ЗаписатьАтрибут("Значен",ReceivingAdviceNumber);
							ЗаписьXML.ЗаписатьАтрибут("Идентиф","номер_акта");							
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИнфПолСтр						
					ЗаписьXML.ЗаписатьКонецЭлемента();//СведТов 
					
				КонецЦикла;
				
				СтТовБезНДСВсего = Формат(СтТовБезНДСВсего,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"); 
				СтТовУчНалВсего = Формат(СтТовУчНалВсего,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"); 
				СумНДС_всего = Формат(СумНДС_всего,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
					
				ЗаписьXML.ЗаписатьНачалоЭлемента("ВсегоОпл");
					ЗаписьXML.ЗаписатьАтрибут("СтТовБезНДСВсего",СтТовБезНДСВсего);
					ЗаписьXML.ЗаписатьАтрибут("СтТовУчНалВсего",СтТовУчНалВсего);
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("СумНалВсего");
						ЗаписатьXML(ЗаписьXML,СумНДС_всего,"СумНДС");
					ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.ЗаписатьКонецЭлемента();
				
			ЗаписьXML.ЗаписатьНачалоЭлемента("Подписант");
				ЗаписьXML.ЗаписатьНачалоЭлемента("ЮЛ");
					ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Прод_ИНН);
					ЗаписьXML.ЗаписатьАтрибут("Должн",Объект.Должность);
					ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");	
						ЗаписьXML.ЗаписатьАтрибут("Фамилия",Объект.Фамилия);
						ЗаписьXML.ЗаписатьАтрибут("Имя",Объект.Имя);
						ЗаписьXML.ЗаписатьАтрибут("Отчество",Объект.Отчество);
					ЗаписьXML.ЗаписатьКонецЭлемента();//ФИО	
				ЗаписьXML.ЗаписатьКонецЭлемента();//ЮЛ
			ЗаписьXML.ЗаписатьКонецЭлемента();//Подписант
		ЗаписьXML.ЗаписатьКонецЭлемента();//Документ
	ЗаписьXML.ЗаписатьКонецЭлемента();//Файл
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

//УПД
Функция ВыгрузитьON_SCHFDOPPR(Документ,УИДДокумента, ДляХ5 = Истина, СТруктураДанныхДляВыгрузки, Исправление = Ложь,Лог="",Отказ=Ложь)
	Если Ложь Тогда
		Документ = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЕсли;
	
	Если Документ.Исправление = Истина Тогда
		
		НомИспрСчФ = Формат(Число(Документ.НомерИсправления),"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");
		ДатаИспрСчФ = Формат(Документ.Дата,"ДФ = дд.ММ.гггг");
		ТекущийДокумент = Документ.СчетФактураОснование;
		
	ИначеЕсли Исправление Тогда
		
		НомИспрСчФ = СокрЛП(Документ.Номер);
		ДатаИспрСчФ = Формат(Документ.Дата,"ДФ = дд.ММ.гггг");
		ТекущийДокумент = Документ.ИсправляемыйСчетФактура;
		
	Иначе
		
		НомИспрСчФ = Неопределено;
		ДатаИспрСчФ = Неопределено;
		ТекущийДокумент = Документ;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийДокумент.ДокументОснование) Тогда
		Лог = Лог + "У документа "+Документ+" отсутствует ссылка на исходную реализацию товаров." + Символы.ПС;
		Отказ = истина;
		//ВызватьИсключение("У документа "+Документ+" отсутствует ссылка на исходную реализацию товаров.");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
		Лог = Лог + "У документа "+Документ+" отсутствует ссылка на скорректированную реализацию товаров." + Символы.ПС;
		Отказ = Истина;
		ВызватьИсключение("У документа "+Документ+" отсутствует ссылка на скорректированную реализацию товаров.");
	КонецЕсли;
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	СкорректированнаяРеализация = Документ.ДокументОснование;
	Попытка
		ИсходнаяРеализация = ТекущийДокумент.ДокументОснование.ИсправляемыйДокументРеализации;
	Исключение
		ИсходнаяРеализация = ТекущийДокумент.ДокументОснование;
	КонецПопытки; 
			
	Если Ложь Тогда
		
		Документ = Документы.СчетФактураВыданный.ПустаяСсылка();
		ИсходнаяРеализация = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		СкорректированнаяРеализация = Документы.КорректировкаРеализации.ПустаяСсылка();
		
	КонецЕсли;
	
	Buyer_ILN = СТруктураДанныхДляВыгрузки.Buyer_ILN;//1234567890123
	Если Не ЗначениеЗаполнено(Buyer_ILN) Тогда
		Лог = Лог + "Ошибка в "+Документ+" Не удалось получить данные GLN покупателя" + Символы.ПС;
		Отказ = Истина;
		//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные GLN покупателя");
	КонецЕсли; 
	Seller_ILN = СТруктураДанныхДляВыгрузки.Seller_ILN;//ПолучитьGLNОрганизации(Документ);//1234567890123
	Если Не ЗначениеЗаполнено(Seller_ILN) Тогда 
		Лог = Лог + "Ошибка в "+Документ+" Не удалось получить данные GLN продавца" + Символы.ПС;
		Отказ = Истина;
		//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные GLN продавца");
	КонецЕсли; 
	//DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(ИсходнаяРеализация);//1234567890123
	DeliveryPoint_ILN = СТруктураДанныхДляВыгрузки.DeliveryPoint_ILN;//ПолучитьGLNТочкиДоставки(СкорректированнаяРеализация);//1234567890123
	//UltimateCustomer_ILN = СТруктураДанныхДляВыгрузки.UltimateCustomer_ILN;//1234567890123
	//Если (EDI_ПодставлятьРЦ = Ложь) и ЗначениеЗаполнено(UltimateCustomer_ILN) Тогда//(ПолучитьЗначениеСвойстваОбъекта("Edisoft_ИспользоватьРазбивкуПоПалетам",Документ.Контрагент) = Истина) и 
	//	DeliveryPoint_ILN = UltimateCustomer_ILN;
	//КонецЕсли;
	Если Не ЗначениеЗаполнено(DeliveryPoint_ILN) Тогда
		Отказ = Истина;
		Лог = Лог + "Ошибка в "+Документ+" Не удалось получить данные GLN точки доставки" + Символы.ПС;
		//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные GLN точки доставки"); КонецЕсли; 
	КонецЕсли;	
	
	
	ИдОтпр = СТруктураДанныхДляВыгрузки.ИдОтпр;//ПолучитьFNSidОрганизации(Документ);
	Если Не ЗначениеЗаполнено(ИдОтпр) Тогда
		Отказ = Истина;
		Лог = Лог + "Ошибка в "+Документ+" Не удалось получить данные для тега //ИдОтпр" + Символы.ПС; 
		//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //ИдОтпр");
	КонецЕсли; 
	ИдПок = СТруктураДанныхДляВыгрузки.ИдПок;//ПолучитьFNSidКонтрагента(Документ);
	Если Не ЗначениеЗаполнено(ИдПок) Тогда 
		Отказ = Истина;
		Лог = Лог + "Ошибка в "+Документ+" Не удалось получить данные для тега //ИдПок" + Символы.ПС;
		//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //ИдПок");
	КонецЕсли; 
	
	ИдФайл = "ON_SCHFDOPPR_"+ИдПок+"_"+ИдОтпр+"_"+Формат(ТекущаяДата(),"ДФ = ггггММдд")+"_"+УИДДокумента;
	Если Объект.КороткийНомер Тогда
		НомерСчФ = СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ТекущийДокумент.Номер));
	Иначе
		НомерСчФ = СокрЛП(ТекущийДокумент.Номер);
	КонецЕсли;
	ДатаСчФ = Формат(ТекущийДокумент.Дата,"ДФ = дд.ММ.гггг");
	Если Объект.КороткийНомер Тогда
		НомерПРД = СокрЛП(ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ИсходнаяРеализация.Номер));
	Иначе
		НомерПРД = СокрЛП(ИсходнаяРеализация.Номер);
	КонецЕсли;
	ДатаПРД = Формат(ИсходнаяРеализация.Дата,"ДФ = дд.ММ.гггг");
	
	НомерЗаказаПокупателя = СТруктураДанныхДляВыгрузки.НомерИДатаЗаказа.Номер;//ПолучитьЗначениеСвойстваОбъекта("EDISoft_НомерВходящего",ИсходныйЗаказ); 
	Если Не ЗначениеЗаполнено(НомерЗаказаПокупателя) Тогда
		Отказ = Истина;
		Лог = Лог + "Ошибка в "+Документ+" Не удалось получить данные номера заказа покупателя" + Символы.ПС;
		//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные номера заказа покупателя");
	КонецЕсли; 
	ИнфПолСтр = ?(ЗначениеЗаполнено(НомерЗаказаПокупателя),"номер_заказа:"+НомерЗаказаПокупателя+";","")+?(ЗначениеЗаполнено(НомерПРД),"номер_накладной:"+НомерПРД+";","");
	
	Прод_НаимОрг = Документ.Организация.Наименование;
	Прод_ИНН = Документ.Организация.ИНН;
	Прод_КПП = Документ.Организация.КПП;
	Прод_КодРегион = СТруктураДанныхДляВыгрузки.Прод_КодРегион;//ПолучитьКодРегионаОрганизации(Документ);
	Если Не ЗначениеЗаполнено(Прод_КодРегион) Тогда
		Отказ = Истина;
		Лог = Лог + "Ошибка в "+Документ+" Не удалось получить код региона продавца" + Символы.ПС;
		//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить код региона продавца");
	КонецЕсли; 
	Если Объект.Бухгалтерия Тогда
		Покупатель = ИсходнаяРеализация.Контрагент;
		ПокКонтр = Покупатель; 
	Иначе
		Покупатель = ИсходнаяРеализация.Партнер;
		ПокКонтр = Справочники.Контрагенты.НайтиПоРеквизиту("Партнер", Покупатель);
	КонецЕсли;
	Покуп_НаимОрг = Покупатель.Наименование;//Документ.Контрагент.Наименование;
	//ПокКонтр = Справочники.Контрагенты.НайтиПоРеквизиту("Партнер", Покупатель);
	Покуп_ИНН = ПокКонтр.ИНН;//ПокупательДокумент.Контрагент.ИНН;//?(EDI_Контрагент = 2,Документ.Контрагент.ГоловнойКонтрагент.ИНН,Документ.Контрагент.ИНН);
	Покуп_КПП = ПОкКонтр.КПП;//Документ.Контрагент.КПП;//?(EDI_Контрагент = 2,Документ.Контрагент.ГоловнойКонтрагент.КПП,Документ.Контрагент.КПП);
	Покуп_КодРегион = СТруктураДанныхДляВыгрузки.Покуп_КодРегион;//ПолучитьКодРегионаКонтрагента(Документ);
	Если Не ЗначениеЗаполнено(Покуп_КодРегион) Тогда
		Отказ = Истина;
		Лог = Лог + "Ошибка в "+Документ+" Не удалось получить код региона покупателя" + Символы.ПС;
		//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить код региона покупателя");
	КонецЕсли; 
	
	
	СтруктураПоискаКонтактнойИнформацииОрганизации = Новый СТруктура;
	СтруктураПоискаКонтактнойИнформацииОрганизации.Вставить("Вид",Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	ИННЮЛ_ГрузПолуч = Покуп_ИНН;
	КПП_ГрузПолуч = Покуп_КПП;
	НаимОрг_ГрузПолуч = Документ.Контрагент.Наименование;//Покуп_НаимОрг;
	
	//начало 20160606
		Если Не ЗначениеЗаполнено(ИсходнаяРеализация.Грузоотправитель) Тогда
	//	Если  ИсходнаяРеализация.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
	//		Запрос = Новый Запрос;
	//		Запрос.Текст = 
	//			"ВЫБРАТЬ ПЕРВЫЕ 1
	//			|	ФИОФизЛиц.Период,
	//			|	ФИОФизЛицСрезПоследних.Фамилия,
	//			|	ФИОФизЛицСрезПоследних.Имя,
	//			|	ФИОФизЛицСрезПоследних.Отчество,
	//			|	ФИОФизЛицСрезПоследних.ФизЛицо
	//			|ИЗ
	//			|	РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц,
	//			|	РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
	//			|ГДЕ
	//			|	ФИОФизЛицСрезПоследних.ФизЛицо = &ФизЛицо";
	//		Запрос.УстановитьПараметр("ФизЛицо", ИсходнаяРеализация.Организация.ИндивидуальныйПредприниматель);
	//		Результат = Запрос.Выполнить();
	//		ВыборкаДетальныеЗаписи = Результат.Выбрать();
	//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//			ГрузОт_Фамилия = ВыборкаДетальныеЗаписи.Фамилия;
	//			ГрузОт_Имя = ВыборкаДетальныеЗаписи.Имя;
	//			ГрузОт_Отчество = ВыборкаДетальныеЗаписи.Отчество;
	//		КонецЦикла;
	//		ГрузОт_НаимОрг = ИсходнаяРеализация.Организация.Наименование;
	//		ГрузОт_СтруктураАдреса = ПолучитьСтруктуруАдреса(ИсходнаяРеализация.Организация,Ложь);
	//		ГрузОт_КодРегион = ПолучитьКодРегионаОрганизации(ИсходнаяРеализация);
	//	КонецЕсли;
	Иначе
	
		ГрузОт_НаимОрг = Документ.Организация.Наименование;
		ГрузОт_ИННЮЛ = Документ.Организация.ИНН;
		ГрузОт_КПП = Документ.Организация.КПП;
		ГрузОт_КодРегион = СТруктураДанныхДляВыгрузки.Прод_КодРегион;
		
		Попытка
			АдресПолныйОтправителя = ПолучитьЗначениеСвойстваОбъектаДФормы("Edisoft_Адрес (Организации)",Документ.Организация);
		Исключение
			
			Попытка
				
				АдресПолныйПоставщика = Документ.Организация.КонтактнаяИнформация.НайтиСтроки(СтруктураПоискаКонтактнойИнформацииОрганизации);//ПолучитьАдресСтрокой(Документ.Организация,Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
				АдресПолныйПоставщика = АдресПолныйПоставщика[0].Представление;
				
			Исключение					
				Сообщить("Не удалось получить данные адреса организации " + Документ.Организация);
			КонецПопытки;
			
		КонецПопытки;
		
		Попытка
				
			ДанныеАдресаОтправителя = РазложитьСтрокуВМассив(АдресПолныйОтправителя, ",");
			ГрузОтИндекс = СокрЛП(ДанныеАдресаОтправителя[0]);
			ГрузОтГород = СокрЛП(ДанныеАдресаОтправителя[1]);
			ГрузОтУлица = СокрЛП(ДанныеАдресаОтправителя[2]);
			ГрузОтДом= СокрЛП(ДанныеАдресаОтправителя[3]);
			ГрузОтРайон= "";
			ГрузОтНаселПункт="";
				
		Исключение
			Сообщить("Не удалось получить информацию по адресу организации. Данные в представлении должны быть разделены запятыми, В следующем порядке: 1) Индекс, 2) Город, 3) улица, 4) дом");
		КонецПопытки;
	
		ГрузОт_КодРегион = СТруктураДанныхДляВыгрузки.Прод_КодРегион;//ПолучитьКодРегионаГрузоотправителя(ИсходнаяРеализация);
		
		Если Не ЗначениеЗаполнено(ГрузОт_НаимОрг) Тогда
			Отказ = Истина;
			Лог = Лог + "Ошибка в "+Документ+" Не удалось получить наименование грузоотправителя" + Символы.ПС;
			//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить наименование грузоотправителя");
		КонецЕсли; 
		Если Не ЗначениеЗаполнено(ГрузОт_ИННЮЛ) Тогда
			Отказ = Истина;
			Лог = Лог + "Ошибка в "+Документ+" Не удалось получить ИНН грузоотправителя" + Символы.ПС;
			//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить ИНН грузоотправителя");
		КонецЕсли; 
		Если Не ЗначениеЗаполнено(ГрузОт_КодРегион) Тогда
			Отказ = Истина;
			Лог = Лог + "Ошибка в "+Документ+" Не удалось получить код региона грузоотправителя" + Символы.ПС;
			//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить код региона грузоотправителя");
		КонецЕсли; 
		Если Не ЗначениеЗаполнено(ГрузОт_КПП) Тогда 
			Отказ = Истина;
			Лог = Лог + "Ошибка в "+Документ+" Не удалось получить КПП грузоотправителя" + Символы.ПС;
			//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить КПП грузоотправителя");
		КонецЕсли; 
	КонецЕсли;
	
	//конец 20160606
	
	//Начало 20160310
	АдресГП = "";//СТруктураДанныхДляВыгрузки.АдресТочки;
	ИндексГП = "";//СокрЛП(АдресГП[1]);
	Если Объект.Бухгалтерия=Ложь Тогда
		УлицаГП = ИсходнаяРеализация.Партнер.Комментарий;//СокрЛП(АдресГП[3]);
	Иначе
		УлицаГП = "";
	КонецЕсли;
	ДомГП = "";//СокрЛП(АдресГП[4]);
	ГородГП = "";//СокрЛП(АдресГП[2]);
	НаимГП = ИсходнаяРеализация.Контрагент.Наименование;
	Грузополучатель_КодРегион = СТруктураДанныхДляВыгрузки.Грузополучатель_КодРегион;
	//Конец 20160310		
	Если Объект.Бухгалтерия Тогда
		ЦенаВключаетНДС = Документ.ДокументОснование.СуммаВключаетНДС;
	Иначе
		ЦенаВключаетНДС = Документ.ДокументОснование.ЦенаВключаетНДС;
	КонецЕсли;
	СумНДС_всего = Документ.ДокументОснование.Товары.Итог("СуммаНДС");
	////Если ЦенаВключаетНДС Тогда
	Если Объект.Бухгалтерия Тогда
		Если ЦенаВключаетНДС Тогда
			СтТовБезНДСВсего = Документ.ДокументОснование.Товары.Итог("Сумма")-СумНДС_всего;
		Иначе
			СтТовБезНДСВсего = Документ.ДокументОснование.Товары.Итог("Сумма")
		КонецЕсли;
		СтТовУчНалВсего = Документ.ДокументОснование.Товары.Итог("Сумма");//8339.2600
	Иначе
		СтТовБезНДСВсего = Документ.ДокументОснование.Товары.Итог("СуммаСНДС")-СумНДС_всего;//260000.3100
		СтТовУчНалВсего = Документ.ДокументОснование.Товары.Итог("СуммаСНДС");//8339.2600
	КонецЕсли;
		
	//Иначе
	//	СтТовБезНДСВсего = Документ.ДокументОснование.Товары.Итог("Сумма");//260000.3100
	//	СтТовУчНалВсего = Документ.ДокументОснование.Товары.Итог("Сумма")+СумНДС_всего;//8339.2600
	//КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
		ЗаписьXML.ЗаписатьАтрибут("ИдФайл",ИдФайл);
		ЗаписьXML.ЗаписатьАтрибут("ВерсФорм","5.01");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвУчДокОбор");
			ЗаписьXML.ЗаписатьАтрибут("ИдОтпр",ИдОтпр);
			ЗаписьXML.ЗаписатьАтрибут("ИдПол",ИдПок);
			//ЗаписьXML.ЗаписатьАтрибут("ИдПок",ИдПок);
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвОЭДОтпр");
				ЗаписьXML.ЗаписатьАтрибут("НаимОрг","ООО Эдисофт");
				ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ","7801471082");
				ЗаписьXML.ЗаписатьАтрибут("ИдЭДО","2IJ");
			ЗаписьXML.ЗаписатьКонецЭлемента();//СвОЭДОтпр
		ЗаписьXML.ЗаписатьКонецЭлемента();//СвУчДокОбор
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
				ЗаписьXML.ЗаписатьАтрибут("КНД","1115125");
				ЗаписьXML.ЗаписатьАтрибут("Функция","СЧФДОП");
				ЗаписьXML.ЗаписатьАтрибут("ПоФактХЖ","Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)");
				ЗаписьXML.ЗаписатьАтрибут("НаимДокОпр","Счет-фактура и документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)");
				ЗаписьXML.ЗаписатьАтрибут("НаимЭконСубСост",Прод_НаимОрг);
				
				//Валидация
				ДатаФормирования = ТекущаяДата();
				ЗаписьXML.ЗаписатьАтрибут("ДатаИнфПр", Формат(ДатаФормирования, "ДФ=dd.MM.yyyy"));
				ЗаписьXML.ЗаписатьАтрибут("ВремИнфПр", Формат(ДатаФормирования, "ДФ=hh.mm.ss")); 
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("СвСчФакт");
					ЗаписьXML.ЗаписатьАтрибут("НомерСчФ",ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(НомерСчФ));
					ЗаписьXML.ЗаписатьАтрибут("ДатаСчФ",ДатаСчФ);
					ЗаписьXML.ЗаписатьАтрибут("КодОКВ","643");
					
					Если ЗначениеЗаполнено(НомИспрСчФ) и ЗначениеЗаполнено(ДатаИспрСчФ) Тогда
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИспрСчФ");
							ЗаписьXML.ЗаписатьАтрибут("ДатаИспрСчФ",ДатаИспрСчФ);
							ЗаписьXML.ЗаписатьАтрибут("НомИспрСчФ",НомИспрСчФ);
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИспрСчФ
						
					КонецЕсли;
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("СвПрод");
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИдСв");
							//ЗаписьXML.ЗаписатьНачалоЭлемента("СвЮЛ");
							//	ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Прод_ИНН);
							//	ЗаписьXML.ЗаписатьАтрибут("КПП",Прод_КПП);
							//	ЗаписьXML.ЗаписатьАтрибут("НаимОрг",Прод_НаимОрг);
							//ЗаписьXML.ЗаписатьКонецЭлемента();//СвЮЛ
							Если Документ.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
								
								ЗаписьXML.ЗаписатьНачалоЭлемента("СвЮЛУч");
									ЗаписьXML.ЗаписатьАтрибут("НаимОрг",Документ.Организация.Наименование);
									ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Документ.Организация.ИНН);
									ЗаписьXML.ЗаписатьАтрибут("КПП",Документ.Организация.КПП);	
								ЗаписьXML.ЗаписатьКонецЭлемента();//СвЮЛ
								
							Иначе
								
								//ЗаписьXML.ЗаписатьНачалоЭлемента("СвИП");
								//	ЗаписьXML.ЗаписатьАтрибут("ИННФЛ",Документ.Организация.ИНН);
								//	ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
								//		ЗаписьXML.ЗаписатьАтрибут("Фамилия",Фамилия);
								//		ЗаписьXML.ЗаписатьАтрибут("Имя",Имя);
								//		ЗаписьXML.ЗаписатьАтрибут("Отчество",Отчество);
								//	ЗаписьXML.ЗаписатьКонецЭлемента();//ФИО  
								//ЗаписьXML.ЗаписатьКонецЭлемента();//СвФЛ
								
							КонецЕсли;
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИдСв
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("Адрес");
							ЗаписьXML.ЗаписатьНачалоЭлемента("АдрРФ");
								ЗаписьXML.ЗаписатьАтрибут("КодРегион",Прод_КодРегион);
							ЗаписьXML.ЗаписатьКонецЭлемента();//АдрРФ
						ЗаписьXML.ЗаписатьКонецЭлемента();//Адрес
					ЗаписьXML.ЗаписатьКонецЭлемента();//СвПрод
					
					
					//начало 20160606
					//Если Не ЗначениеЗаполнено(ИсходнаяРеализация.Грузоотправитель) Тогда
						//Если  ИсходнаяРеализация.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
							ЗаписьXML.ЗаписатьНачалоЭлемента("ГрузОт");
								ЗаписатьXML(ЗаписьXML,"он же","ОнЖе");
							ЗаписьXML.ЗаписатьКонецЭлемента();//ГрузОт
						//Иначе
						//	ЗаписьXML.ЗаписатьНачалоЭлемента("ГрузОт");
						//		ЗаписьXML.ЗаписатьНачалоЭлемента("ГрузОтпр");
						//			ЗаписьXML.ЗаписатьНачалоЭлемента("НаимГОП");
						//				ЗаписьXML.ЗаписатьНачалоЭлемента("ФИОИП");
						//					ЗаписьXML.ЗаписатьАтрибут("Фамилия",ГрузОт_Фамилия);
						//					ЗаписьXML.ЗаписатьАтрибут("Имя",ГрузОт_Имя);
						//					ЗаписьXML.ЗаписатьАтрибут("Отчество",ГрузОт_Отчество);
						//				ЗаписьXML.ЗаписатьКонецЭлемента();//ФИОИП 
						//			ЗаписьXML.ЗаписатьКонецЭлемента();//НаимГОП
						//		
						//			ЗаписьXML.ЗаписатьНачалоЭлемента("Адрес");
						//				ЗаписьXML.ЗаписатьНачалоЭлемента("АдрРФ");
						//					Если ЗначениеЗаполнено(ГрузОт_СтруктураАдреса.PostalCode) Тогда  ЗаписьXML.ЗаписатьАтрибут("Индекс",ГрузОт_СтруктураАдреса.PostalCode);  КонецЕсли;
						//					Если ЗначениеЗаполнено(ГрузОт_КодРегион)Тогда  
						//						ЗаписьXML.ЗаписатьАтрибут("КодРегион",ГрузОт_КодРегион) 
						//					Иначе 
						//						//ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для атбрибута //ГрузОт/КодРегион");;
						//					КонецЕсли;
						//				Если ЗначениеЗаполнено(ГрузОт_СтруктураАдреса.State) Тогда ЗаписьXML.ЗаписатьАтрибут("Район",ГрузОт_СтруктураАдреса.State); КонецЕсли;
						//					Если ЗначениеЗаполнено(ГрузОт_СтруктураАдреса.CityName) Тогда ЗаписьXML.ЗаписатьАтрибут("Город",ГрузОт_СтруктураАдреса.CityName); КонецЕсли;
						//					Если ЗначениеЗаполнено(ГрузОт_СтруктураАдреса.Locality) Тогда ЗаписьXML.ЗаписатьАтрибут("НаселПункт",ГрузОт_СтруктураАдреса.Locality); КонецЕсли;
						//					Если ЗначениеЗаполнено(ГрузОт_СтруктураАдреса.Street)Тогда ЗаписьXML.ЗаписатьАтрибут("Улица",ГрузОт_СтруктураАдреса.Street);КонецЕсли;
						//					Если ЗначениеЗаполнено(ГрузОт_СтруктураАдреса.Number)Тогда ЗаписьXML.ЗаписатьАтрибут("Дом",ГрузОт_СтруктураАдреса.Number);КонецЕсли;
						//					Если ЗначениеЗаполнено(ГрузОт_СтруктураАдреса.Block)Тогда ЗаписьXML.ЗаписатьАтрибут("Корпус",ГрузОт_СтруктураАдреса.Block);КонецЕсли;
						//				ЗаписьXML.ЗаписатьКонецЭлемента();//АдрРФ
						//			ЗаписьXML.ЗаписатьКонецЭлемента();//Адрес
						//		ЗаписьXML.ЗаписатьКонецЭлемента();//ГрузОтпр
						//	ЗаписьXML.ЗаписатьКонецЭлемента();//ГрузОт
					//	//КонецЕсли;	
					//Иначе
					//	ЗаписьXML.ЗаписатьНачалоЭлемента("ГрузОт");
					//		ЗаписьXML.ЗаписатьНачалоЭлемента("ГрузОтпр");
					//			ЗаписьXML.ЗаписатьНачалоЭлемента("ИдСв");
					//				ЗаписьXML.ЗаписатьНачалоЭлемента("СвЮЛУч");
					//					ЗаписьXML.ЗаписатьАтрибут("НаимОрг",ГрузОт_НаимОрг);
					//					ЗаписьXML.ЗаписатьАтрибут("КПП",ГрузОт_КПП);
					//					ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",ГрузОт_ИННЮЛ);
					//				ЗаписьXML.ЗаписатьКонецЭлемента();//СвЮЛУч	
					//			ЗаписьXML.ЗаписатьКонецЭлемента();//ИдСв
					//			
					//		//	ЗаписьXML.ЗаписатьНачалоЭлемента("НаимГОП");
					//		//		ЗаписатьXML(ЗаписьXML,ГрузОт_НаимОрг,"НаимОрг"); 
					//		//	ЗаписьXML.ЗаписатьКонецЭлемента();//НаимГОП
					//		//
					//			ЗаписьXML.ЗаписатьНачалоЭлемента("Адрес");
					//				ЗаписьXML.ЗаписатьНачалоЭлемента("АдрРФ");
					//				
					//					Если ЗначениеЗаполнено(ГрузОтГород) Тогда ЗаписьXML.ЗаписатьАтрибут("Город",ГрузОтГород); КонецЕсли;
					//					Если ЗначениеЗаполнено(ГрузОтИндекс) Тогда ЗаписьXML.ЗаписатьАтрибут("Индекс",ГрузОтИндекс); КонецЕсли;
					//					Если ЗначениеЗаполнено(ГрузОт_КодРегион) Тогда ЗаписьXML.ЗаписатьАтрибут("КодРегион",ГрузОт_КодРегион); КонецЕсли;										
					//					Если ЗначениеЗаполнено(ГрузОтУлица) Тогда ЗаписьXML.ЗаписатьАтрибут("Улица",ГрузОтУлица); КонецЕсли;
					//					Если ЗначениеЗаполнено(ГрузОтДом) Тогда ЗаписьXML.ЗаписатьАтрибут("Дом",ГрузОтДом); КонецЕсли;
					//														
					//				ЗаписьXML.ЗаписатьКонецЭлемента();//АдрРФ
					//			ЗаписьXML.ЗаписатьКонецЭлемента();//Адрес
					//		ЗаписьXML.ЗаписатьКонецЭлемента();//ГрузОтпр
					//	ЗаписьXML.ЗаписатьКонецЭлемента();//ГрузОт
					//КонецЕсли;	

					//конец 20160606
					
					// начало 20170309
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("ГрузПолуч");
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИдСв");
							ЗаписьXML.ЗаписатьНачалоЭлемента("СвЮЛУч");
							
								Если ЗначениеЗаполнено(ИННЮЛ_ГрузПолуч) Тогда ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",ИННЮЛ_ГрузПолуч); КонецЕсли;
								Если ЗначениеЗаполнено(КПП_ГрузПолуч) Тогда ЗаписьXML.ЗаписатьАтрибут("КПП",КПП_ГрузПолуч); КонецЕсли;
								Если ЗначениеЗаполнено(НаимОрг_ГрузПолуч) Тогда ЗаписьXML.ЗаписатьАтрибут("НаимОрг",НаимОрг_ГрузПолуч); КонецЕсли;																
								
								//ЗаписьXML.ЗаписатьАтрибут("ОКОПФ",Неопределено);
							ЗаписьXML.ЗаписатьКонецЭлемента();//СвЮЛУч
							
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИдСв	
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("Адрес");
							ЗаписьXML.ЗаписатьНачалоЭлемента("АдрРФ");
								Если ЗначениеЗаполнено(Грузополучатель_КодРегион) Тогда ЗаписьXML.ЗаписатьАтрибут("КодРегион",Грузополучатель_КодРегион); КонецЕсли;
								Если ЗначениеЗаполнено(ИндексГП) Тогда ЗаписьXML.ЗаписатьАтрибут("Индекс",ИндексГП); КонецЕсли;
								Если ЗначениеЗаполнено(ГородГП) Тогда ЗаписьXML.ЗаписатьАтрибут("Город",ГородГП); КонецЕсли;
								Если ЗначениеЗаполнено(УлицаГП) Тогда ЗаписьXML.ЗаписатьАтрибут("Улица",УлицаГП); КонецЕсли;
								Если ЗначениеЗаполнено(ДомГП) Тогда ЗаписьXML.ЗаписатьАтрибут("Дом",ДомГП); КонецЕсли;
							ЗаписьXML.ЗаписатьКонецЭлемента();//АдрРФ
						ЗаписьXML.ЗаписатьКонецЭлемента();//Адрес						
												
					ЗаписьXML.ЗаписатьКонецЭлемента();//ГрузПолуч

					
					// конец 20170309
					//ЗаписьXML.ЗаписатьНачалоЭлемента("СвПРД");
					//			ЗаписьXML.ЗаписатьАтрибут("НомерПРД",НомерПРД);
					//			ЗаписьXML.ЗаписатьАтрибут("ДатаПРД",ДатаПРД);
					//ЗаписьXML.ЗаписатьКонецЭлемента();//СвПРД
					
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("СвПокуп");
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИдСв");
							ЗаписьXML.ЗаписатьНачалоЭлемента("СвЮЛУч");
								ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Покуп_ИНН);
								ЗаписьXML.ЗаписатьАтрибут("КПП",Покуп_КПП);
								ЗаписьXML.ЗаписатьАтрибут("НаимОрг",Покуп_НаимОрг);
							ЗаписьXML.ЗаписатьКонецЭлемента();//СвЮЛ
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИдСв
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("Адрес");
							ЗаписьXML.ЗаписатьНачалоЭлемента("АдрРФ");
								ЗаписьXML.ЗаписатьАтрибут("КодРегион",Покуп_КодРегион);
							ЗаписьXML.ЗаписатьКонецЭлемента();//АдрРФ
						ЗаписьXML.ЗаписатьКонецЭлемента();//Адрес
					ЗаписьXML.ЗаписатьКонецЭлемента();//СвПокуп
					
					//ЗаписьXML.ЗаписатьНачалоЭлемента("ДопСвФХЖ1");
					//	ЗаписьXML.ЗаписатьАтрибут("ИдГосКон",Неопределено);
					//	ЗаписьXML.ЗаписатьАтрибут("НаимОКВ",Неопределено);
					//	ЗаписьXML.ЗаписатьАтрибут("КурсВал",Неопределено);
					//ЗаписьXML.ЗаписатьКонецЭлемента();//ДопСвФХЖ1
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("ИнфПолФХЖ1");
					
					Если ДляХ5 Тогда
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("ТекстИнф");
							ЗаписьXML.ЗаписатьАтрибут("Идентиф","отправитель");
							ЗаписьXML.ЗаписатьАтрибут("Значен",""+Seller_ILN);
						ЗаписьXML.ЗаписатьКонецЭлемента();//ТекстИнф
						
					Иначе	
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("ТекстИнф");
							ЗаписьXML.ЗаписатьАтрибут("Идентиф","получатель");
							ЗаписьXML.ЗаписатьАтрибут("Значен",""+Buyer_ILN);
						ЗаписьXML.ЗаписатьКонецЭлемента();//ТекстИнф
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("ТекстИнф");
							ЗаписьXML.ЗаписатьАтрибут("Идентиф","грузополучатель");
							ЗаписьXML.ЗаписатьАтрибут("Значен",""+DeliveryPoint_ILN);
						ЗаписьXML.ЗаписатьКонецЭлемента();//ТекстИнф
						
					КонецЕсли;
					
					ЗаписьXML.ЗаписатьКонецЭлемента();//ИнфПолФХЖ1
				
				ЗаписьXML.ЗаписатьКонецЭлемента();//СвСчФакт
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("ТаблСчФакт");
					Для Сч=0 По СТруктураДанныхДляВыгрузки.СписокНоменклатур.Количество()-1 Цикл
					
						Ключ = "Строка" + Строка(Сч);
						СтрокаСчета = СТруктураДанныхДляВыгрузки.СписокНоменклатур[Ключ];
						НомСтр = Формат(СтрокаСчета.LineNumber,"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0"); 
						НаимТов = СтрокаСчета.Номенклатура.Наименование; 
						Попытка
							
							ОКЕИ_Тов = СтрокаСчета.Упаковка.ЕдиницаИзмерения.Код;
							
							Если Не ЗначениеЗаполнено(ОКЕИ_Тов) Тогда							
								ОКЕИ_Тов = СтрокаСчета.Номенклатура.ЕдиницаИзмерения.Код;
							КонецЕсли;
							
						Исключение
							ОКЕИ_Тов = СтрокаСчета.Номенклатура.ЕдиницаИзмерения.Код;
						КонецПопытки; 
						КолТов = Формат(СтрокаСчета.КоличествоВДокументе,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0"); 
						
						СтавкаНДС = СтрокаСчета.СтавкаНДС;
						
						ЦенаТов = Формат(СтрокаСчета.ЦенаБезНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
						СтТовБезНДС = СтрокаСчета.СуммаБезНДС;
						СтТовУчНал = СтрокаСчета.СуммаСНДС;
						НалСтВел = Формат(Число(СтавкаНДС),"ЧДЦ=; ЧРД=.; ЧН=0; ЧГ=0");//Строка(УчетНДС.ПолучитьСтавкуНДС(СтрокаСчета.СтавкаНДС));
						СумНДС = Формат(СтрокаСчета.СуммаНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
						//ЕдиницаИзмерения = СтрокаСчета.Упаковка.ЕдиницаИзмерения.Наименование;//?(ЗначениеЗаполнено(СтрокаСчета.Номенклатура.ЕдиницаИзмерения), СтрокаСчета.Номенклатура.ЕдиницаИзмерения.Наименование, "");
						ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(СтрокаСчета);
						Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) ТОгда
							ЕдиницаИзмерения = СтрокаСчета.Номенклатура.ЕдиницаИзмерения.Наименование;
						КонецЕсли;
						
						ИнфПолСтрUPD = ИнфПолСтр;
						
						КодНоменклатурыПокупателя = СтрокаСчета.КодНоменклатурыПокупателя;//ПолучитьКодТовара(СтрокаСчета, 2, Документ.Контрагент, Документ.ДокументОснование.Грузополучатель);
						ИнфПолСтрUPD = ИнфПолСтрUPD+?(ЗначениеЗаполнено(КодНоменклатурыПокупателя),"код_материала:"+КодНоменклатурыПокупателя+";","");
						
						ШК = СтрокаСчета.EAN;//ПолучитьКодТовара(СтрокаСчета,3,Документ.Контрагент,Документ.ДокументОснование.Грузополучатель);
						ИнфПолСтрUPD = ИнфПолСтрUPD+?(ЗначениеЗаполнено(ШК),"штрихкод:"+ШК+"","");//ИнфПолСтрUPD = ИнфПолСтрUPD+?(ЗначениеЗаполнено(ШК),"штрихкод:"+ШК+";","");
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("СведТов");
							ЗаписьXML.ЗаписатьАтрибут("НомСтр",НомСтр);
							ЗаписьXML.ЗаписатьАтрибут("НаимТов",НаимТов);
							ЗаписьXML.ЗаписатьАтрибут("ОКЕИ_Тов",СокрЛП(ОКЕИ_Тов));
							ЗаписьXML.ЗаписатьАтрибут("КолТов",КолТов);
							ЗаписьXML.ЗаписатьАтрибут("ЦенаТов",ЦенаТов);//без НДС
							ЗаписьXML.ЗаписатьАтрибут("СтТовБезНДС",СтТовБезНДС);
							ЗаписьXML.ЗаписатьАтрибут("НалСт",НалСтВел+"%");
							ЗаписьXML.ЗаписатьАтрибут("СтТовУчНал",СтТовУчНал);
							
							ЗаписьXML.ЗаписатьНачалоЭлемента("Акциз");
								ЗаписатьXML(ЗаписьXML,"без акциза","БезАкциз");
							ЗаписьXML.ЗаписатьКонецЭлемента();//Акциз 
							
							ЗаписьXML.ЗаписатьНачалоЭлемента("СумНал");
								ЗаписатьXML(ЗаписьXML,СумНДС,"СумНал");
							ЗаписьXML.ЗаписатьКонецЭлемента();//СумНал
							
							Если ЗначениеЗаполнено(НомерЗаказаПокупателя) Тогда
								ЗаписьXML.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");
									ЗаписьXML.ЗаписатьАтрибут("Идентиф","номер_заказа");
									ЗаписьXML.ЗаписатьАтрибут("Значен",""+НомерЗаказаПокупателя);
								ЗаписьXML.ЗаписатьКонецЭлемента();//ИнфПолСтр
							КонецЕсли; 
							
							Если ЗначениеЗаполнено(НомерПРД) Тогда//
								ЗаписьXML.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");
									ЗаписьXML.ЗаписатьАтрибут("Идентиф","номер_накладной");
									ЗаписьXML.ЗаписатьАтрибут("Значен",""+НомерПРД);
								ЗаписьXML.ЗаписатьКонецЭлемента();//ИнфПолСтр
							КонецЕсли;
							
							Если ЗначениеЗаполнено(КодНоменклатурыПокупателя) Тогда//
								ЗаписьXML.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");
									ЗаписьXML.ЗаписатьАтрибут("Идентиф","код_материала");
									ЗаписьXML.ЗаписатьАтрибут("Значен",""+КодНоменклатурыПокупателя);
								ЗаписьXML.ЗаписатьКонецЭлемента();//ИнфПолСтр
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ШК) Тогда//
								ЗаписьXML.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");
									ЗаписьXML.ЗаписатьАтрибут("Идентиф","штрихкод");
									ЗаписьXML.ЗаписатьАтрибут("Значен",""+ШК);
								ЗаписьXML.ЗаписатьКонецЭлемента();//ИнфПолСтр
							КонецЕсли;
							
							ЗаписьXML.ЗаписатьНачалоЭлемента("ДопСведТов");
								ЗаписьXML.ЗаписатьАтрибут("НаимЕдИзм", ЕдиницаИзмерения);
							ЗаписьXML.ЗаписатьКонецЭлемента();//ДопСведТов
							
						ЗаписьXML.ЗаписатьКонецЭлемента();//СведТов 
					КонецЦикла;
					СтТовБезНДСВсего = Формат(СтТовБезНДСВсего,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"); 
					СтТовУчНалВсего = Формат(СтТовУчНалВсего,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"); 
					СумНДС_всего = Формат(СумНДС_всего,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("ВсегоОпл");
						ЗаписьXML.ЗаписатьАтрибут("СтТовБезНДСВсего",СтТовБезНДСВсего);
						ЗаписьXML.ЗаписатьАтрибут("СтТовУчНалВсего",СтТовУчНалВсего);
					
						ЗаписьXML.ЗаписатьНачалоЭлемента("СумНалВсего");
							ЗаписатьXML(ЗаписьXML,СумНДС_всего,"СумНал");
						ЗаписьXML.ЗаписатьКонецЭлемента();//СумНалВсего 
					ЗаписьXML.ЗаписатьКонецЭлемента();//ВсегоОпл
				ЗаписьXML.ЗаписатьКонецЭлемента();//ТаблСчФакт
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("СвПродПер");
					ЗаписьXML.ЗаписатьНачалоЭлемента("СвПер"); 
						ЗаписьXML.ЗаписатьАтрибут("СодОпер","Товары переданы");
						//ЗаписьXML.ЗаписатьАтрибут("ДатаПер",Неопределено);
					
						ЗаписьXML.ЗаписатьНачалоЭлемента("ОснПер");
							ЗаписьXML.ЗаписатьАтрибут("НаимОсн","Отсутствует");
						ЗаписьXML.ЗаписатьКонецЭлемента();//ОснПер 
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("СвЛицПер");
							ЗаписьXML.ЗаписатьНачалоЭлемента("РабОргПрод"); 
								ЗаписьXML.ЗаписатьАтрибут("Должность","Должность");
								ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
									ЗаписьXML.ЗаписатьАтрибут("Фамилия","Фамилия");
									ЗаписьXML.ЗаписатьАтрибут("Имя","Имя");
								ЗаписьXML.ЗаписатьКонецЭлемента();//ФИО 
							ЗаписьXML.ЗаписатьКонецЭлемента();//РабОргПрод 
						ЗаписьXML.ЗаписатьКонецЭлемента();//СвЛицПер
					ЗаписьXML.ЗаписатьКонецЭлемента();//СвПер 
				ЗаписьXML.ЗаписатьКонецЭлемента();//СвПродПер
				
				//Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
				//ЗаписьXML.ЗаписатьНачалоЭлемента("СвЮЛ");
				//	ЗаписьXML.ЗаписатьАтрибут("НаимОрг",Документ.Организация.Наименование);
				//	ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Документ.Организация.ИНН);
				//	ЗаписьXML.ЗаписатьАтрибут("КПП",Документ.Организация.КПП);	
				//ЗаписьXML.ЗаписатьКонецЭлемента();//СвЮЛ
				//Иначе
				//ЗаписьXML.ЗаписатьНачалоЭлемента("СвФЛ");
				//	ЗаписьXML.ЗаписатьАтрибут("ИННФЛ",Документ.Организация.ИНН);
				//	ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
				//		ЗаписьXML.ЗаписатьАтрибут("Фамилия",Фамилия);
				//		ЗаписьXML.ЗаписатьАтрибут("Имя",Имя);
				//		ЗаписьXML.ЗаписатьАтрибут("Отчество",Отчество);
				//	ЗаписьXML.ЗаписатьКонецЭлемента();//ФИО  
				//ЗаписьXML.ЗаписатьКонецЭлемента();//СвФЛ	
				//КонецЕсли;
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Подписант");//1
					ЗаписьXML.ЗаписатьАтрибут("ОблПолн",Объект.Подписант_ОбластьПолномочий);
					ЗаписьXML.ЗаписатьАтрибут("Статус",Объект.Подписант_Статус); 
					ЗаписьXML.ЗаписатьАтрибут("ОснПолн","Должностные обязанности");
				Если Документ.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда	
					ЗаписьXML.ЗаписатьНачалоЭлемента("ЮЛ");
					ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Прод_ИНН);
					ЗаписьXML.ЗаписатьАтрибут("Должн",Объект.Должность);
						ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");	
							ЗаписьXML.ЗаписатьАтрибут("Фамилия",Объект.Фамилия);
							ЗаписьXML.ЗаписатьАтрибут("Имя",Объект.Имя);
							ЗаписьXML.ЗаписатьАтрибут("Отчество",Объект.Отчество);
						ЗаписьXML.ЗаписатьКонецЭлемента();//ФИО	
					ЗаписьXML.ЗаписатьКонецЭлемента();//ЮЛ
				Иначе
					ЗаписьXML.ЗаписатьНачалоЭлемента("ИП");
						ЗаписьXML.ЗаписатьАтрибут("ИННФЛ",Прод_ИНН);
						ЗаписьXML.ЗаписатьАтрибут("СвГосРегИП",Документ.Организация.СвидетельствоСерияНомер);
						ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
							ЗаписьXML.ЗаписатьАтрибут("Фамилия",Объект.Фамилия);
							ЗаписьXML.ЗаписатьАтрибут("Имя",Объект.Имя);
							ЗаписьXML.ЗаписатьАтрибут("Отчество",Объект.Отчество);
						ЗаписьXML.ЗаписатьКонецЭлемента();//ФИО  
					ЗаписьXML.ЗаписатьКонецЭлемента();//ИП
				КонецЕсли;	
				ЗаписьXML.ЗаписатьКонецЭлемента();//Подписант
				
				//ЗаписьXML.ЗаписатьНачалоЭлемента("Подписант");//2
				//Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда	
				//	ЗаписьXML.ЗаписатьНачалоЭлемента("ЮЛ");
				//	ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Прод_ИНН);
				//	ЗаписьXML.ЗаписатьАтрибут("Должн",Должность);
				//		ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");	
				//			ЗаписьXML.ЗаписатьАтрибут("Фамилия",Фамилия);
				//			ЗаписьXML.ЗаписатьАтрибут("Имя",Имя);
				//			ЗаписьXML.ЗаписатьАтрибут("Отчество",Отчество);
				//		ЗаписьXML.ЗаписатьКонецЭлемента();//ФИО	
				//	ЗаписьXML.ЗаписатьКонецЭлемента();//ЮЛ
				//Иначе
				//	ЗаписьXML.ЗаписатьНачалоЭлемента("ИП");
				//		ЗаписьXML.ЗаписатьАтрибут("ИННФЛ",Прод_ИНН);
				//		ЗаписьXML.ЗаписатьАтрибут("СвГосРегИП",Документ.Организация.СвидетельствоСерияНомер);
				//		ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
				//			ЗаписьXML.ЗаписатьАтрибут("Фамилия",Фамилия);
				//			ЗаписьXML.ЗаписатьАтрибут("Имя",Имя);
				//			ЗаписьXML.ЗаписатьАтрибут("Отчество",Отчество);
				//		ЗаписьXML.ЗаписатьКонецЭлемента();//ФИО  
				//	ЗаписьXML.ЗаписатьКонецЭлемента();//ИП
				//КонецЕсли;	
				//ЗаписьXML.ЗаписатьКонецЭлемента();//Подписант
			ЗаписьXML.ЗаписатьКонецЭлемента();//Документ
	ЗаписьXML.ЗаписатьКонецЭлемента();//Файл
	
	ТекстВозврата = ЗаписьXML.Закрыть();
	
	Возврат ТекстВозврата;
КонецФункции
//УПД
//УкД
Функция ВыгрузитьКорректировочныйON_SCHFDOPPR(Документ, УИДДокумента, СТруктураДанныхДляВыгрузки)
	
	Если Документ.Исправление = Истина Тогда
		НомИспрКСчФ = Формат(Число(Документ.НомерИсправления),"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");
		ДатаИспрКСчФ = Формат(Документ.Дата,"ДФ = дд.ММ.гггг");
		ТекущийДокумент = Документ.ИсправляемыйСчетФактура;
	Иначе
		НомИспрКСчФ = Неопределено;
		ДатаИспрКСчФ = Неопределено;
		ТекущийДокумент = Документ;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.ДокументОснование) Тогда
		ВызватьИсключение("У документа "+Документ+" отсутствует ссылка на скорректированную реализацию товаров.");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.ДокументОснование.ДокументОснование) Тогда
		ВызватьИсключение("У документа "+Документ+" отсутствует ссылка на исходную реализацию товаров.");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.ДокументОснование.ДокументОснование.ЗаказКлиента) Тогда
		ВызватьИсключение("У документа "+Документ+" отсутствует ссылка на исходный заказ.");
	КонецЕсли;
	
	СкорректированнаяРеализация = Документ.ДокументОснование;
	ИсходнаяРеализация = Документ.ДокументОснование.ДокументОснование;
	ИсходныйЗаказ = Документ.ДокументОснование.ДокументОснование.ЗаказКлиента;
	НомерСчФ = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Документ.ИсходныйДокумент.Номер);
	ДатаСчФ = Формат(Документ.ИсходныйДокумент.Дата,"ДФ = дд.ММ.гггг");
	
	ПоследнееИсправлениеСчф = Документы.СчетФактураВыданный.НайтиПоРеквизиту("ДокументОснование",Документ.ДокументОснование.ДокументОснование);
	Если ПоследнееИсправлениеСчф.Исправление = Истина Тогда
		НомИспрСчФ = Формат(Число(ПоследнееИсправлениеСчф.НомерИсправления),"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");
		ДатаИспрСчФ = Формат(ПоследнееИсправлениеСчф.Дата,"ДФ = дд.ММ.гггг");//2011-05-27
	Иначе
		НомИспрСчФ = Неопределено;
		ДатаИспрСчФ = Неопределено;
	КонецЕсли; 
	
	Buyer_ILN = СТруктураДанныхДляВыгрузки.Buyer_ILN;//ПолучитьGLNКонтрагента(Документ);//1234567890123
	Если Не ЗначениеЗаполнено(Buyer_ILN) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные GLN покупателя"); КонецЕсли; 
	Seller_ILN = СТруктураДанныхДляВыгрузки.Seller_ILN;//ПолучитьGLNОрганизации(Документ);//1234567890123
	Если Не ЗначениеЗаполнено(Seller_ILN) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные GLN продавца"); КонецЕсли; 
	//DeliveryPoint_ILN = ПолучитьGLNТочкиДоставки(ИсходнаяРеализация);//1234567890123
	DeliveryPoint_ILN = СТруктураДанныхДляВыгрузки.DeliveryPoint_ILN;//ПолучитьGLNТочкиДоставки(СкорректированнаяРеализация);//1234567890123
	UltimateCustomer_ILN = DeliveryPoint_ILN;//СТруктураДанныхДляВыгрузки.UltimateCustomer_ILN;//ПолучитьЗначениеСвойстваОбъекта("UltimateCustomer_ILN",ИсходныйЗаказ);//1234567890123
	//Если (EDI_ПодставлятьРЦ = Ложь) и ЗначениеЗаполнено(UltimateCustomer_ILN) Тогда//(ПолучитьЗначениеСвойстваОбъекта("Edisoft_ИспользоватьРазбивкуПоПалетам",Документ.Контрагент) = Истина) и 
	//	DeliveryPoint_ILN = UltimateCustomer_ILN;
	//КонецЕсли;
	Если Не ЗначениеЗаполнено(DeliveryPoint_ILN) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные GLN точки доставки"); КонецЕсли; 
	
	ИдОтпр = СТруктураДанныхДляВыгрузки.ИдОтпр;//ПолучитьFNSidОрганизации(Документ);
	Если Не ЗначениеЗаполнено(ИдОтпр) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //ИдОтпр"); КонецЕсли; 
	ИдПок = СТруктураДанныхДляВыгрузки.ИдПок;//ПолучитьFNSidКонтрагента(Документ);
	Если Не ЗначениеЗаполнено(ИдПок) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //ИдПок"); КонецЕсли; 
	
	ИдФайл = "ON_KORSCHFDOPPR_"+ИдПок+"_"+ИдОтпр+"_"+Формат(ТекущаяДата(),"ДФ = ггггММдд")+"_"+УИДДокумента;
	
	НомерКСчФ = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Документ.Номер);
	ДатаКСчФ = Формат(Документ.Дата,"ДФ = дд.ММ.гггг");
	
	НомерПРД = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ИсходнаяРеализация.Номер);
	ДатаПРД = Формат(ИсходнаяРеализация.Дата,"ДФ = дд.ММ.гггг");
	
	НомерЗаказаПокупателя = СТруктураДанныхДляВыгрузки.НомерИДатаЗаказа.Номер;//ПолучитьЗначениеСвойстваОбъекта("EDISoft_НомерВходящего",ИсходныйЗаказ); Исключение НомерЗаказаПокупателя = ""; КонецПопытки;
	Если Не ЗначениеЗаполнено(НомерЗаказаПокупателя) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные номера заказа покупателя"); КонецЕсли; 
	
	ИнфПолСтр = ?(ЗначениеЗаполнено(НомерЗаказаПокупателя),"номер_заказа:"+НомерЗаказаПокупателя+";","")+?(ЗначениеЗаполнено(НомерПРД),"номер_накладной:"+НомерПРД+";","");
	
	Прод_НаимОрг = Документ.Организация.Наименование;
	Прод_ИНН = Документ.Организация.ИНН;
	Прод_КПП = Документ.Организация.КПП;
	Прод_КодРегион = СТруктураДанныхДляВыгрузки.Прод_КодРегион;//ПолучитьКодРегионаОрганизации(Документ);
	Если Не ЗначениеЗаполнено(Прод_КодРегион) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить код региона продавца"); КонецЕсли; 
	Покуп_НаимОрг = Документ.Контрагент.Наименование;
	Покуп_ИНН = Документ.Контрагент.ИНН;//?(EDI_Контрагент = 2,Документ.Контрагент.ГоловнойКонтрагент.ИНН,Документ.Контрагент.ИНН);
	Покуп_КПП = Документ.Контрагент.КПП;//?(EDI_Контрагент = 2,Документ.Контрагент.ГоловнойКонтрагент.КПП,Документ.Контрагент.КПП);
	Покуп_КодРегион = СТруктураДанныхДляВыгрузки.Покуп_КодРегион;//ПолучитьКодРегионаКонтрагента(Документ);
	Если Не ЗначениеЗаполнено(Покуп_КодРегион) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить код региона покупателя"); КонецЕсли; 
	
	//начало 20160606
	Если Не ЗначениеЗаполнено(ИсходнаяРеализация.Грузоотправитель) Тогда
		Если  ИсходнаяРеализация.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ФИОФизЛиц.Период,
				|	ФИОФизЛицСрезПоследних.Фамилия,
				|	ФИОФизЛицСрезПоследних.Имя,
				|	ФИОФизЛицСрезПоследних.Отчество,
				|	ФИОФизЛицСрезПоследних.ФизЛицо
				|ИЗ
				|	РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц,
				|	РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
				|ГДЕ
				|	ФИОФизЛицСрезПоследних.ФизЛицо = &ФизЛицо";
			Запрос.УстановитьПараметр("ФизЛицо", ИсходнаяРеализация.Организация.ИндивидуальныйПредприниматель);
			Результат = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ГрузОт_Фамилия = ВыборкаДетальныеЗаписи.Фамилия;
				ГрузОт_Имя = ВыборкаДетальныеЗаписи.Имя;
				ГрузОт_Отчество = ВыборкаДетальныеЗаписи.Отчество;
			КонецЦикла;
			ГрузОт_НаимОрг = ИсходнаяРеализация.Организация.Наименование;			
			ГрузОт_КодРегион = СТруктураДанныхДляВыгрузки.ГрузОт_КодРегион;//ПолучитьКодРегионаОрганизации(ИсходнаяРеализация);
		КонецЕсли;
	Иначе
		ГрузОт_НаимОрг = ИсходнаяРеализация.Грузоотправитель.Наименование;		
		ГрузОт_КодРегион = СТруктураДанныхДляВыгрузки.ГрузОт_КодРегион;//ПолучитьКодРегионаГрузоотправителя(ИсходнаяРеализация);
	КонецЕсли;	
	//конец 20160606
	
	ЦенаВключаетНДС = СкорректированнаяРеализация.ЦенаВключаетНДС;

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
		ЗаписьXML.ЗаписатьАтрибут("ИдФайл",ИдФайл);
		ЗаписьXML.ЗаписатьАтрибут("ВерсФорм", "5.01");
		ЗаписьXML.ЗаписатьАтрибут("ВерсПрог", "Edisoft");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвУчДокОбор");
			ЗаписьXML.ЗаписатьАтрибут("ИдОтпр",ИдОтпр);
			ЗаписьXML.ЗаписатьАтрибут("ИдПол",ИдПок);
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвОЭДОтпр");
				ЗаписьXML.ЗаписатьАтрибут("НаимОрг","ООО Эдисофт");
				ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ","7801471082");
				ЗаписьXML.ЗаписатьАтрибут("ИдЭДО","2IJ");
			ЗаписьXML.ЗаписатьКонецЭлемента();//СвОЭДОтпр
		ЗаписьXML.ЗаписатьКонецЭлемента();//СвУчДокОбор
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
				ЗаписьXML.ЗаписатьАтрибут("Функция", "КСЧФДИС");
				ЗаписьXML.ЗаписатьАтрибут("ПоФактХЖ", "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)");
				ЗаписьXML.ЗаписатьАтрибут("ОснДоверОргСост", "основание");
				ЗаписьXML.ЗаписатьАтрибут("НаимЭконСубСост", Документ.Организация.Наименование);
				ЗаписьXML.ЗаписатьАтрибут("НаимДокОпр", "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)");
				ЗаписьXML.ЗаписатьАтрибут("КНД", "1115127");
				ЗаписьXML.ЗаписатьАтрибут("ДатаИнфПр", Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy"));
				ЗаписьXML.ЗаписатьАтрибут("ВремИнфПр", Формат(ТекущаяДата(), "ДФ=hh.mm.ss"));
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("СвКСчФ");
					ЗаписьXML.ЗаписатьАтрибут("НомерКСчФ",НомерКСчФ);
					ЗаписьXML.ЗаписатьАтрибут("ДатаКСчФ",ДатаКСчФ);
					ЗаписьXML.ЗаписатьАтрибут("КодОКВ","643");
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("СчФ");
						ЗаписьXML.ЗаписатьАтрибут("НомерСчФ",НомерСчФ);
						ЗаписьXML.ЗаписатьАтрибут("ДатаСчФ",ДатаСчФ);
						Если ЗначениеЗаполнено(НомИспрСчФ) и ЗначениеЗаполнено(ДатаИспрСчФ) Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИспрСчФ");
							ЗаписьXML.ЗаписатьАтрибут("НомИспрСчФ",НомИспрСчФ);
							ЗаписьXML.ЗаписатьАтрибут("ДатаИспрСчФ",ДатаИспрСчФ);
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИспрСчФ
						КонецЕсли;
					ЗаписьXML.ЗаписатьКонецЭлемента();//СчФ
										
					ЗаписьXML.ЗаписатьНачалоЭлемента("СвПрод");
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИдСв");
							Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
							ЗаписьXML.ЗаписатьНачалоЭлемента("СвЮЛУч");
								ЗаписьXML.ЗаписатьАтрибут("НаимОрг",Документ.Организация.Наименование);
								ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Документ.Организация.ИНН);
								ЗаписьXML.ЗаписатьАтрибут("КПП",Документ.Организация.КПП);	
							ЗаписьXML.ЗаписатьКонецЭлемента();//СвЮЛУч
							Иначе
							ЗаписьXML.ЗаписатьНачалоЭлемента("СвФЛ");
								ЗаписьXML.ЗаписатьАтрибут("ИННФЛ",Документ.Организация.ИНН);
								ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
									ЗаписьXML.ЗаписатьАтрибут("Фамилия",Объект.Фамилия);
									ЗаписьXML.ЗаписатьАтрибут("Имя",Объект.Имя);
									ЗаписьXML.ЗаписатьАтрибут("Отчество",Объект.Отчество);
								ЗаписьXML.ЗаписатьКонецЭлемента();//ФИО  
							ЗаписьXML.ЗаписатьКонецЭлемента();//СвФЛ	
							КонецЕсли;
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИдСв
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("Адрес");
							ЗаписьXML.ЗаписатьНачалоЭлемента("АдрРФ");
								ЗаписьXML.ЗаписатьАтрибут("КодРегион",Прод_КодРегион);
							ЗаписьXML.ЗаписатьКонецЭлемента();//АдрРФ
						ЗаписьXML.ЗаписатьКонецЭлемента();//Адрес
					ЗаписьXML.ЗаписатьКонецЭлемента();//СвПрод
										
					ЗаписьXML.ЗаписатьНачалоЭлемента("СвПокуп");
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИдСв");
							ЗаписьXML.ЗаписатьНачалоЭлемента("СвЮЛУч");
								ЗаписьXML.ЗаписатьАтрибут("НаимОрг",Покуп_НаимОрг);
								ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Покуп_ИНН);
								ЗаписьXML.ЗаписатьАтрибут("КПП",Покуп_КПП);
							ЗаписьXML.ЗаписатьКонецЭлемента();//СвЮЛ
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИдСв
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("Адрес");
							ЗаписьXML.ЗаписатьНачалоЭлемента("АдрРФ");
								ЗаписьXML.ЗаписатьАтрибут("КодРегион",Покуп_КодРегион);
							ЗаписьXML.ЗаписатьКонецЭлемента();//АдрРФ
						ЗаписьXML.ЗаписатьКонецЭлемента();//Адрес
					ЗаписьXML.ЗаписатьКонецЭлемента();//СвПокуп
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("ИнфПолФХЖ1");
						ЗаписьXML.ЗаписатьАтрибут("ИдФайлИнфПол", УИДДокумента);
						ЗаписьXML.ЗаписатьНачалоЭлемента("ТекстИнф");
							ЗаписьXML.ЗаписатьАтрибут("Идентиф","отправитель");
							ЗаписьXML.ЗаписатьАтрибут("Значен",""+Seller_ILN);
						ЗаписьXML.ЗаписатьКонецЭлемента();//ТекстИнф
					ЗаписьXML.ЗаписатьКонецЭлемента();//ИнфПолФХЖ1
					
				ЗаписьXML.ЗаписатьКонецЭлемента();//СвКСчФ
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("ТаблКСчФ");
				
				ВсегоУм_СтТовБезНДСВсего = 0;
				ВсегоУм_СтТовУчНалВсего = 0;
				ВсегоУм_СумНал = 0;
				
				ВсегоУвел_СтТовБезНДСВсего = 0;
				ВсегоУвел_СтТовУчНалВсего = 0;
				ВсегоУвел_СумНал = 0;
					КоличествоИтераций = СТруктураДанныхДляВыгрузки.СписокНоменклатур.Количество();
					Для Сч = 0 По КоличествоИтераций -1 Цикл
						Ключ = "Строка" + Строка(сч);
						СтрокаСчета = СТруктураДанныхДляВыгрузки.СписокНоменклатур[Ключ];
						НомСтр = Формат(СтрокаСчета.LineNumber,"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0"); 
						НаимТов = СтрокаСчета.Номенклатура.Наименование; 
						
						//ПОСЛЕ
						Число_СтТовБезНДСПосле = СтрокаСчета.СуммаБезНДС;
						Число_СтТовУчНалПосле = СтрокаСчета.СуммаСНДС;
						Число_СумНДСПосле = СтрокаСчета.СуммаНДС;
						
						Попытка
							ОКЕИ_ТовПосле = СтрокаСчета.Упаковка.ЕдиницаИзмерения.Код;
						Исключение
							ОКЕИ_ТовПосле = СтрокаСчета.Номенклатура.ЕдиницаИзмерения.Код;
						КонецПопытки; 
												
						КолТовПосле = Формат(СтрокаСчета.КоличествоВДокументе,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0"); 
						
						СтавкаНДС = СтрокаСчета.СтавкаНДС;
						
						ЦенаТовПосле = Формат(Число(СтрокаСчета.ЦенаБезНДС),"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
						СтТовБезНДСПосле = Формат(Число(Число_СтТовБезНДСПосле),"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
						СтТовУчНалПосле = Формат(ЧИсло(Число_СтТовУчНалПосле),"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
						НалСтВелПосле = Формат(Число(СтавкаНДС),"ЧДЦ=; ЧРД=.; ЧН=0; ЧГ=0");//Строка(УчетНДС.ПолучитьСтавкуНДС(СтрокаСчета.СтавкаНДС));
						СумНДСПосле = Формат(Число_СумНДСПосле,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
						//ДО
																										
						Число_СтТовБезНДСДо = СтрокаСчета.СуммаБезНДСДоИзменения;//?(СкорректированнаяРеализация.СуммаВключаетНДС = Истина,СтрокаСчета.СуммаДоИзменения - СтрокаСчета.СуммаНДСДоИзменения, СтрокаСчета.СуммаДоИзменения);
						Число_СтТовУчНалДо = СтрокаСчета.СуммаСНДСДоИзменения;//?(СкорректированнаяРеализация.СуммаВключаетНДС = Истина,СтрокаСчета.СуммаДоИзменения, СтрокаСчета.СуммаДоИзменения + СтрокаСчета.СуммаНДСДоИзменения);
						Число_СумНДСДо = СтрокаСчета.СуммаНДСДоИзменения;
						
						Попытка
							ОКЕИ_ТовДо = СтрокаСчета.Упаковка.ЕдиницаИзмерения.Код;
						Исключение
							ОКЕИ_ТовДо = СтрокаСчета.Номенклатура.ЕдиницаИзмерения.Код;
						КонецПопытки;
						КолТовДо = Формат(СтрокаСчета.КоличествоДоИзменения,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0"); 
						
						СтавкаНДС = СтрокаСчета.СтавкаНДСДоИзменения;
						
						ЦенаТовДо = Формат(СтрокаСчета.ЦенаБезНДСДоИзменения,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
						СтТовБезНДСДо = Формат(Число_СтТовБезНДСДо,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
						СтТовУчНалДо = Формат(Число_СтТовУчНалДо,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
						НалСтВелДо = Формат(Число(СтавкаНДС),"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");//Строка(УчетНДС.ПолучитьСтавкуНДС(СтрокаСчета.СтавкаНДС));
						СумНДСДо = Формат(Число_СумНДСДо,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
						////
						РазнСумНал = СтрокаСчета.СуммаНДСДоИзменения - СтрокаСчета.СуммаНДС;
						
						//////+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
						РазницаВСтоимости1 = СтрокаСчета.СтТовБезНДСРазн;
						Если РазницаВСтоимости1 <= 0 Тогда
							ВсегоУм_СтТовБезНДСВсего = ВсегоУм_СтТовБезНДСВсего - РазницаВСтоимости1;
						Иначе
							ВсегоУвел_СтТовБезНДСВсего = ВсегоУвел_СтТовБезНДСВсего + РазницаВСтоимости1;
						КонецЕсли; 
						
						РазницаВСтоимости2 = СтрокаСчета.СтТовУчНалРазн;
						Если РазницаВСтоимости2 <= 0 Тогда
							ВсегоУм_СтТовУчНалВсего = ВсегоУм_СтТовУчНалВсего - РазницаВСтоимости2;
						Иначе
							ВсегоУвел_СтТовУчНалВсего = ВсегоУвел_СтТовУчНалВсего + РазницаВСтоимости2;
						КонецЕсли;
						
						РазницаВСуммеНал = СтрокаСчета.СтТовБезНДСРазн;
						Если РазницаВСуммеНал <= 0 Тогда
							ВсегоУм_СумНал = ВсегоУм_СумНал - РазницаВСуммеНал;
						Иначе
							ВсегоУвел_СумНал = ВсегоУвел_СумНал + РазницаВСуммеНал;
						КонецЕсли;
						//////+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
						
						ИнфПолСтрUPD = ИнфПолСтр;
						
						КодНоменклатурыПокупателя = СтрокаСчета.КодНоменклатурыПокупателя;//ПолучитьКодТовара(СтрокаСчета, 2, Документ.Контрагент, СкорректированнаяРеализация.Грузополучатель);
						ИнфПолСтрUPD = ИнфПолСтрUPD+?(ЗначениеЗаполнено(КодНоменклатурыПокупателя),"код_материала:"+КодНоменклатурыПокупателя+";","");
						
						ШК = СтрокаСчета.EAN;//ПолучитьКодТовара(СтрокаСчета,3,Документ.Контрагент,СкорректированнаяРеализация.Грузополучатель);
						ИнфПолСтрUPD = ИнфПолСтрUPD+?(ЗначениеЗаполнено(ШК),"штрихкод:"+ШК+"","");//ИнфПолСтрUPD = ИнфПолСтрUPD+?(ЗначениеЗаполнено(ШК),"штрихкод:"+ШК+";","");
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("СведТов");
							ЗаписьXML.ЗаписатьАтрибут("НомСтр",НомСтр);
							ЗаписьXML.ЗаписатьАтрибут("НаимТов",НаимТов);
							ЗаписьXML.ЗаписатьАтрибут("ЦенаТовДо", ЦенаТовДо);
							ЗаписьXML.ЗаписатьАтрибут("ЦенаТовПосле", ЦенаТовПосле);
							ЗаписьXML.ЗаписатьАтрибут("ОКЕИ_ТовДо",СокрЛП(ОКЕИ_ТовДо));
							ЗаписьXML.ЗаписатьАтрибут("ОКЕИ_ТовПосле", СокрЛП(ОКЕИ_ТовПосле));
							ЗаписьXML.ЗаписатьАтрибут("НалСтДо",НалСтВелДо+"%");  
							ЗаписьXML.ЗаписатьАтрибут("НалСтПосле",НалСтВелПосле+"%");
							ЗаписьXML.ЗаписатьАтрибут("КолТовДо",КолТовДо);
							ЗаписьXML.ЗаписатьАтрибут("КолТовПосле",КолТовПосле);
							
							ЗаписьXML.ЗаписатьНачалоЭлемента("СтТовБезНДС");
								ЗаписьXML.ЗаписатьАтрибут("СтоимДоИзм",СтТовБезНДСДо);
								ЗаписьXML.ЗаписатьАтрибут("СтоимПослеИзм",СтТовБезНДСПосле);
								Если Число_СтТовБезНДСДо > Число_СтТовБезНДСПосле Тогда
									ЗаписьXML.ЗаписатьАтрибут("СтоимУм", Формат(Число_СтТовБезНДСДо - Число_СтТовБезНДСПосле, "ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"));
								Иначе
									ЗаписьXML.ЗаписатьАтрибут("СтоимУвел", Формат(Число_СтТовБезНДСПосле - Число_СтТовБезНДСДо, "ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"));
								КонецЕсли;
							ЗаписьXML.ЗаписатьКонецЭлемента();//СтТовБезНДС
							
							ЗаписьXML.ЗаписатьНачалоЭлемента("АкцизДо");
									ЗаписатьXML(ЗаписьXML,"без акциза","БезАкциз");
							ЗаписьXML.ЗаписатьКонецЭлемента();//АкцизДо
							
							ЗаписьXML.ЗаписатьНачалоЭлемента("АкцизПосле");
									ЗаписатьXML(ЗаписьXML,"без акциза","БезАкциз");
							ЗаписьXML.ЗаписатьКонецЭлемента();//АкцизПосле
							
							ЗаписьXML.ЗаписатьНачалоЭлемента("АкцизРазн");
								ЗаписатьXML(ЗаписьXML,Формат(0,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"),"СумУвел");
							ЗаписьXML.ЗаписатьКонецЭлемента();//АкцизРазн
							
							ЗаписьXML.ЗаписатьНачалоЭлемента("СумНалДо");
								ЗаписатьXML(ЗаписьXML,СумНДСДо,"СумНДС");
							ЗаписьXML.ЗаписатьКонецЭлемента();//СумНалДо
							
							ЗаписьXML.ЗаписатьНачалоЭлемента("СумНалПосле");
								ЗаписатьXML(ЗаписьXML,СумНДСПосле,"СумНДС");
							ЗаписьXML.ЗаписатьКонецЭлемента();//СумНалПосле
							
							ЗаписьXML.ЗаписатьНачалоЭлемента("СумНалРазн");
								Если РазнСумНал<0 Тогда
									ЗаписатьXML(ЗаписьXML,Формат(-РазнСумНал,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"),"СумУвел");
								Иначе
									ЗаписатьXML(ЗаписьXML,Формат(РазнСумНал,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"),"СумУм");
								КонецЕсли; 
							ЗаписьXML.ЗаписатьКонецЭлемента();//СумНалРазн
							
							ЗаписьXML.ЗаписатьНачалоЭлемента("СтТовУчНал");
								ЗаписьXML.ЗаписатьАтрибут("СтоимДоИзм",СтТовУчНалДо);
								ЗаписьXML.ЗаписатьАтрибут("СтоимПослеИзм",СтТовУчНалПосле);
								Если Число_СтТовУчНалДо > Число_СтТовУчНалПосле Тогда
									ЗаписьXML.ЗаписатьАтрибут("СтоимУм", Формат(Число_СтТовУчНалДо - Число_СтТовУчНалПосле, "ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"));
								Иначе
									ЗаписьXML.ЗаписатьАтрибут("СтоимУвел", Формат(Число_СтТовУчНалПосле - Число_СтТовУчНалДо, "ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"));
								КонецЕсли;
							ЗаписьXML.ЗаписатьКонецЭлемента();//СтТовУчНал
							
							Если ЗначениеЗаполнено(НомерЗаказаПокупателя) Тогда
								ЗаписьXML.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");
									ЗаписьXML.ЗаписатьАтрибут("Идентиф","номер_заказа");
									ЗаписьXML.ЗаписатьАтрибут("Значен",""+НомерЗаказаПокупателя);
								ЗаписьXML.ЗаписатьКонецЭлемента();//ИнфПолФХЖ2
							КонецЕсли; 
							
							Если ЗначениеЗаполнено(КодНоменклатурыПокупателя) Тогда//
								ЗаписьXML.ЗаписатьНачалоЭлемента("ИнфПолФХЖ2");
									ЗаписьXML.ЗаписатьАтрибут("Идентиф","код_материала");
									ЗаписьXML.ЗаписатьАтрибут("Значен",""+КодНоменклатурыПокупателя);
								ЗаписьXML.ЗаписатьКонецЭлемента();//ИнфПолФХЖ2
							КонецЕсли;
							
						ЗаписьXML.ЗаписатьКонецЭлемента();//СведТов 
					КонецЦикла;
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("ВсегоУвел");
						ЗаписьXML.ЗаписатьАтрибут("СтТовБезНДСВсего",СтрЗаменить(Формат(ВсегоУвел_СтТовБезНДСВсего,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"),"-",""));
						ЗаписьXML.ЗаписатьАтрибут("СтТовУчНалВсего",СтрЗаменить(Формат(ВсегоУвел_СтТовУчНалВсего,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"),"-",""));
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("СумНал");
						ЗаписатьXML(ЗаписьXML,СтрЗаменить(Формат(ВсегоУвел_СумНал,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"),"-",""),"СумНДС");
						ЗаписьXML.ЗаписатьКонецЭлемента();//СумНалВсего
					ЗаписьXML.ЗаписатьКонецЭлемента();//ВсегоУвел
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("ВсегоУм");
						ЗаписьXML.ЗаписатьАтрибут("СтТовБезНДСВсего",СтрЗаменить(Формат(ВсегоУм_СтТовБезНДСВсего,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"),"-",""));
						ЗаписьXML.ЗаписатьАтрибут("СтТовУчНалВсего",СтрЗаменить(Формат(ВсегоУм_СтТовУчНалВсего,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"),"-",""));
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("СумНал");
							ЗаписатьXML(ЗаписьXML,СтрЗаменить(Формат(ВсегоУм_СумНал,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"),"-",""),"СумНДС");
						ЗаписьXML.ЗаписатьКонецЭлемента();//СумНалВсего
					ЗаписьXML.ЗаписатьКонецЭлемента();//ВсегоУм
					
				ЗаписьXML.ЗаписатьКонецЭлемента();//ТаблКСчФакт
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("СодФХЖ3");
				ЗаписьXML.ЗаписатьАтрибут("СодОпер", "Содержание операции");
				ЗаписьXML.ЗаписатьАтрибут("ПередатДокум", "Реквизиты передаточных документов");
				ЗаписьXML.ЗаписатьАтрибут("ИныеСвИзмСтоим", "Иные сведения");
				ЗаписьXML.ЗаписатьАтрибут("ДатаНапр", ДатаКСчФ);
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("ОснКор");
				ЗаписьXML.ЗаписатьАтрибут("НомОсн", НомерСчФ);
				ЗаписьXML.ЗаписатьАтрибут("НаимОсн", "Наименование документа-основания");
				ЗаписьXML.ЗаписатьАтрибут("ДопСвОсн", "Дополнительные сведения");
				ЗаписьXML.ЗаписатьАтрибут("ДатаОсн", ДатаСчФ);
				ЗаписьXML.ЗаписатьКонецЭлемента();//ОснКор
				
				ЗаписьXML.ЗаписатьКонецЭлемента();//СодФХЖ3
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Подписант");//1
					ЗаписьXML.ЗаписатьАтрибут("ОблПолн",Объект.Подписант_ОбластьПолномочий); 
					ЗаписьXML.ЗаписатьАтрибут("Статус",Объект.Подписант_Статус); 
					ЗаписьXML.ЗаписатьАтрибут("ОснПолн","Должностные обязанности");
				Если Документ.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда	
					ЗаписьXML.ЗаписатьНачалоЭлемента("ЮЛ");
					ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Прод_ИНН);
					ЗаписьXML.ЗаписатьАтрибут("Должн",Объект.Должность);
						ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");	
							ЗаписьXML.ЗаписатьАтрибут("Фамилия",Объект.Фамилия);
							ЗаписьXML.ЗаписатьАтрибут("Имя",Объект.Имя);
							ЗаписьXML.ЗаписатьАтрибут("Отчество",Объект.Отчество);
						ЗаписьXML.ЗаписатьКонецЭлемента();//ФИО	
					ЗаписьXML.ЗаписатьКонецЭлемента();//ЮЛ
				Иначе
					ЗаписьXML.ЗаписатьНачалоЭлемента("ИП");
						ЗаписьXML.ЗаписатьАтрибут("ИННФЛ",Прод_ИНН);
						ЗаписьXML.ЗаписатьАтрибут("СвГосРегИП",Документ.Организация.СвидетельствоСерияНомер);
						ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
							ЗаписьXML.ЗаписатьАтрибут("Фамилия",Объект.Фамилия);
							ЗаписьXML.ЗаписатьАтрибут("Имя",Объект.Имя);
							ЗаписьXML.ЗаписатьАтрибут("Отчество",Объект.Отчество);
						ЗаписьXML.ЗаписатьКонецЭлемента();//ФИО  
					ЗаписьXML.ЗаписатьКонецЭлемента();//ИП
				КонецЕсли;	
				ЗаписьXML.ЗаписатьКонецЭлемента();//Подписант	
			ЗаписьXML.ЗаписатьКонецЭлемента();//Документ
	ЗаписьXML.ЗаписатьКонецЭлемента();//Файл
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции
//УкД

Функция РазложитьСтрокуВМассив(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции    

&НаКлиенте
Функция ПодписатьВBinИЗапаковать(ФНС,ВременнаяПапкаВыгрузки)
	
	ФНСПодпись = Лев(ФНС,СтрДлина(ФНС)-3)+"bin";//Подписант_ОбластьПолномочий+"_"+
	ПодписатьФайл(ВременнаяПапкаВыгрузки+ФНС,ВременнаяПапкаВыгрузки+ФНСПодпись, "bin");
	
	ИмяАрхива = Лев(ФНС,СтрДлина(ФНС)-3)+"zip";
	ФайлАрхива = Новый ЗаписьZipФайла(ВременнаяПапкаВыгрузки+ИмяАрхива, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
	ФайлАрхива.Добавить(ВременнаяПапкаВыгрузки+ФНС);
	ФайлАрхива.Добавить(ВременнаяПапкаВыгрузки+ФНСПодпись);
	//ФайлАрхива.Добавить(ВременнаяПапкаВыгрузки+ФНСПодпись2);
	ФайлАрхива.Записать();
	Данные = Base64Строка(Новый ДвоичныеДанные(ВременнаяПапкаВыгрузки+ИмяАрхива));
	
	ИмяАрхива = Лев(ФНС,СтрДлина(ИмяАрхива)-3) + "zip";
	
	Возврат Данные;
	
КонецФункции

&НаКлиенте
Функция ПодписатьВP7SИЗапаковать(ФНС,ВременнаяПапкаВыгрузки)
	
	ФНСПодпись = Лев(ФНС,СтрДлина(ФНС)-3)+"p7s";//Подписант_ОбластьПолномочий+"_"+
	ПодписатьФайл(ВременнаяПапкаВыгрузки+ФНС,ВременнаяПапкаВыгрузки+ФНСПодпись, "p7s");
	
	ИмяАрхива = Лев(ФНС,СтрДлина(ФНС)-3)+"zip";
	ФайлАрхива = Новый ЗаписьZipФайла(ВременнаяПапкаВыгрузки+ИмяАрхива, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
	ФайлАрхива.Добавить(ВременнаяПапкаВыгрузки+ФНС);
	ФайлАрхива.Добавить(ВременнаяПапкаВыгрузки+ФНСПодпись);
	//ФайлАрхива.Добавить(ВременнаяПапкаВыгрузки+ФНСПодпись2);
	ФайлАрхива.Записать();
	Данные = Base64Строка(Новый ДвоичныеДанные(ВременнаяПапкаВыгрузки+ИмяАрхива));
	
	ИмяАрхива = Лев(ФНС,СтрДлина(ИмяАрхива)-3) + "zip";
	
	Возврат Данные;
	
КонецФункции

&НаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",Знач ПропускатьПустыеСтроки = Неопределено)

    Результат = Новый Массив;
     
    Если ПропускатьПустыеСтроки = Неопределено Тогда
		
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		
		Если ПустаяСтрока(Строка) Тогда 
			
			Если Разделитель = " " Тогда
                Результат.Добавить("");
            КонецЕсли;
			
			Возврат Результат;
			
		КонецЕсли;
		
    КонецЕсли;
 
    Позиция = Найти(Строка, Разделитель);
	
	Пока Позиция > 0 Цикл
		
		Подстрока = Лев(Строка, Позиция - 1);
		
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
            Результат.Добавить(Подстрока);
        КонецЕсли;
		
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
        Позиция = Найти(Строка, Разделитель);
		
    КонецЦикла;
 
    Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
        Результат.Добавить(Строка);
    КонецЕсли;
 
    Возврат Результат;
 
КонецФункции

Функция ВыгрузитьTORG12_SELLER(Документ,УИДДокумента, СТруктураДанныхДляВыгрузки)//DP_OTORG12
	
	Если Ложь Тогда
		Документ = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ИдОтпр = СТруктураДанныхДляВыгрузки.ИдОтпр;
	
	Если Не ЗначениеЗаполнено(ИдОтпр) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //ИдОтпр"); КонецЕсли; 
	
	ИдПок = СТруктураДанныхДляВыгрузки.ИдПок;
	
	Если Не ЗначениеЗаполнено(ИдПок) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //ИдПок"); КонецЕсли;
	
	ИдФайл = "DP_OTORG12_"+ИдПок+"_"+ИдОтпр+"_"+Формат(ТекущаяДата(),"ДФ=ггггММдд")+"_"+УИДДокумента;
	
	ДатаДок = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	ВремДок = Формат(ТекущаяДата(),"ДФ=ЧЧ.мм.сс");
	
	Подписант_Должн = Объект.Должность;
	Подписант_Фамилия = Объект.Фамилия;//Сведения о лице, подписывающем документ в электронном виде
	Подписант_Имя = Объект.Имя;
	Подписант_Отчество = Объект.Отчество;
	Подписант_ИННЮЛ = Документ.Организация.ИНН;
	
	Buyer_ILN = СТруктураДанныхДляВыгрузки.Buyer_ILN;
	
	Если Не ЗначениеЗаполнено(Buyer_ILN) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные GLN покупателя"); КонецЕсли; 
	
	Seller_ILN = СТруктураДанныхДляВыгрузки.Seller_ILN;
	
	Если Не ЗначениеЗаполнено(Seller_ILN) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные GLN продавца"); КонецЕсли; 
	
	DeliveryPoint_ILN = СТруктураДанныхДляВыгрузки.DeliveryPoint_ILN;
	
	Если Не ЗначениеЗаполнено(DeliveryPoint_ILN) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные GLN точки доставки"); КонецЕсли; 
	
	Попытка
		
		ИННЮЛ_ГрузПолуч = Документ.Грузополучатель.ИНН;
		КПП_ГрузПолуч = Документ.Грузополучатель.КПП;
		НаимОрг_ГрузПолуч = Документ.Грузополучатель.НаименованиеПолное;
		
	Исключение
	КонецПопытки; 
	
	Попытка
		
		ИННЮЛ_Поставщик = Документ.Организация.ИНН;
		КПП_Поставщик = Документ.Организация.КПП;
		НаимОрг_Поставщик = Документ.Организация.НаименованиеПолное;
		
	Исключение
	КонецПопытки;
	
	Попытка
		
		ИННЮЛ_Плательщик = Документ.Контрагент.ИНН;
		КПП_Плательщик = Документ.Контрагент.КПП;
		НаимОрг_Плательщик = Документ.Контрагент.НаименованиеПолное;
		
	Исключение
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ИННЮЛ_Плательщик) или Не ЗначениеЗаполнено(КПП_Плательщик) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные ИНН и КПП покупателя"); КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаимОрг_Плательщик) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные нименования организации покупателя"); КонецЕсли;
	
	
	Попытка
		
		НомОсн = СТруктураДанныхДляВыгрузки.НомерИДатаЗаказа.Номер;
		ДатаОсн = ПреобразоватьСтрокуВДату(СТруктураДанныхДляВыгрузки.НомерИДатаЗаказа.Дата);
		
		Если ЗначениеЗаполнено(ДатаОсн) Тогда
			ДатаОсн = Формат(ДатаОсн,"ДФ=dd.MM.yyyy");
		КонецЕсли; 
		
	Исключение
	КонецПопытки;
	
	НомТН = Документ.Номер;
	ДатаТН = Формат(Документ.Дата,"ДФ=dd.MM.yyyy");
	
	КолМестВс = Документ.Товары.Итог("КоличествоУпаковок");	
	НеттоВс = Документ.Товары.Итог("Количество");
	
	Попытка
		ЦенаВключаетНДС = Документ.ЦенаВключаетНДС;
	Исключение
		ЦенаВключаетНДС = Документ.СуммаВключаетНДС;
	КонецПопытки;
	
	СумНДСВс = Документ.Товары.Итог("СуммаНДС");
	
	Если ЦенаВключаетНДС Тогда
		
		СумБезНДСВс = Документ.Товары.Итог("Сумма")-СумНДСВс;//260000.3100
		СумУчНДСВс = Документ.Товары.Итог("Сумма");//8339.2600
		
	Иначе
		
		СумБезНДСВс = Документ.Товары.Итог("Сумма");//260000.3100
		СумУчНДСВс = Документ.Товары.Итог("Сумма")+СумНДСВс;//8339.2600
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
		ЗаписьXML.ЗаписатьАтрибут("ИдФайл",ИдФайл);		
		ЗаписьXML.ЗаписатьАтрибут("ВерсФорм","5.01");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвУчДокОбор");
			ЗаписьXML.ЗаписатьАтрибут("ИдОтпр",ИдОтпр);
			ЗаписьXML.ЗаписатьАтрибут("ИдПок",ИдПок);
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвОЭДОтпр");
				ЗаписьXML.ЗаписатьАтрибут("НаимОрг","ООО Эдисофт");
				ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ","7801471082");
				ЗаписьXML.ЗаписатьАтрибут("ИдЭДО","2IJ");
			ЗаписьXML.ЗаписатьКонецЭлемента();//СвОЭДОтпр
			
		ЗаписьXML.ЗаписатьКонецЭлемента();//СвУчДокОбор
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
			ЗаписьXML.ЗаписатьАтрибут("КНД","1175004");
			ЗаписьXML.ЗаписатьАтрибут("ДатаДок",ДатаДок);
			ЗаписьXML.ЗаписатьАтрибут("ВремДок",ВремДок);
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("СвТНО");
				ЗаписьXML.ЗаписатьАтрибут("НаимПервДок","Товарная накладная");
				ЗаписьXML.ЗаписатьАтрибут("ОКУДПервДок","0330212");
				ЗаписьXML.ЗаписатьАтрибут("НомФорм","ТОРГ-12");
							
				Если ЗначениеЗаполнено(ИННЮЛ_ГрузПолуч+КПП_ГрузПолуч+НаимОрг_ГрузПолуч) Тогда
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("ГрузПолуч");
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИдСв");
							ЗаписьXML.ЗаписатьНачалоЭлемента("СвЮЛ");
							
								Если ЗначениеЗаполнено(ИННЮЛ_ГрузПолуч) Тогда ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",ИННЮЛ_ГрузПолуч); КонецЕсли;
								
								Если ЗначениеЗаполнено(КПП_ГрузПолуч) Тогда ЗаписьXML.ЗаписатьАтрибут("КПП",КПП_ГрузПолуч); КонецЕсли;
								
								Если ЗначениеЗаполнено(НаимОрг_ГрузПолуч) Тогда ЗаписьXML.ЗаписатьАтрибут("НаимОрг",НаимОрг_ГрузПолуч); КонецЕсли;								
								
							ЗаписьXML.ЗаписатьКонецЭлемента();//СвЮЛ
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИдСв									
					ЗаписьXML.ЗаписатьКонецЭлемента();//ГрузПолуч
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИННЮЛ_Поставщик+КПП_Поставщик+НаимОрг_Поставщик) Тогда
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("Поставщик");
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИдСв");
							ЗаписьXML.ЗаписатьНачалоЭлемента("СвЮЛ");
							
								Если ЗначениеЗаполнено(ИННЮЛ_Поставщик) Тогда ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",ИННЮЛ_Поставщик); КонецЕсли;
								
								Если ЗначениеЗаполнено(КПП_Поставщик) Тогда ЗаписьXML.ЗаписатьАтрибут("КПП",КПП_Поставщик); КонецЕсли;
								
								Если ЗначениеЗаполнено(НаимОрг_Поставщик) Тогда ЗаписьXML.ЗаписатьАтрибут("НаимОрг",НаимОрг_Поставщик); КонецЕсли;
							
							ЗаписьXML.ЗаписатьКонецЭлемента();//СвЮЛ
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИдСв
					
					ЗаписьXML.ЗаписатьКонецЭлемента();//Поставщик
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИННЮЛ_Плательщик+КПП_Плательщик+НаимОрг_Плательщик) Тогда
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("Плательщик");
						ЗаписьXML.ЗаписатьНачалоЭлемента("ИдСв");
							ЗаписьXML.ЗаписатьНачалоЭлемента("СвЮЛ");
							
								Если ЗначениеЗаполнено(ИННЮЛ_Плательщик) Тогда ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",ИННЮЛ_Плательщик); КонецЕсли;
								
								Если ЗначениеЗаполнено(КПП_Плательщик) Тогда ЗаписьXML.ЗаписатьАтрибут("КПП",КПП_Плательщик); КонецЕсли;
								
								Если ЗначениеЗаполнено(НаимОрг_Плательщик) Тогда ЗаписьXML.ЗаписатьАтрибут("НаимОрг",НаимОрг_Плательщик); КонецЕсли;
								
							ЗаписьXML.ЗаписатьКонецЭлемента();//СвЮЛ
						ЗаписьXML.ЗаписатьКонецЭлемента();//ИдСв						
					ЗаписьXML.ЗаписатьКонецЭлемента();//Плательщик
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(""+НомОсн+ДатаОсн) Тогда
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("Основание");
						ЗаписьXML.ЗаписатьАтрибут("НаимОсн","Заказ");
						
						Если ЗначениеЗаполнено(НомОсн) Тогда ЗаписьXML.ЗаписатьАтрибут("НомОсн",НомОсн); КонецЕсли;
						
						Если ЗначениеЗаполнено(ДатаОсн) Тогда ЗаписьXML.ЗаписатьАтрибут("ДатаОсн",ДатаОсн); КонецЕсли;
						
					ЗаписьXML.ЗаписатьКонецЭлемента();//Основание
					
				КонецЕсли;
								
				ЗаписьXML.ЗаписатьНачалоЭлемента("ТН");
					ЗаписьXML.ЗаписатьАтрибут("НомТН",НомТН);
					ЗаписьXML.ЗаписатьАтрибут("ДатаТН",ДатаТН);
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("Таблица");
						
						Для Сч=0 По СТруктураДанныхДляВыгрузки.СписокНоменклатур.Количество()-1 Цикл
							
							Ключ = "Строка" + Строка(Сч);
							СтрокаСчета = СТруктураДанныхДляВыгрузки.СписокНоменклатур[Ключ];
							НомСтр = СтрокаСчета.LineNumber;
							НаимТов = СтрокаСчета.Номенклатура.Наименование; 
							
							Попытка
								ОКЕИ_Тов = СтрокаСчета.Номенклатура.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код;
							Исключение
								ОКЕИ_Тов = СтрокаСчета.Номенклатура.ЕдиницаИзмерения.Код;
							КонецПопытки; 
							                  
							КолТов = Формат(СтрокаСчета.КоличествоВДокументе,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0"); 
								
							СтавкаНдс = СтрокаСчета.СтавкаНдс;
							НаимЕдИзм = СтрокаСчета.НаимЕдИзм;
							
							Если Не ЗначениеЗаполнено(НаимЕдИзм) Тогда
								НаимЕдИзм = СтрокаСчета.Номенклатура.ЕдиницаИзмерения.Наименование;
							КонецЕсли;
							
							Нетто = КолТов;
							ЦенаТов = Формат(СтрокаСчета.ЦенаБезНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
							СтТовБезНДС = Формат(СтрокаСчета.СуммаБезНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
							СтТовУчНал = Формат(СтрокаСчета.СуммаСНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");
							НалСтВел = Формат(СтрокаСчета.СтавкаНДС,"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0");
							СумНДС = Формат(СтрокаСчета.СуммаСНДС - СтрокаСчета.СуммаБезНДС,"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0");													
								
							КодНоменклатурыПокупателя = СтрокаСчета.КодНоменклатурыПокупателя;
							
							ЗаписьXML.ЗаписатьНачалоЭлемента("СвТов");
								ЗаписьXML.ЗаписатьАтрибут("НомТов",Формат(НомСтр,"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0"));
								ЗаписьXML.ЗаписатьАтрибут("НаимТов",НаимТов);
								ЗаписьXML.ЗаписатьАтрибут("КодТов",КодНоменклатурыПокупателя);
								ЗаписьXML.ЗаписатьАтрибут("НаимЕдИзм",НаимЕдИзм);//!
								ЗаписьXML.ЗаписатьАтрибут("ОКЕИ_Тов",СокрЛП(ОКЕИ_Тов));
								ЗаписьXML.ЗаписатьАтрибут("Нетто",Формат(Нетто,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0"));//!
								
								Если ЗначениеЗаполнено(ЦенаТов) Тогда ЗаписьXML.ЗаписатьАтрибут("Цена",Формат(Число(ЦенаТов),"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"));КонецЕсли; 
								
								ЗаписьXML.ЗаписатьАтрибут("СумБезНДС",Формат(Число(СтТовБезНДС),"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"));
								ЗаписьXML.ЗаписатьАтрибут("СтавкаНДС",Формат(СтавкаНДС,"ЧДЦ=0; ЧН=0; ЧРД=.; ЧГ=0"));
								ЗаписьXML.ЗаписатьАтрибут("СумНДС",Формат(Число(СумНДС),"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"));//!
								ЗаписьXML.ЗаписатьАтрибут("СумУчНДС",Формат(Число(СтТовУчНал),"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"));								
							ЗаписьXML.ЗаписатьКонецЭлемента();//СвТов
							
						КонецЦикла; 
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("ВсегоНакл");
							ЗаписьXML.ЗаписатьАтрибут("НеттоВс",Формат(НеттоВс,"ЧДЦ=3; ЧН=0.000; ЧРД=.; ЧГ=0"));
							ЗаписьXML.ЗаписатьАтрибут("СумБезНДСВс",Формат(Число(СумБезНДСВс),"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"));
							ЗаписьXML.ЗаписатьАтрибут("СумНДСВс",Формат(Число(СумНДСВс),"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"));
							ЗаписьXML.ЗаписатьАтрибут("СумУчНДСВс",Формат(Число(СумУчНДСВс),"ЧДЦ=2; ЧН=0.00; ЧРД=.; ЧГ=0"));
						ЗаписьXML.ЗаписатьКонецЭлемента();//ВсегоНакл
					ЗаписьXML.ЗаписатьКонецЭлемента();//Таблица
					
				ЗаписьXML.ЗаписатьКонецЭлемента();//ТН
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("ИнфПол");
					ЗаписьXML.ЗаписатьАтрибут("ТекстИнф","отправитель:"+Seller_ILN+";получатель:"+Buyer_ILN+";грузополучатель:"+DeliveryPoint_ILN+";");
				ЗаписьXML.ЗаписатьКонецЭлемента();//ИнфПол
			ЗаписьXML.ЗаписатьКонецЭлемента();//СвТНО
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Подписант");
				ЗаписьXML.ЗаписатьНачалоЭлемента("ЮЛ");
					ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Подписант_ИННЮЛ);
					ЗаписьXML.ЗаписатьАтрибут("Должн",Подписант_Должн);
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
						ЗаписьXML.ЗаписатьАтрибут("Фамилия",Подписант_Фамилия);
						ЗаписьXML.ЗаписатьАтрибут("Имя",Подписант_Имя);
						ЗаписьXML.ЗаписатьАтрибут("Отчество",Подписант_Отчество);
					ЗаписьXML.ЗаписатьКонецЭлемента();//ФИО
				ЗаписьXML.ЗаписатьКонецЭлемента();//ЮЛ
			ЗаписьXML.ЗаписатьКонецЭлемента();//Подписант
		ЗаписьXML.ЗаписатьКонецЭлемента();//Документ
	ЗаписьXML.ЗаписатьКонецЭлемента();//Файл
	
	Если Ложь Тогда
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
		ЗаписьXML.ЗаписатьКонецЭлемента();//Файл
		ЗаписатьXML(ЗаписьXML,"Значение","Тег");
		ЗаписьXML.ЗаписатьАтрибут("Тег","Значение");
		
	КонецЕсли; 
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

Функция ВыгрузитьTORG12_BUYER(Документ,УИДДокумента)//DP_PTORG12
	//Если Ложь Тогда
	//	Документ = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	//КонецЕсли;
	//ЗаписьXML = Новый ЗаписьXML;
	//ЗаписьXML.УстановитьСтроку("windows-1251");
	//ЗаписьXML.ЗаписатьОбъявлениеXML();
	//
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//|	EDISoft_СтатусыДокументов.ИмяОригинальногоФНС,
	//|	EDISoft_СтатусыДокументов.ВремяСоздания
	//|ИЗ
	//|	РегистрСведений.EDISoft_СтатусыДокументов КАК EDISoft_СтатусыДокументов
	//|ГДЕ
	//|	EDISoft_СтатусыДокументов.Объект = &Документ
	//|	И EDISoft_СтатусыДокументов.НомерСтатуса = ""002""");
	//Запрос.УстановитьПараметр("Документ",Документ);
	//РезультатЗапроса = Запрос.Выполнить().Выбрать();
	//Если РезультатЗапроса.Следующий() Тогда
	//	//ФайлZIP = Новый Файл(ПолучитьИмяВременногоФайла("zip"));
	//	//Base64Значение(РезультатЗапроса.АрхивСтатусовBase64).Записать(ФайлZIP.ПолноеИмя);
	//	ИмяПостФайла = РезультатЗапроса.ИмяОригинальногоФНС;
	//	ВремяСоздания = РезультатЗапроса.ВремяСоздания;
	//Иначе
	//	ВызватьИсключение("Не найден титул продавца товарной накладной для "+Документ.Ссылка);
	//КонецЕсли;
	//
	//ИдОтпр = ПолучитьFNSidОрганизации(Документ);
	//Если Не ЗначениеЗаполнено(ИдОтпр) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //ИдОтпр"); КонецЕсли; 
	//ИдПок = ПолучитьFNSidКонтрагента(Документ);
	//Если Не ЗначениеЗаполнено(ИдПок) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //ИдПок"); КонецЕсли;
	//ИдФайл = "DP_PTORG12_"+ИдОтпр+"_"+ИдПок+"_"+Формат(ТекущаяДата(),"ДФ=ггггММдд")+"_"+УИДДокумента;
	//
	//ДатаДок = Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy");
	//ВремДок = Формат(ТекущаяДата(),"ДФ=ЧЧ.мм.сс");
	//
	//ДатаПолуч = Формат(Документ.Дата,"ДФ=dd.MM.yyyy");
	//
	//ДатаДокТН = Формат(ВремяСоздания,"ДФ=dd.MM.yyyy");
	//ВремДокТН = Формат(ВремяСоздания,"ДФ=ЧЧ.мм.сс");
	//
	//Попытка НомТН = ПолучитьЗначениеСвойстваОбъекта("EDISoft_НомерВходящего",Документ.Ссылка); Исключение НомТН = Неопределено; КонецПопытки;
	//Если Не ЗначениеЗаполнено(НомТН) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //НомТН"); КонецЕсли; 
	//
	//Попытка ДатаТН = Формат(ПолучитьЗначениеСвойстваОбъекта("EDISoft_ДатаВходящего",Документ.Ссылка),"ДФ=dd.MM.yyyy"); Исключение ДатаТН = Неопределено; КонецПопытки; 
	//Если Не ЗначениеЗаполнено(ДатаТН) Тогда ВызватьИсключение("Ошибка в "+Документ+" Не удалось получить данные для тега //ДатаТН"); КонецЕсли;  
	//
	//
	//Подписант_Должн = Должность;
	//Подписант_Фамилия = Фамилия;//Сведения о лице, подписывающем документ в электронном виде
	//Подписант_Имя = Имя;
	//Подписант_Отчество = Отчество;
	//Подписант_ИННЮЛ = Документ.Организация.ИНН;
	//
	//ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
	//	ЗаписьXML.ЗаписатьАтрибут("ИдФайл",ИдФайл);
	//	//ЗаписьXML.ЗаписатьАтрибут("ВерсПрог","1.0");
	//	ЗаписьXML.ЗаписатьАтрибут("ВерсФорм","5.01");
	//	
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("СвУчДокОбор");
	//		ЗаписьXML.ЗаписатьАтрибут("ИдОтпр",ИдОтпр);
	//		ЗаписьXML.ЗаписатьАтрибут("ИдПок",ИдПок);
	//		
	//		ЗаписьXML.ЗаписатьНачалоЭлемента("СвОЭДОтпр");
	//			ЗаписьXML.ЗаписатьАтрибут("НаимОрг","ООО Эдисофт");
	//			ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ","7801471082");
	//			ЗаписьXML.ЗаписатьАтрибут("ИдЭДО","2IJ");
	//		ЗаписьXML.ЗаписатьКонецЭлемента();//СвОЭДОтпр
	//	ЗаписьXML.ЗаписатьКонецЭлемента();//СвУчДокОбор
	//	
	//	ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
	//		ЗаписьXML.ЗаписатьАтрибут("КНД","1175005");
	//		ЗаписьXML.ЗаписатьАтрибут("ДатаДок",ДатаДок);
	//		ЗаписьXML.ЗаписатьАтрибут("ВремДок",ВремДок);
	//		
	//		ЗаписьXML.ЗаписатьНачалоЭлемента("ИдТНО");
	//			ЗаписьXML.ЗаписатьАтрибут("ИдФайлТН",ИмяПостФайла);
	//			ЗаписьXML.ЗаписатьАтрибут("ДатаДокТН",ДатаДокТН);
	//			ЗаписьXML.ЗаписатьАтрибут("ВремДокТН",ВремДокТН);
	//		ЗаписьXML.ЗаписатьКонецЭлемента();//ИдТНО
	//		
	//		ЗаписьXML.ЗаписатьНачалоЭлемента("СвТНП");
	//			ЗаписьXML.ЗаписатьАтрибут("НаимПервДок","Товарная накладная");
	//			ЗаписьXML.ЗаписатьАтрибут("ОКУДПервДок","0330212");
	//			ЗаписьXML.ЗаписатьАтрибут("НомФорм","ТОРГ-12");
	//			ЗаписьXML.ЗаписатьАтрибут("НомТН",НомТН);
	//			ЗаписьXML.ЗаписатьАтрибут("ДатаТН",ДатаТН);
	//			
	//			ЗаписьXML.ЗаписатьНачалоЭлемента("ПолучилГруз");
	//				ЗаписьXML.ЗаписатьАтрибут("ДатаПолуч",ДатаПолуч);
	//			ЗаписьXML.ЗаписатьКонецЭлемента();//ПолучилГруз
	//			
	//		ЗаписьXML.ЗаписатьКонецЭлемента();//СвТНП
	//		
	//		ЗаписьXML.ЗаписатьНачалоЭлемента("Подписант");
	//			ЗаписьXML.ЗаписатьНачалоЭлемента("ЮЛ");
	//				ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ",Подписант_ИННЮЛ);
	//				ЗаписьXML.ЗаписатьАтрибут("Должн",Подписант_Должн);
	//				
	//				ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
	//					ЗаписьXML.ЗаписатьАтрибут("Фамилия",Подписант_Фамилия);
	//					ЗаписьXML.ЗаписатьАтрибут("Имя",Подписант_Имя);
	//					ЗаписьXML.ЗаписатьАтрибут("Отчество",Подписант_Отчество);
	//				ЗаписьXML.ЗаписатьКонецЭлемента();//ФИО
	//			ЗаписьXML.ЗаписатьКонецЭлемента();//ЮЛ
	//		ЗаписьXML.ЗаписатьКонецЭлемента();//Подписант
	//	ЗаписьXML.ЗаписатьКонецЭлемента();//Документ
	//ЗаписьXML.ЗаписатьКонецЭлемента();//Файл
	//	
	//Возврат ЗаписьXML.Закрыть();
КонецФункции

Функция ПолучитьСтруктуруАдреса(АдресДоставки)
	Возврат УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(АдресДоставки);//Город//Дом//Индекс//Квартира//Корпус//НаселенныйПункт//Район//Регион//Страна//ТипДома//ТипКвартиры//ТипКорпуса//Улица
КонецФункции

Функция ПолучитьСрезДанныхНДС(Реализация, ЦенаВключаетНДС)
	СтруктураВозврата = Новый Структура;
	ТаблицаСрезаНДС = Новый ТаблицаЗначений;
	ТаблицаСрезаНДС.Колонки.Добавить("СтавкаНДС");
	ТаблицаСрезаНДС.Колонки.Добавить("СуммаОблагаемаяНДС");
	ТаблицаСрезаНДС.Колонки.Добавить("СуммаНДС");
	
	Для каждого СтрокаТаблицы Из Реализация.Товары Цикл
		СтавкаНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
		СтрокаТаблицыСрезаНДС = ТаблицаСрезаНДС.Найти(СтавкаНДС,"СтавкаНДС");
		Если Не ЗначениеЗаполнено(СтрокаТаблицыСрезаНДС) Тогда
			СтрокаТаблицыСрезаНДС = ТаблицаСрезаНДС.Добавить();
			СтрокаТаблицыСрезаНДС.СтавкаНДС = СтавкаНДС;
			СтрокаТаблицыСрезаНДС.СуммаОблагаемаяНДС = 0;
			СтрокаТаблицыСрезаНДС.СуммаНДС = 0;
		КонецЕсли; 
			
		ЦенаБезНДС = ?(ЦенаВключаетНДС,СтрокаТаблицы.Цена/(1+СтавкаНДС/100),СтрокаТаблицы.Цена);
		ЦенаСНДС = ?(ЦенаВключаетНДС,СтрокаТаблицы.Цена,СтрокаТаблицы.Цена*(1+СтавкаНДС/100));
		СуммаБезНДС = ЦенаБезНДС * СтрокаТаблицы.Количество;
		СуммаСНДС = ЦенаСНДС * СтрокаТаблицы.Количество;
		СуммаНДС = СуммаСНДС - СуммаБезНДС;
			
		СтрокаТаблицыСрезаНДС.СуммаОблагаемаяНДС = СтрокаТаблицыСрезаНДС.СуммаОблагаемаяНДС+СуммаБезНДС;
		СтрокаТаблицыСрезаНДС.СуммаНДС = СтрокаТаблицыСрезаНДС.СуммаНДС+СуммаНДС;
	КонецЦикла;
	Сч = 0;
	Для каждого СтрокаСреза Из ТаблицаСрезаНДС Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("СтавкаНДС", СтрокаСреза.СтавкаНДС);
		СтруктураСтроки.Вставить("СуммаОблагаемаяНДС", СтрокаСреза.СуммаОблагаемаяНДС);
		СтруктураСтроки.Вставить("СуммаНДС", СтрокаСреза.СуммаНДС);
		СтруктураВозврата.Вставить("Строка" + Строка(сч),СтруктураСтроки);
		Сч = Сч + 1;		
	КонецЦикла;
	Возврат СтруктураВозврата;
КонецФункции

Функция СформироватьСхему(Схема)
 ТабДок = новый ТабличныйДокумент;
 Структура = РеквизитФормыВЗначение("Объект").ПолучитьМакет(Схема); 
 ТабДок.Вывести(Структура);
 //Структура.Вывести(ТабДок);  
 СтрСхема = "";
 Для Стр = 1 По ТабДок.ВысотаТаблицы Цикл        
  Если (ТабДок.Область(Стр, 1).Текст) = "" Тогда
   Продолжить;
  КонецЕсли;
  ТекСтрока = "";
  ТекСтрока = СокрЛП(ТабДок.Область(Стр, 1).Текст) +  ";" + 
  СокрЛП(ТабДок.Область(Стр, 2).Текст) +  ";"  + 
  СокрЛП(ТабДок.Область(Стр, 3).Текст) +  ";"  + 
  СокрЛП(ТабДок.Область(Стр, 4).Текст) +  ";"  + 
  СокрЛП(ТабДок.Область(Стр, 5).Текст);
  СтрСхема = СтрСхема + СокрЛП(ТекСтрока) + Символ(13);
 КонецЦикла;  
 Возврат СтрСхема; 
КонецФункции

&НаСервереБезКонтекста
Функция Из_10_В_Любую(Знач Значение=0,Нотация=36) Экспорт
	Если Нотация<=0 Тогда Возврат("") КонецЕсли;
	Значение=Число(Значение);
	Если Значение<=0 Тогда Возврат("0") КонецЕсли;
	Значение=Цел(Значение);
	Результат="";
	Пока Значение>0 Цикл
		Результат=Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",Значение%Нотация+1,1)+Результат;
		Значение=Цел(Значение/Нотация) ;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция Разложить(Знач Стр, Разделитель = ",") Экспорт
	СЗ = Новый СписокЗначений;
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				СЗ.Добавить(Стр);
				Возврат СЗ;
			КонецЕсли;
			СЗ.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				СЗ.Добавить(Стр);
				Возврат СЗ;
			КонецЕсли;
			СЗ.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуВДату(Значение) Экспорт 
	
	ВыхДата = Дата(1,1,1);
	Раз = Разложить(Значение, "T");
	Если Раз.Количество() > 1 тогда
		Два = Разложить(СокрЛП(Раз[0]),"-");
		Если Два.Количество()>1 тогда
			Попытка
				ВыхДата = Дата(Число(СокрЛП(Два[0])), Число(СокрЛП(Два[1])), Число(СокрЛП(Два[2])));
			исключение					
			КонецПопытки;
		иначе  Возврат ВыхДата;
		КонецЕсли;
		Два = Разложить(СокрЛП(Раз[1]),":");
		Если Два.Количество()>1 тогда
			Попытка
				ВыхДата = ВыхДата + (Число(СокрЛП(Два[0])) * 3600 + Число(СокрЛП(Два[1])) * 60 + Число(СокрЛП(Два[2])));
			исключение
			КонецПопытки;
		КонецЕсли;
	иначе
		Два = Разложить(СокрЛП(Раз[0]),"-");
		Если Два.Количество()>1 тогда
			Попытка
				ВыхДата = Дата(Число(СокрЛП(Два[0])), Число(СокрЛП(Два[1])), Число(СокрЛП(Два[2])));
			исключение
			КонецПопытки;
		иначе  Возврат ВыхДата;
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат ВыхДата;
КонецФункции

Функция ПолучитьДанныеГП(Грузополучатель)
	Структура = Новый Структура;
	Структура.Вставить("Наименование",Грузополучатель.Наименование);
	СТрокаАдреса = Грузополучатель.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес доставки"));//сделать настраиваемым
	ЗначенияПолей = РазложитьАдрес(СТрокаАдреса.ЗначенияПолей);
	Структура.Вставить("УлицаДом", ЗначенияПолей.Улица + ЗначенияПолей.Дом);
	Структура.Вставить("Город",ЗначенияПолей.Город);
	Структура.Вставить("Индекс",ЗначенияПолей.Индекс);
КонецФункции

Функция ПолучитьДанныеГрузоотправителя(Грузоотправитель)
	Структура = Новый Структура;
	Структура.Вставить("Наименование",Грузоотправитель.Наименование);
	СТрокаАдреса = Грузоотправитель.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);//.НайтиПоНаименованию("Адрес доставки","Вид");//сделать настраиваемым
	ЗначенияПолей = РазложитьАдрес(СТрокаАдреса.ЗначенияПолей);
	Структура.Вставить("УлицаДом", ЗначенияПолей.Улица + ЗначенияПолей.Дом);
	Структура.Вставить("Город",ЗначенияПолей.Город);
	Структура.Вставить("Индекс",ЗначенияПолей.Индекс);
КонецФункции

Функция РазложитьАдрес(ЗначенияПолей)
	Адрес = Новый Структура;
	
	Тег ="СубъектРФ";
	Если Найти(ЗначенияПолей,"<"+Тег+">")>0 тогда
		Поз1=Найти(ЗначенияПолей,"<"+Тег+">");
		Поз2=Найти(ЗначенияПолей,"</"+Тег+">");
		Начало = Поз1+СтрДлина(Тег)+2;
		Адрес.Вставить(Тег, Сред(ЗначенияПолей, Начало,Поз2 - Начало));
	КонецЕслИ;

	Тег ="ВнутригРайон";
	Если Найти(ЗначенияПолей,"<"+Тег+">")>0 тогда
		Поз1=Найти(ЗначенияПолей,"<"+Тег+">");
		Поз2=Найти(ЗначенияПолей,"</"+Тег+">");
		Начало = Поз1+СтрДлина(Тег)+2;
		Адрес.Вставить(Тег, Сред(ЗначенияПолей, Начало,Поз2 - Начало));
	КонецЕслИ;

	
	Тег ="НаселПункт";
	Если Найти(ЗначенияПолей,"<"+Тег+">")>0 тогда
		Поз1=Найти(ЗначенияПолей,"<"+Тег+">");
		Поз2=Найти(ЗначенияПолей,"</"+Тег+">");
		Начало = Поз1+СтрДлина(Тег)+2;
		Адрес.Вставить(Тег, Сред(ЗначенияПолей, Начало,Поз2 - Начало));
	КонецЕслИ;
	
	Тег ="Город";
	Если Найти(ЗначенияПолей,"<"+Тег+">")>0 тогда
		Поз1=Найти(ЗначенияПолей,"<"+Тег+">");
		Поз2=Найти(ЗначенияПолей,"</"+Тег+">");
		Начало = Поз1+СтрДлина(Тег)+2;
		Адрес.Вставить(Тег, Сред(ЗначенияПолей, Начало,Поз2 - Начало));
	КонецЕслИ;
	
	
	Тег ="Улица";
	Если Найти(ЗначенияПолей,"<"+Тег+">")>0 тогда
		Поз1=Найти(ЗначенияПолей,"<"+Тег+">");
		Поз2=Найти(ЗначенияПолей,"</"+Тег+">");
		Начало = Поз1+СтрДлина(Тег)+2;
		Адрес.Вставить(Тег, Сред(ЗначенияПолей, Начало,Поз2 - Начало));
	КонецЕслИ;
	
	
	Тег="<Номер Тип=""1010"" Значение=";   // дом
	Если Найти(ЗначенияПолей,Тег)>0 тогда
		Поз1=Найти(ЗначенияПолей,Тег);
		Остаток= Сред(ЗначенияПолей,Поз1);
		Поз2=Найти(Остаток,"/><");
		Начало = СтрДлина(Тег)+1;
		Адрес.Вставить("Дом", СтрЗаменить(Сред(Остаток, Начало,Поз2 - Начало),"""",""));
	КонецЕслИ;
	
	Тег="<Номер Тип=""2010"" Значение=";   // квартира
	Если Найти(ЗначенияПолей,Тег)>0 тогда
		Поз1=Найти(ЗначенияПолей,Тег);
		Остаток= Сред(ЗначенияПолей,Поз1);
		Поз2=Найти(Остаток,"/><");
		Начало = СтрДлина(Тег)+1;
		Адрес.Вставить("Квартира", СтрЗаменить(Сред(Остаток, Начало,Поз2 - Начало),"""",""));
	КонецЕслИ;
	
	Тег="<Номер Тип=""1050"" Значение=";   // корпус
	Если Найти(ЗначенияПолей,Тег)>0 тогда
		Поз1=Найти(ЗначенияПолей,Тег);
		Остаток= Сред(ЗначенияПолей,Поз1);
		Поз2=Найти(Остаток,"/><");
		Начало = СтрДлина(Тег)+1;
		Адрес.Вставить("Корпус", СтрЗаменить(Сред(Остаток, Начало,Поз2 - Начало),"""",""));
	КонецЕслИ;
	
	Тег="<Номер Тип=""1080"" Значение=";   //литера
	Если Найти(ЗначенияПолей,Тег)>0 тогда
		Поз1=Найти(ЗначенияПолей,Тег);
		Остаток= Сред(ЗначенияПолей,Поз1);
		Поз2=Найти(Остаток,"/><");
		Начало = СтрДлина(Тег)+1;
		Адрес.Вставить("Литера", СтрЗаменить(Сред(Остаток, Начало,Поз2 - Начало),"""",""));
	КонецЕслИ;
	
	Тег="<Номер Тип=""1070"" Значение=";   //сооружение
	Если Найти(ЗначенияПолей,Тег)>0 тогда
		Поз1=Найти(ЗначенияПолей,Тег);
		Остаток= Сред(ЗначенияПолей,Поз1);
		Поз2=Найти(Остаток,"/><");
		Начало = СтрДлина(Тег)+1;
		Адрес.Вставить("Сооружение", СтрЗаменить(Сред(Остаток, Начало,Поз2 - Начало),"""",""));
	КонецЕслИ;

	Тег="<Номер Тип=""1060"" Значение=";   //строение
	Если Найти(ЗначенияПолей,Тег)>0 тогда
		Поз1=Найти(ЗначенияПолей,Тег);
		Остаток= Сред(ЗначенияПолей,Поз1);
		Поз2=Найти(Остаток,"/><");
		Начало = СтрДлина(Тег)+1;
		Адрес.Вставить("Строение", СтрЗаменить(Сред(Остаток, Начало,Поз2 - Начало),"""",""));
	КонецЕслИ;
	
	Тег="<Номер Тип=""1040"" Значение=";   //участок
	Если Найти(ЗначенияПолей,Тег)>0 тогда
		Поз1=Найти(ЗначенияПолей,Тег);
		Остаток= Сред(ЗначенияПолей,Поз1);
		Поз2=Найти(Остаток,"/><");
		Начало = СтрДлина(Тег)+1;
		Адрес.Вставить("Участок", СтрЗаменить(Сред(Остаток, Начало,Поз2 - Начало),"""",""));
	КонецЕслИ;

	Тег="<Номер Тип=""2030"" Значение=";   //офис
	Если Найти(ЗначенияПолей,Тег)>0 тогда
		Поз1=Найти(ЗначенияПолей,Тег);
		Остаток= Сред(ЗначенияПолей,Поз1);
		Поз2=Найти(Остаток,"/><");
		Начало = СтрДлина(Тег)+1;
		Адрес.Вставить("Офис", СтрЗаменить(Сред(Остаток, Начало,Поз2 - Начало),"""",""));
	КонецЕслИ;

	Тег="<ДопАдрЭл ТипАдрЭл=""10100000"" Значение=";
	Если Найти(ЗначенияПолей,Тег)>0 тогда
		Поз1=Найти(ЗначенияПолей,Тег);
		Остаток= Сред(ЗначенияПолей,Поз1);
		Поз2=Найти(Остаток,"/>");
		Начало = СтрДлина(Тег)+1;
		Адрес.Вставить("Индекс", СтрЗаменить(Сред(Остаток, Начало,Поз2 - Начало),"""",""));
	КонецЕслИ;

	Возврат Адрес;
КонецФункции

Функция ПолучитьДанныеИзРеквизитаОбъекта(Объект,Путь) Экспорт
	ОбъектСсылка = Объект.Ссылка;
	Массив = Новый Массив;
	
	Номер = Найти(Путь,".");
	Если Номер = 0 Тогда
		Массив.Добавить(Путь);
	КонецЕсли; 
	
	Пока Номер <> 0 Цикл
		Массив.Добавить(Лев(Путь,Номер-1));
		Путь = Сред(Путь,Номер+1);
		Номер = Найти(Путь,".");
		Если Номер = 0 Тогда
			Массив.Добавить(Путь);
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого Реквизит Из Массив Цикл
		ОбъектСсылка = ОбъектСсылка[Реквизит];
	КонецЦикла;  
	
	Возврат ОбъектСсылка;
КонецФункции

Функция ПолучитьGLNКонтрагентаСервер(контрагент,Контрагент_Поле)
	Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Контрагенты."+ СокрЛП(Контрагент_Поле) +" КАК GLN
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	Контрагенты.Ссылка = &Контрагент";
		Запрос.УстановитьПараметр("Контрагент",Контрагент);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			GLN = Результат.GLN;
		КонецЕсли;
		Возврат Неопределено;

КонецФункции

Функция ПолучитьGLNТочкиДоставкиСервер(Грузополучатель)
	Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Партнеры."+СокрЛП(Объект.Партнер_Поле)+" КАК GLN
		               |ИЗ
		               |	Справочник.Партнеры КАК Партнеры
		               |ГДЕ
		               |	Партнеры.Ссылка = &Партнер";
		Запрос.УстановитьПараметр("Партнер", Грузополучатель);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Возврат Результат.GLN;
		КонецЕсли;
		Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеВСтрокуВнутрСервер(Значение)
	Возврат ЗначениеВСтрокуВнутр(Значение);
КонецФункции

Функция ПолучитьДанныеТНПоРеализации(Реализация)
	Структура = Новый Структура;
	Структура.Вставить("Номер","");
	Структура.Вставить("Дата","");
	Структура.Вставить("ТипАвто","");
	Структура.Вставить("ГосНомер","");
	Структура.Вставить("Грузоподъемность","");
	Структура.Вставить("Перевозчик","");
	запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТранспортнаяНакладная.Номер,
	               |	ТранспортнаяНакладная.Дата,
	               |	ТранспортнаяНакладная.АвтомобильТип КАК ТипАвто,
	               |	ТранспортнаяНакладная.АвтомобильГосударственныйНомер КАК ГосНомер,
	               |	ТранспортнаяНакладная.АвтомобильГрузоподъемностьВТоннах КАК Грузоподъемность,
	               |	ТранспортнаяНакладная.Перевозчик.Ссылка КАК Перевозчик
	               |ИЗ
	               |	Документ.ТранспортнаяНакладная КАК ТранспортнаяНакладная
	               |ГДЕ
	               |	ТранспортнаяНакладная.ДокументыОснования.ДокументОснование.Ссылка = &Реализация";
	Запрос.УстановитьПараметр("Реализация", Реализация);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		СТруктура.Номер = СокрЛП(Результат.Номер);
		СТруктура.Дата = Формат(Результат.Дата,"ДФ = гггг-ММ-дд");
		СТруктура.ТипАвто = СокрЛП(Результат.ТипАвто);
		Структура.ГосНомер = СокрЛП(Результат.ГосНомер);
		Структура.Грузоподъемность = Результат.Грузоподъемность;
		СТруктура.Перевозчик = Результат.Перевозчик;
	КонецЕсли;
	Возврат Структура;		
КонецФункции

Функция ПолучитьЛицензию(Организация, Партнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	алкЛицензии.Ссылка
	               |ИЗ
	               |	Справочник.алкЛицензии КАК алкЛицензии
	               |ГДЕ
	               |	алкЛицензии.Владелец.Ссылка = &Организация
	               |	И алкЛицензии.АХ_Партнер.Ссылка = &Партнер
	               |	И алкЛицензии.ДатаОкончанияСрокаДействия <= &ТекущаяДата";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		Сообщить("Не удалось найти действующую лицензию для организации " + Организация + " и партнера " + Партнер);
		Лицензия = Организация.алкОсновнаяЛицензия;
		Если ЗначениеЗаполнено(Лицензия) Тогда
			Возврат Лицензия;
		Иначе
			Сообщить ("Не удалось получить основную лицензию организации");
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
		
КонецФункции

Функция ПолучитьЕдиницуИзмерения(СтрокаТЧ)
	//ВФ(*)
	ЕдиницаИзмерения = Неопределено;
	Если Объект.Бухгалтерия Тогда
		НашОбъект=РеквизитФормыВЗначение("Объект");
		ЕдиницаИзмерения = НашОбъект.ПолучитьЗначениеСвойстваОбъекта("Edisoft_ЕдИзмерения", СтрокаТЧ.Номенклатура,Ложь);
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			Возврат ЕдиницаИзмерения.Наименование;
		КонецЕсли;
	КонецЕсли;
	//ВФ(**)		 
	Попытка
		КОдЕДиницы = СокрЛП(СтрокаТЧ.Упаковка.ЕДиницаИзмерения.Код);
	Исключение
		КОдЕДиницы = СокрЛП(СтрокаТЧ.Номенклатура.ЕдиницаИзмерения.Код);
	КонецПопытки;
	Если Не ЗначениеЗаполнено(КОдЕДиницы) Тогда
		КОдЕДиницы = СокрЛП(СтрокаТЧ.Номенклатура.ЕдиницаИзмерения.Код);
	КонецЕсли;
	//UnitOfMeasure = СокрЛП(СтрокаТЧ.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение);
	Наименование = СокрЛП(СтрокаТЧ.Номенклатура.ЕдиницаИзмерения.Наименование);
	Если Наименование = "шт" Тогда
		UnitOfMeasure = "PCE";
	ИначеЕсли Наименование = "кг" Тогда
		UnitOfMeasure = "KGM";
	Иначе
		UnitOfMeasure = "CT";
	КонецЕсли;
	//Если КОдЕДиницы = "166" Тогда
	//	UnitOfMeasure = "KGM";
	//ИначеЕсли (КОдЕДиницы = "796") или (КОдЕДиницы = "642") Тогда
	//	UnitOfMeasure = "PCE";
	//Иначе
	//	UnitOfMeasure = "CT";
	//КонецЕсли;		
	Возврат UnitOfMeasure;
	
КонецФункции

Функция ПолучитьШтрихкодНоменклатуры(Номенклатура, ПолеДляПоиска)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
			       |	ШтрихкодыНоменклатуры."+СокрЛП(ПолеДляПоиска)+" КАК Штрихкод
			       |ИЗ
			       |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
			       |ГДЕ
			       |	ШтрихкодыНоменклатуры.Номенклатура.Ссылка = &Владелец";
	Запрос.УстановитьПараметр("Владелец",Номенклатура);
	результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ВОзврат Результат.Штрихкод;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция ПолучитьКОдИзНоменклатурыПоставщиков(Номенклатура)
	НоменклатураПОставщиков = Справочники.НоменклатураПоставщиков.НайтиПоРеквизиту("Номенклатура",Номенклатура);
	Если ЗначениеЗаполнено(НоменклатураПОставщиков) Тогда
		ЗначениеКода =  СокрЛП(НоменклатураПОставщиков.Артикул);
	Иначе
		ЗначениеКода = "";
	КонецЕсли;			
	Возврат ЗначениеКода;	
КонецФункции

Процедура ВосстановитьЗначенияНастроек()
	Объект.EDI_Номенклатура_ЦенаИзФайла = ХранилищеОбщихНастроек.Загрузить("ОбъектEDI_Номенклатура_ЦенаИзФайла","КлючEDI_Номенклатура_ЦенаИзФайла","EDI_Номенклатура_ЦенаИзФайла");
	Попытка		
		Объект.СпособыПоискаНоменклатуры.Загрузить(ХранилищеОбщихНастроек.Загрузить("ОбъектСпособыПОискаНоменклатуры", "КлючСпособыПоискаНоменклатуры","СпособыПоискаНоменклатур"));
	Исключение
	КонецПопытки;
	Объект.РежимОтладки = ХранилищеОбщихНастроек.Загрузить("ОбъектРежимОтладки", "КлючРежимОтладки", ,"РежимОтладки");
	КонтрагентФильтр = ХранилищеОбщихНастроек.Загрузить("ОбъектКонтрагентФильтр", "КлючКонтрагентФильтр",,"КонтрагентФильтр");	
	Объект.НачалоПериода = ХранилищеОбщихНастроек.Загрузить("ОбъектНачалоПериода", "КлючНачалоПериода", ,"НачалоПериода");	
	Объект.КонецПериода = ХранилищеОбщихНастроек.Загрузить("ОбъектКонецПериода", "КлючКонецПериода", ,"КонецПериода");	
	Объект.ВыборСервераEDISOAP = ХранилищеОбщихНастроек.Загрузить("ОбъектВыборСервераEDISOAP", "КлючВыборСервераEDISOAP",,"ВыборСервераEDISOAP");
	Объект.ВыгружатьТолькоEDISoft = ХранилищеОбщихНастроек.Загрузить("ОбъектВыгружатьТолькоEDISoft", "КлючВыгружатьТолькоEDISoft", ,"ВыгружатьТолькоEDISoft");
	Объект.RECADVИсправляетЦены = ХранилищеОбщихНастроек.Загрузить("ОбъектRECADVИсправляетЦены", "КлючRECADVИсправляетЦены", ,"RECADVИсправляетЦены");	
	Объект.temp = ХранилищеОбщихНастроек.Загрузить("Объектtemp", "Ключtemp", ,"temp");
	Объект.Должность = ХранилищеОбщихНастроек.Загрузить("ОбъектДолжность", "КлючДолжность", ,"Должность");
	////	
	Объект.ВыгружатьFNS_ARCHIVE = ХранилищеОбщихНастроек.Загрузить("ОбъектВыгружатьFNS_ARCHIVE", "КлючВыгружатьFNS_ARCHIVE", ,"ВыгружатьFNS_ARCHIVE");		
	Объект.ВыгружатьORDER = ХранилищеОбщихНастроек.Загрузить("ОбъектВыгружатьORDER", "КлючВыгружатьORDER",,"ВыгружатьORDER");	
	Объект.ВыгружатьRECADV = ХранилищеОбщихНастроек.Загрузить("ОбъектВыгружатьRECADV", "КлючВыгружатьRECADV", ,"ВыгружатьRECADV");
	////
	Объект.ВыгружатьDESADV= ХранилищеОбщихНастроек.Загрузить("ОбъектВыгружатьDESADV", "КлючВыгружатьDESADV", ,"ВыгружатьDESADV");
	Объект.ВыгружатьINVOICE = ХранилищеОбщихНастроек.Загрузить("ОбъектВыгружатьINVOICE", "КлючВыгружатьINVOICE", ,"ВыгружатьINVOICE");
	Объект.ВыгружатьORDRSP = ХранилищеОбщихНастроек.Загрузить("ОбъектВыгружатьORDRSP", "КлючВыгружатьORDRSP", ,"ВыгружатьORDRSP");
	Объект.ВыгружатьALCDES = ХранилищеОбщихНастроек.Загрузить("ОбъектВыгружатьALCDES", "КлючВыгружатьALCDES", ,"ВыгружатьALCDES");
	//Объект.ЗагружатьDESADV = ХранилищеОбщихНастроек.Загрузить("ОбъектЗагружатьDESADV", "КлючЗагружатьDESADV", ,"ЗагружатьDESADV");
	//Объект.ЗагружатьFNS_ARCHIVE = ХранилищеОбщихНастроек.Загрузить("ОбъектЗагружатьFNS_ARCHIVE", "КлючЗагружатьFNS_ARCHIVE", ,"ЗагружатьFNS_ARCHIVE");
	//Объект.ЗагружатьINVOICE = 	ХранилищеОбщихНастроек.Загрузить("ОбъектЗагружатьINVOICE", "КлючЗагружатьINVOICE", ,"ЗагружатьINVOICE");
	//Объект.ЗагружатьINVOICEКОР = ХранилищеОбщихНастроек.Загрузить("ОбъектЗагружатьINVOICEКОР", "КлючЗагружатьINVOICEКОР", ,"ЗагружатьINVOICEКОР");
	//Объект.ЗагружатьORDER = ХранилищеОбщихНастроек.Загрузить("ОбъектЗагружатьORDER", "КлючЗагружатьORDER", ,"ЗагружатьORDER");
	//Объект.ЗагружатьORDRSP = ХранилищеОбщихНастроек.Загрузить("ОбъектЗагружатьORDRSP", "КлючЗагружатьORDRSP", ,"ЗагружатьORDRSP");
	//Объект.ЗагружатьRECADV = ХранилищеОбщихНастроек.Загрузить("ОбъектЗагружатьRECADV", "КлючЗагружатьRECADV", ,"ЗагружатьRECADV");	
	Объект.Имя = ХранилищеОбщихНастроек.Загрузить("ОбъектИмя", "КлючИмя", ,"Имя");
	Объект.Логин = ХранилищеОбщихНастроек.Загрузить("ОбъектЛогин", "КлючЛогин", ,"Логин");
	Объект.Отчество = ХранилищеОбщихНастроек.Загрузить("ОбъектОтчество", "КлючОтчество", ,"Отчество");
	Объект.Пароль = ХранилищеОбщихНастроек.Загрузить("ОбъектПароль", "КлючПароль", ,"Пароль");
	Объект.ПарольККлючуСертификата = ХранилищеОбщихНастроек.Загрузить("ОбъектПарольККлючуСертификата", "КлючПарольККлючуСертификата", ,"ПарольККлючуСертификата");
	Объект.ПроксиАдрес = ХранилищеОбщихНастроек.Загрузить("ОбъектПроксиАдрес", "КлючПроксиАдрес", ,"ПроксиАдрес");
	Объект.ПроксиВключен = ХранилищеОбщихНастроек.Загрузить("ОбъектПроксиВключен", "КлючПроксиВключен", ,"ПроксиВключен");
	Объект.ПроксиЗащищенЛогиномИПаролем = ХранилищеОбщихНастроек.Загрузить("ОбъектПроксиЗащищенЛогиномИПаролем", "КлючПроксиЗащищенЛогиномИПаролем", ,"ПроксиЗащищенЛогиномИПаролем");
	Объект.ПроксиЛогин = ХранилищеОбщихНастроек.Загрузить("ОбъектПроксиЛогин", "КлючПроксиЛогин", ,"ПроксиЛогин");
	Объект.ПроксиПароль = ХранилищеОбщихНастроек.Загрузить("ОбъектПроксиПароль", "КлючПроксиПароль", ,"ПроксиПароль");
	Объект.ПроксиПорт = ХранилищеОбщихНастроек.Загрузить("ОбъектПроксиПорт", "КлючПроксиПорт", ,"ПроксиПорт");
	Объект.СертификатПоле = ХранилищеОбщихНастроек.Загрузить("ОбъектСертификатПоле", "КлючСертификатПоле", ,"СертификатПоле");	
	Объект.Фамилия = ХранилищеОбщихНастроек.Загрузить("ОбъектФамилия", "КлючФамилия", ,"Фамилия");
	Объект.ТаймаутВебСервиса= ХранилищеОбщихНастроек.Загрузить("ОбъектТаймаутВебСервиса", "КлючТаймаутВебСервиса", ,"ТаймаутВебСервиса");
КонецПроцедуры

Функция ПреобразоватьДатуВСтроку(ДатаДляПреобразования)
	Результат = Формат(Год(ДатаДляПреобразования),"ЧГ=0") + ?(СтрДлина(Строка(Месяц(ДатаДляПреобразования))) < 2,"0" + Строка(Месяц(ДатаДляПреобразования)) , Строка(Месяц(ДатаДляПреобразования)))
                + ?(СтрДлина(Строка(День(ДатаДляПреобразования))) < 2, "0" + Строка(День(ДатаДляПреобразования)), Строка(День(ДатаДляПреобразования)));
    Возврат Результат;	
КонецФункции

&НаСервереБезКОнтекста
Функция ЗначениеИзСтрокиВнутрСервер(Строка)
	
	Возврат ЗначениеИзСтрокиВнутр(Строка);
	
КонецФункции

&НаСервере
Процедура ПриОткрытииНаСервере()
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");     
КонецПроцедуры

Процедура ВосстановитьНастройкиПриОткрытииСервер(СтруктураСтрока)
	
	Объект.КонецПериода = ХранилищеОбщихНастроек.Загрузить("ОбъектКонецПериода", "КлючКонецПериода", ,"КонецПериода");		
	Объект.НачалоПериода = ХранилищеОбщихНастроек.Загрузить("ОбъектНачалоПериода", "КлючНачалоПериода", ,"НачалоПериода");	
	КонтрагентФильтр = ХранилищеОбщихНастроек.Загрузить("ОбъектКонтрагентФильтр", "КлючКонтрагентФильтр", ,"КонтрагентФильтр");			
	СтруктураНастроек = ЗначениеИзСтрокиВнутрСервер(СтруктураСтрока);	
	Объект.EDI_Номенклатура_ЦенаИзФайла = СтруктураНастроек.EDI_Номенклатура_ЦенаИзФайла;
	
	Попытка		
		Объект.СпособыПоискаНоменклатуры.Загрузить(СтруктураНастроек.СпособыПоискаНоменклатуры);
	Исключение
		СОобщить(ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		Объект.ОтпечатокСеритфиката = СтруктураНастроек.ОтпечатокСеритфиката;
	Исключение
	КонецПопытки;	
	
	Попытка
		Объект.СертификатПоле = ЗначениеИзСтрокиВнутрСервер(СтруктураНастроек.СертификатПоле);
	Исключение
	КонецПопытки;
	
	Объект.серверСОАП = СтруктураНастроек.серверСОАП;	
	Объект.ИспользоватьSSCC = СтруктураНастроек.ИспользоватьSSCC;
	
	Попытка
		
		СтруктураНастройкиАдреса = ЗначениеИзСтрокиВнутр(СтруктураНастроек.СтруктураНастройкиАдреса);
		СтруктураНастройкиАдресаПок = СтруктураНастройкиАдреса.СтруктураНастройкиАдресаПок;
		СтруктураНастройкиАдресаОрг = СтруктураНастройкиАдреса.СтруктураНастройкиАдресаОрг;
		СтруктураНастройкиАдресаГп = СтруктураНастройкиАдреса.СтруктураНастройкиАдресаГп;
		
		Объект.Пок_Город = СтруктураНастройкиАдресаПок.Пок_Город;
		Объект.Пок_индекс = СтруктураНастройкиАдресаПок.Пок_индекс;
		Объект.Пок_Улица = СтруктураНастройкиАдресаПок.Пок_Улица;
		Объект.Пок_Дом = СтруктураНастройкиАдресаПок.Пок_Дом;
		
		Объект.Орг_Индекс = СтруктураНастройкиАдресаОрг.Орг_Индекс;
		Объект.Орг_Город = СтруктураНастройкиАдресаОрг.Орг_Город;
		Объект.Орг_Улица = СтруктураНастройкиАдресаОрг.Орг_Улица;
		Объект.Орг_Дом = СтруктураНастройкиАдресаОрг.Орг_Дом;
		
		Объект.ГП_Город = СтруктураНастройкиАдресаГп.ГП_Город;
		Объект.Гп_Улица = СтруктураНастройкиАдресаГп.Гп_Улица;
		Объект.Гп_дом = СтруктураНастройкиАдресаГп.Гп_дом;
		Объект.ГП_Город = СтруктураНастройкиАдресаГп.ГП_Город;
			
	Исключение
	КонецПопытки;
	
	Объект.Версия_5_01 = СтруктураНастроек.Версия_5_01;
	Объект.ФИОГенДир = СтруктураНастроек.ФИОГенДир;
	Объект.ФИОГлБух = СтруктураНастроек.ФИОГлБух;
	Объект.Бухгалтерия = СтруктураНастроек.Бухгалтерия;
	Объект.УТАП = СтруктураНастроек.УТАП;
	Объект.УТ11 = СтруктураНастроек.УТ11;
	Объект.Период = СтруктураНастроек.Период;
	
	СтруктураНастройкиАдреса = ЗначениеИзСтрокиВнутр(СтруктураНастроек.СтруктураНастройкиАдреса);
	СтруктураНастройкиАдресаПок = СтруктураНастройкиАдреса.СтруктураНастройкиАдресаПок;
	СтруктураНастройкиАдресаОрг = СтруктураНастройкиАдреса.СтруктураНастройкиАдресаОрг;
	СтруктураНастройкиАдресаГп = СтруктураНастройкиАдреса.СтруктураНастройкиАдресаГп;
	
	Объект.Пок_Город = СтруктураНастройкиАдресаПок.Пок_Город;
	Объект.Пок_индекс = СтруктураНастройкиАдресаПок.Пок_индекс;
	Объект.Пок_Улица = СтруктураНастройкиАдресаПок.Пок_Улица;
	Объект.Пок_Дом = СтруктураНастройкиАдресаПок.Пок_Дом;
	
	Объект.Орг_Индекс = СтруктураНастройкиАдресаОрг.Орг_Индекс;
	Объект.Орг_Город = СтруктураНастройкиАдресаОрг.Орг_Город;
	Объект.Орг_Улица = СтруктураНастройкиАдресаОрг.Орг_Улица;
	Объект.Орг_Дом = СтруктураНастройкиАдресаОрг.Орг_Дом;
	
	Объект.ГП_Город = СтруктураНастройкиАдресаГп.Орг_Дом;
	Объект.Гп_Улица = СтруктураНастройкиАдресаГп.Орг_Дом;
	Объект.Гп_дом = СтруктураНастройкиАдресаГп.Орг_Дом;
	Объект.ГП_Город = СтруктураНастройкиАдресаГп.Орг_Дом;
	
	Объект.РежимОтладки = СтруктураНастроек.РежимОтладки;
	Объект.ВыгружатьDESADV = СтруктураНастроек.ВыгружатьDESADV;
	Объект.ВыборСервераEDISOAP = СтруктураНастроек.ВыборСервераEDISOAP;
	Объект.ВыгружатьFNS_ARCHIVE = СтруктураНастроек.ВыгружатьFNS_ARCHIVE;
	Объект.ВыгружатьINVOICE = СтруктураНастроек.ВыгружатьINVOICE;
	Объект.ВыгружатьINVOICEКОР = СтруктураНастроек.ВыгружатьINVOICEКОР;
	Объект.ВыгружатьORDER = СтруктураНастроек.ВыгружатьORDER;
	Объект.ВыгружатьORDRSP = СтруктураНастроек.ВыгружатьORDRSP;
	Объект.ВыгружатьRECADV = СтруктураНастроек.ВыгружатьRECADV;
	Объект.ВыгружатьALCDES = СтруктураНастроек.ВыгружатьALCDES;
	Объект.ВыгружатьTORG12_SELLER = СтруктураНастроек.ВыгружатьTORG12_SELLER;
	Объект.ВыгружатьТолькоEDISoft = СтруктураНастроек.ВыгружатьТолькоEDISoft;
	Объект.RECADVИсправляетЦены = СтруктураНастроек.RECADVИсправляетЦены;	
	Объект.temp = СтруктураНастроек.temp;
	Объект.Должность = СтруктураНастроек.Должность;
	Объект.ЗагружатьDESADV = СтруктураНастроек.ЗагружатьDESADV;
	Объект.ЗагружатьFNS_ARCHIVE = СтруктураНастроек.ЗагружатьFNS_ARCHIVE;
	Объект.ЗагружатьINVOICE = 	СтруктураНастроек.ЗагружатьINVOICE;
	Объект.ЗагружатьINVOICEКОР = СтруктураНастроек.ЗагружатьINVOICEКОР;
	Объект.ЗагружатьORDER = СтруктураНастроек.ЗагружатьORDER;
	Объект.ЗагружатьORDRSP = СтруктураНастроек.ЗагружатьORDRSP;
	Объект.ЗагружатьRECADV = СтруктураНастроек.ЗагружатьRECADV;	
	Объект.Имя = СтруктураНастроек.Имя;
	Объект.Логин = СтруктураНастроек.Логин;
	Объект.Отчество = СтруктураНастроек.Отчество;
	Объект.Пароль = СтруктураНастроек.Пароль;
	Объект.ПарольККлючуСертификата = СтруктураНастроек.ПарольККлючуСертификата;
	Объект.ПроксиАдрес = СтруктураНастроек.ПроксиАдрес;
	Объект.ПроксиВключен = СтруктураНастроек.ПроксиВключен;
	Объект.ПроксиЗащищенЛогиномИПаролем = СтруктураНастроек.ПроксиЗащищенЛогиномИПаролем;
	Объект.ПроксиЛогин = СтруктураНастроек.ПроксиЛогин;
	Объект.ПроксиПароль = СтруктураНастроек.ПроксиПароль;
	Объект.ПроксиПорт = СтруктураНастроек.ПроксиПорт;
	Объект.СертификатПоле = СтруктураНастроек.СертификатПоле;	
	Объект.Фамилия = СтруктураНастроек.Фамилия;
	Объект.ТаймаутВебСервиса= СтруктураНастроек.ТаймаутВебСервиса;
	Попытка
		ОБъект.ВыгружатьУПД = СтруктураНастроек.ВыгружатьУПД;
		Объект.ВыгружатьУКД = СтруктураНастроек.ВыгружатьУКД;
		Объект.Подписант_ОбластьПолномочий = СтруктураНастроек.Подписант_ОбластьПолномочий;
		Объект.Подписант_Статус = СтруктураНастроек.Подписант_Статус;
	Исключение
	КонецПопытки;
	//ВФ(*)БУХ
	Попытка
		Объект.СчётВместоРеализацииБУХ = СтруктураНастроек.СчётВместоРеализацииБУХ;
	Исключение
	КонецПопытки;
	Попытка
		Объект.ИспользоватьДопСведения = СтруктураНастроек.ИспользоватьДопСведения;
	Исключение
	КонецПопытки;
	Попытка
	Объект.CхемыПартнеровКонтрагентов = СтруктураНастроек.CхемыПартнеровКонтрагентов;
	Исключение
	КонецПопытки;
	Попытка
	Объект.ЗаписатьЛогВФайл = СтруктураНастроек.ЗаписатьЛогВФайл;
	Исключение
	КонецПопытки;
	Попытка
	Объект.КороткийНомер = СтруктураНастроек.КороткийНомер;
	Исключение
	КонецПопытки;
	//ВФ(**)БУХ	
КонецПроцедуры

Функция ПолучитьТекущуюОрганизацию()
	Попытка
		Возврат ХранилищеОбщихНастроек.Загрузить("ОбъектОрганизация", "КлючОрганизация","Организация");	
	Исключение
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецПопытки;
КонецФункции
	
Функция ПолучитьТекущегоПользователя()
	Возврат ПараметрыСеанса.ТекущийПользователь;
КонецФункции

Процедура СохранитьНастройкиПриЗакрытииСервер()
	ХранилищеОбщихНастроек.Сохранить("ОбъектНачалоПериода", "КлючНачалоПериода", Объект.НачалоПериода,,"НачалоПериода");	
	ХранилищеОбщихНастроек.Сохранить("ОбъектКонецПериода", "КлючКонецПериода", Объект.КонецПериода,,"КонецПериода");		
	ХранилищеОбщихНастроек.Сохранить("ОбъектКонтрагентФильтр", "КлючКонтрагентФильтр", КонтрагентФильтр,,"КонтрагентФильтр");	
	
КонецПроцедуры

Функция ПолучитьЗначениеСвойстваОбъектаДФормы(ПСвойство, ВладелецСвойства, ВыводитьСообщение=Ложь)
	//ОбъектОбработка.ИнициализироватьСвойствоОбъекта(ПСвойство,ВладелецСвойства,ВыводитьСообщение);
	//Результат = Неопределено;	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Результат = ОбъектОбработка.ПолучитьЗначениеСвойстваОбъекта(ПСвойство, ВладелецСвойства, ВыводитьСообщение=Ложь);
	Возврат результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСтатусы(Команда)
	
	Если Объект.ПоследнийТипДействия = "ON_SCHFDOPPR" ИЛИ Объект.ПоследнийТипДействия = "ON_KORSCHFDOPPR" Тогда
		ЗагрузитьВходящие("UPD_STATUS", Объект.НачалоПериода, Объект.КонецПериода);
		ЗагрузитьВходящие("FNS_STATUS_ARCHIVE", Объект.НачалоПериода, Объект.КонецПериода);
	ИНаче
		ЗагрузитьВходящие("FNS_ARCHIVE", Объект.НачалоПериода, Объект.КонецПериода);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьОкноSSCC(Команда)
	
	//КоличествоВыделенныхСтрок = ЭтаФорма.Элементы.ЗаголовкиДокументов4.ВыделенныеСтроки.Количество();
	//Сч = 0;
	//
	//Если КоличествоВыделенныхСтрок>0 Тогда
	//	
	//	Для Сч = 0 По КоличествоВыделенныхСтрок-1 Цикл
	//		
	//		НомерТекущейСтроки = ЭтаФорма.Элементы.ЗаголовкиДокументов4.ВыделенныеСтроки.Получить(Сч);
	//		ТекущаяСтрока = ЗаголовкиДокументов.НайтиПоИдентификатору(НомерТекущейСтроки);
	//		НомерИДатаЗаказа = ПолучитьНомерИДатуДокумента(ТекущаяСтрока.Документ,"ORDER", "DESADV");
	//		Выгрузить = ОткрытьОкноSSCCКлиент(ТекущаяСтрока.Документ, НомерИДатаЗаказа.ДопАтрибуты);
	//		
	//		Попытка
	//			
	//			Если выгрузить Тогда
	//				ВыгрузитьПоSOAP(ТекущаяСтрока, Истина);
	//			КонецЕсли;
	//			
	//		Исключение
	//		КонецПопытки;
	//		
	//	КонецЦикла;	
	//	
	//КонецЕсли;
	КоличествоВыделенныхСтрок = ЭтаФорма.Элементы.ЗаголовкиДокументов4.ВыделенныеСтроки.Количество();
	Сч = 0;
	
	Если КоличествоВыделенныхСтрок>0 Тогда
		
		Для Сч = 0 По КоличествоВыделенныхСтрок-1 Цикл
			
			НомерТекущейСтроки = ЭтаФорма.Элементы.ЗаголовкиДокументов4.ВыделенныеСтроки.Получить(Сч);
			ТекущаяСтрока = ЗаголовкиДокументов.НайтиПоИдентификатору(НомерТекущейСтроки);
			НомерИДатаЗаказа = ПолучитьНомерИДатуДокумента(ТекущаяСтрока.Документ,"ORDER", "DESADV");
			Если ЗначениеЗаполнено(НомерИДатаЗаказа) Тогда
				
				Выгрузить = ОткрытьОкноSSCCКлиент(ТекущаяСтрока.Документ);
			
				Попытка
					
					Если выгрузить Тогда
						//ВыгрузитьПоSOAP(ТекущаяСтрока, Истина);
					КонецЕсли;
					
				Исключение
				КонецПопытки;
			Иначе
				Сообщить("Не найдена запись для заказа " + ПолучитьЗаказ(ТекущаяСтрока.Документ));
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОткрытьОкноSSCCКлиент(Документ)
	Объект.ТаблицаНоменклатуры.Очистить();
	Объект.ТаблицаПаллет.Очистить();
	Объект.ТаблицаРаспределения.Очистить();
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Документ", Документ);
	СтруктураПараметров.Вставить("ПутьКВнешнейБД",Объект.ЭДИ_КаталогВнешнейБазыДанных);
	СтруктураПараметров.Вставить("Бухгалтерия",Объект.Бухгалтерия);
	//ФормаРаспределения = Объект.ПолучитьФорму("ФормаРаспределенияТоваровПоПаллетам",ЭтаФорма);
	ФормаРаспределения = ПолучитьФорму("ВнешняяОбработка.EDISOFT.Форма.ФормаSSCC1",СтруктураПараметров,ЭтаФорма);
	Выгружать = ФормаРаспределения.ОткрытьМодально();
	//ЭтаФорма.Команды.
КонецФункции

//&НаКлиенте
//Функция ОткрытьОкноSSCCКлиент(Документ, ДопАтрибуты)
//				//СохранитьДокДляSSCC(ТекущаяСтрока.Документ);
//	СтруктураПараметров = Новый Структура("Документ", Документ);
//	СтруктураПараметров.Вставить("ДопАтрибуты", ДопАтрибуты);
//	ФормаSSCC = ПолучитьФорму("ВнешняяОбработка.EDISOFT.Форма.ФормаSSCC",СтруктураПараметров);
//	Выгружать = ФормаSSCC.ОткрытьМодально();
//				
//	Возврат Выгружать;
//КонецФункции
